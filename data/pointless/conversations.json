{
  "conversations": [
    "[{\"from\": \"human\", \"value\": \"Question: Is the person with the highest net worth self-made? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the city with the most billionaires in the United States? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"(df[df['country'] == 'United States']['city'].mode()[0] == df['city'].mode()[0])\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a non-self-made billionaire in the top 5 ranks? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"(df[df['rank'] <= 5]['selfMade'] == False).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does the oldest billionaire have a philanthropy score of 5? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['age'] == df['age'].max(), 'philanthropyScore'].iloc[0] == 5\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the age of the youngest billionaire? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df['age'].min()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many billionaires are there from the 'Technology' category? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df[df['category'] == 'Technology'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the total worth of billionaires in the 'Automotive' category? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df[df['category'] == 'Automotive']['finalWorth'].sum()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many billionaires have a philanthropy score above 3? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df[df['philanthropyScore'] > 3].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the rank of the wealthiest non-self-made billionaire? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df[df['selfMade'] == False].nsmallest(1, 'rank')['rank'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which category does the richest billionaire belong to? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['finalWorth'] == df['finalWorth'].max(), 'category'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the country of origin of the oldest billionaire? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['age'] == df['age'].max(), 'country'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the gender of the billionaire with the highest philanthropy score? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['philanthropyScore'].idxmax(), 'gender']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the source of wealth for the youngest billionaire? \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['age'] == df['age'].min(), 'source'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 3 countries with the most billionaires. \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df['country'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 5 sources of wealth for billionaires. \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df['source'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the bottom 3 categories with the fewest billionaires. \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df['category'].value_counts().nsmallest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 5 ranks of billionaires who are not self-made. \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df[df['selfMade'] == False].nsmallest(5, 'rank')['rank'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the bottom 3 ages of billionaires who have a philanthropy score of 5. \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df[df['philanthropyScore'] == 5].nsmallest(3, 'age')['age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 6 final worth values of billionaires in the 'Technology' category. \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df[df['category'] == 'Technology'].nlargest(6, 'finalWorth')['finalWorth'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 2 final worth values of billionaires in the 'Automotive' category. \\n Dataset Columns: rank; uint16, personName; category, age; float64, finalWorth; uint32, category; category, source; category, country; category, state; category, city; category, organization; category, selfMade; bool, gender; category, birthDate; datetime64[us, UTC], title; category, philanthropyScore; float64, bio; object, about; object\"}, {\"from\": \"gpt\", \"value\": \"df[df['category'] == 'Automotive'].nlargest(2, 'finalWorth')['finalWorth'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Were there any passengers who paid a fare of more than $500? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['Fare'] > 500).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is every passenger's name unique? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Name'].is_unique\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Were there any female passengers in the 3rd class who survived? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"(df[(df['Sex'] == 'female') & (df['Pclass'] == 3) & (df['Survived'] == True)].shape[0] > 0)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique passenger classes are present in the dataset? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Pclass'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the maximum age of the passengers? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Age'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many passengers boarded without any siblings or spouses? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Siblings_Spouses Aboard'] == 0].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: On average, how much fare did the passengers pay? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Fare'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which passenger class has the highest number of survivors? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Survived'] == True]['Pclass'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common gender among the survivors? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Survived'] == True]['Sex'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common age range among passengers: (0-18, 18-30, 30-50, 50+)? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Age'].dropna().apply(lambda x: '0-18' if x <= 18 else '18-30' if x <= 30 else '30-50' if x <= 50 else '50+').mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the top 3 passenger classes by survival rate. \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('Pclass')['Survived'].mean().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 genders by average fare paid? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('Sex')['Fare'].mean().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the oldest 3 ages among the survivors? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Survived'] == True].nlargest(3, 'Age')['Age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Could you list the youngest 3 ages among the survivors? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Survived'] == True].nsmallest(3, 'Age')['Age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the lowest 4 fares among those who didn't survive? \\n Dataset Columns: Survived; bool, Pclass; uint8, Name; object, Sex; category, Age; float64, Siblings_Spouses Aboard; uint8, Parents_Children Aboard; uint8, Fare; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Survived'] == False].nsmallest(4, 'Fare')['Fare'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the average age of the respondents above 30? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb'].mean() > 30)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there more single individuals than married ones in the dataset? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['What is your civil status? \\ud83d\\udc8d'] == 'Single').sum() > (df['What is your civil status? \\ud83d\\udc8d'] == 'Married').sum()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the most frequent hair color black? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd'].mode()[0] == 'black')\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average gross annual salary? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Gross annual salary (in euros) \\ud83d\\udcb8'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the median age of the respondents? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb'].median()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common level of studies achieved? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['What is the maximum level of studies you have achieved? \\ud83c\\udf93'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which body complexity has the least number of respondents? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['What is your body complexity? \\ud83c\\udfcb\\ufe0f'].value_counts().idxmin()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most frequent eye color? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['What is your eye color? \\ud83d\\udc41\\ufe0f'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the bottom 3 hair lengths in terms of frequency. \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f'].value_counts().nsmallest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the top 5 civil statuses represented in the dataset. \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['What is your civil status? \\ud83d\\udc8d'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 least common hair colors? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd'].value_counts().nsmallest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 maximum gross annual salaries? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(4, 'Gross annual salary (in euros) \\ud83d\\udcb8')['Gross annual salary (in euros) \\ud83d\\udcb8'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the bottom 3 values for the happiness scale. \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Happiness scale'].nsmallest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 highest ages present in the dataset? \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb'].nlargest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the bottom 6 skin tone values based on frequency. \\n Dataset Columns: Submitted at; datetime64[us, UTC], What is your age? \\ud83d\\udc76\\ud83c\\udffb\\ud83d\\udc75\\ud83c\\udffb; uint8, What's your nationality?; category, What is your civil status? \\ud83d\\udc8d; category, What's your sexual orientation?; category, Do you have children? \\ud83c\\udf7c; category, What is the maximum level of studies you have achieved? \\ud83c\\udf93; category, Gross annual salary (in euros) \\ud83d\\udcb8; float64, What's your height? in cm \\ud83d\\udccf; uint8, What's your weight? in Kg \\u2696\\ufe0f; float64, What is your body complexity? \\ud83c\\udfcb\\ufe0f; category, What is your eye color? \\ud83d\\udc41\\ufe0f; category, What is your hair color? \\ud83d\\udc69\\ud83e\\uddb0\\ud83d\\udc71\\ud83c\\udffd; category, What is your skin tone?; uint8, How long is your hair? \\ud83d\\udc87\\ud83c\\udffb\\u2640\\ufe0f\\ud83d\\udc87\\ud83c\\udffd\\u2642\\ufe0f; category, How long is your facial hair? \\ud83e\\uddd4\\ud83c\\udffb; category, How often do you wear glasses? \\ud83d\\udc53; category, How attractive do you consider yourself?; uint8, Have you ever use an oline dating app?; category, Where have you met your sexual partners? (In a Bar or Restaurant); bool, Where have you met your sexual partners? (Through Friends); bool, Where have you met your sexual partners? (Through Work or as Co-Workers); bool, Where have you met your sexual partners? (Through Family); bool, Where have you met your sexual partners? (in University); bool, Where have you met your sexual partners? (in Primary or Secondary School); bool, Where have you met your sexual partners? (Neighbors); bool, Where have you met your sexual partners? (in Church); bool, Where have you met your sexual partners? (Other); bool, How many people have you kissed?; uint16, How many sexual partners have you had?; uint16, How many people have you considered as your boyfriend_girlfriend?; uint8, How many times per month did you practice sex lately?; float64, Happiness scale; uint8, What area of knowledge is closer to you?; object, If you are in a relationship, how long have you been with your partner?; float64\"}, {\"from\": \"gpt\", \"value\": \"df['What is your skin tone?'].value_counts().nsmallest(6).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any trips with a total distance greater than 30 miles? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"(df['trip_distance'] > 30).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Were there any trips that cost more than $100 in total? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"(df['total_amount'] > 100).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any trip with more than 6 passengers? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"(df['passenger_count'] > 6).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Did all the trips use a payment type of either 1 or 2? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['payment_type'].isin([1, 2]).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum fare amount charged for a trip? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['fare_amount'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique pickup locations are in the dataset? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['PULocationID'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average tip amount given by passengers? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['tip_amount'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which payment type is the most common in the dataset? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['payment_type'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which vendor has the most trips recorded? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['VendorID'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common drop-off location? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['DOLocationID'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 3 most frequent pickup locations? \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['PULocationID'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the 4 most common rate codes used. \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['RatecodeID'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: list the 2 most frequent store and forward flags. \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['store_and_fwd_flag'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Identify the top 4 payment types used by frequency \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df['payment_type'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Report the 4 highest toll amounts paid. \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(4, 'tolls_amount')['tolls_amount'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: list the top 3 longest trip distances \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'trip_distance')['trip_distance'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Report the 6 highest fare amounts charged. \\n Dataset Columns: VendorID; uint8, tpep_pickup_datetime; datetime64[us, UTC], tpep_dropoff_datetime; datetime64[us, UTC], passenger_count; uint8, trip_distance; float64, RatecodeID; uint8, store_and_fwd_flag; category, PULocationID; uint16, DOLocationID; uint16, payment_type; uint8, fare_amount; float64, extra; float64, mta_tax; float64, tip_amount; float64, tolls_amount; uint8, improvement_surcharge; float64, total_amount; float64, congestion_surcharge; float64, Airport_fee; float64, airport_fee; category\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(6, 'fare_amount')['fare_amount'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do any complaints have 'Dog' as a descriptor? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['descriptor'].str.contains('Dog').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Were there any complaints raised in April? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"(df['month_name'] == 'April').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the total number of unique agencies handling complaints? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['agency'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many complaints were raised at midnight? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df[df['hour'] == 0].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique descriptors are present in the dataset? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['descriptor'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which borough has the most complaints? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['borough'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which month sees the highest number of complaints? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['month_name'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which weekday has the least complaints? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['weekday_name'].value_counts().idxmin()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which agency is least frequently handling complaints? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['agency'].value_counts().idxmin()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 5 most frequent complaint types. \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['complaint_type'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 4 agencies handle the most complaints? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Mention the 2 most common weekdays for complaints. \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['weekday_name'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 hours with the most complaints? \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['hour'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: State the 3 lowest unique complaint keys. \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['unique_key'].nsmallest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 6 highest complaint numbers from the dataset. \\n Dataset Columns: segmentation_1; object, descriptor; category, complaint_type; category, created_date; datetime64[us, UTC], borough; category, hour; uint8, month_name; category, weekday_name; category, agency; category, resolution_description; category, agency_name; category, city; category, location_type; category, incident_zip; float64, incident_address; object, street_name; category, cross_street_1; category, cross_street_2; category, intersection_street_1; category, intersection_street_2; category, address_type; category, landmark; category, facility_type; category, status; category, due_date; datetime64[us, UTC], resolution_action_updated_date; datetime64[us, UTC], community_board; category, x_coordinate; float64, y_coordinate; float64, park_facility_name; category, park_borough; category, bbl; float64, open_data_channel_type; category, vehicle_type; category, taxi_company_borough; category, taxi_pickup_location; category, bridge_highway_name; category, bridge_highway_direction; category, road_ramp; category, bridge_highway_segment; category, latitude; float64, longitude; float64, location; object, unique_key; uint32, Unnamed_0; uint32, closed_date; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['unique_key'].nlargest(6).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all properties in the dataset located in the same neighbourhood? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['neighbourhood_cleansed'].nunique() == 1\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do all hosts verify their identity? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['host_identity_verified'].eq('t').all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all reviews_per_month values greater than 5? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"(df['reviews_per_month'] > 5).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any listings without a specified room type? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['room_type'].isnull().any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique neighbourhoods are there in the dataset? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['host_neighbourhood'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum number of bedrooms a property has in this dataset? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['bedrooms'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which neighbourhood has the most listings? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['neighbourhood_cleansed'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common room type in the listings? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['room_type'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What property type has the most listings? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['property_type'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 3 neighbourhoods with the most listings. \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['neighbourhood_cleansed'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 4 most common property types? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['property_type'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the 2 most preferred room types? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['room_type'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 highest review scores for location? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['review_scores_location'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 most common number of bedrooms in properties? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['bedrooms'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 highest counts of listings by a single host for entire homes? \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['calculated_host_listings_count_entire_homes'].nlargest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 6 lowest review scores for communication. \\n Dataset Columns: neighbourhood_cleansed; category, host_neighbourhood; category, price; category, room_type; category, reviews_per_month; float64, property_type; category, bedrooms; float64, host_verifications; object, host_acceptance_rate; category, host_identity_verified; category, beds; float64, amenities; object, minimum_nights; uint16, last_review; datetime64[us, UTC], review_scores_rating; float64, instant_bookable; category, calculated_host_listings_count; uint16, first_review; datetime64[us, UTC], number_of_reviews; uint16, accommodates; uint8, listing_url; category, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_listings_count; float64, host_total_listings_count; float64, host_has_profile_pic; category, neighbourhood; category, latitude; float64, longitude; float64, bathrooms; category, bathrooms_text; category, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, calculated_host_listings_count_entire_homes; uint16, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, x; float64, y; float64, price_M0jI; category\"}, {\"from\": \"gpt\", \"value\": \"df['review_scores_communication'].nsmallest(6).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there players who have a greater overall score than their potential score? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"(df['Overall<gx:number>'] > df['Potential<gx:number>']).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any players whose preferred foot is left and are from a nationality that starts with 'B'? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Preferred Foot<gx:category>'] == 'Left') & (df['Nationality<gx:category>'].str.startswith('B'))].any().any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average overall score of players from France? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df[df['Nationality<gx:category>'] == 'France']['Overall<gx:number>'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique clubs are there in the dataset? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df['Club<gx:category>'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest value (in \\u20ac) of a player in the dataset? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df['Value_\\u20ac<gx:currency>'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many players have the position 'ST'? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df[df['Position<gx:category>'] == 'ST'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common nationality in the dataset? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df['Nationality<gx:category>'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common preferred foot amongst players? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df['Preferred Foot<gx:category>'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common position of players in the dataset? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df['Position<gx:category>'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 3 clubs in terms of the total value (in \\u20ac) of their players? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('Club<gx:category>')['Value_\\u20ac<gx:currency>'].sum().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the bottom 4 nationalities in terms of the average agility of their players? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('Nationality<gx:category>')['Agility<gx:number>'].mean().nsmallest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 overall scores in the dataset? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df['Overall<gx:number>'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the bottom 5 potential scores in the dataset? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df['Potential<gx:number>'].nsmallest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 values (in \\u20ac) of players in the dataset? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df['Value_\\u20ac<gx:currency>'].nlargest(4).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 wages (in \\u20ac) of players in the dataset? \\n Dataset Columns: ID<gx:number>; uint32, Name<gx:text>; category, Age<gx:number>; uint8, Photo<gx:url>; category, Nationality<gx:category>; category, Overall<gx:number>; uint8, Potential<gx:number>; uint8, Club<gx:category>; category, Value_\\u20ac<gx:currency>; uint32, Wage_\\u20ac<gx:currency>; uint32, Preferred Foot<gx:category>; category, International Reputation<gx:number>; uint8, Weak Foot<gx:number>; uint8, Skill Moves<gx:number>; uint8, Work Rate<gx:category>; category, Position<gx:category>; category, Joined<gx:date>; category, Contract Valid Until<gx:date>; category, Height_ft<gx:number>; float64, Weight_lbs<gx:number>; uint8, Crossing<gx:number>; uint8, Finishing<gx:number>; uint8, HeadingAccuracy<gx:number>; uint8, ShortPassing<gx:number>; uint8, Volleys<gx:number>; uint8, Dribbling<gx:number>; uint8, Curve<gx:number>; uint8, FKAccuracy<gx:number>; uint8, LongPassing<gx:number>; uint8, BallControl<gx:number>; uint8, Acceleration<gx:number>; uint8, SprintSpeed<gx:number>; uint8, Agility<gx:number>; uint8, Reactions<gx:number>; uint8, Balance<gx:number>; uint8, ShotPower<gx:number>; uint8, Jumping<gx:number>; uint8, Stamina<gx:number>; uint8, Strength<gx:number>; uint8, LongShots<gx:number>; uint8, Aggression<gx:number>; uint8, Interceptions<gx:number>; uint8, Positioning<gx:number>; uint8, Vision<gx:number>; uint8, Penalties<gx:number>; uint8, Composure<gx:number>; uint8, Marking<gx:number>; category, StandingTackle<gx:number>; uint8, SlidingTackle<gx:number>; uint8, GKDiving<gx:number>; uint8, GKHandling<gx:number>; uint8, GKKicking<gx:number>; uint8, GKPositioning<gx:number>; uint8, GKReflexes<gx:number>; uint8, Best Position<gx:category>; category, Best Overall Rating<gx:number>; uint8, DefensiveAwareness<gx:number>; uint8, General Postion<gx:category>; category, Legend; bool\"}, {\"from\": \"gpt\", \"value\": \"df['Wage_\\u20ac<gx:currency>'].nlargest(2).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: All tornadoes in the dataset occurred in the 21st century. \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"(df['yr'] >= 2001).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique states are represented in the dataset? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['st'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest magnitude of tornado recorded in the dataset? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['mag'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the longest length of a tornado path in the dataset? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['len'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum number of injuries caused by a single tornado? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['inj'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which state has experienced the most tornadoes? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['st'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: In which month do most tornadoes occur? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['mo'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 number of injuries caused by tornadoes in the dataset? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['inj'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 5 magnitudes of tornadoes in the dataset? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['mag'].nlargest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 path lengths of tornadoes in the dataset? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(4, 'len')['len'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 6 number of fatalities caused by tornadoes in the dataset? \\n Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['fat'].nlargest(6).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: All recorded temperatures are above freezing point. \\n Dataset Columns: DATE; datetime64[us, UTC], PRCP; float64, SNOW; float64, SNWD; float64, TMIN; float64, TMAX; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['TMIN'] > 0).all() and (df['TMAX'] > 0).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest recorded precipitation in inches? \\n Dataset Columns: DATE; datetime64[us, UTC], PRCP; float64, SNOW; float64, SNWD; float64, TMIN; float64, TMAX; float64\"}, {\"from\": \"gpt\", \"value\": \"df['PRCP'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the lowest minimum temperature recorded? \\n Dataset Columns: DATE; datetime64[us, UTC], PRCP; float64, SNOW; float64, SNWD; float64, TMIN; float64, TMAX; float64\"}, {\"from\": \"gpt\", \"value\": \"df['TMIN'].min()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest maximum temperature recorded? \\n Dataset Columns: DATE; datetime64[us, UTC], PRCP; float64, SNOW; float64, SNWD; float64, TMIN; float64, TMAX; float64\"}, {\"from\": \"gpt\", \"value\": \"df['TMAX'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the deepest recorded snow depth in inches? \\n Dataset Columns: DATE; datetime64[us, UTC], PRCP; float64, SNOW; float64, SNWD; float64, TMIN; float64, TMAX; float64\"}, {\"from\": \"gpt\", \"value\": \"df['SNWD'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 highest recorded precipitation events in inches? \\n Dataset Columns: DATE; datetime64[us, UTC], PRCP; float64, SNOW; float64, SNWD; float64, TMIN; float64, TMAX; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'PRCP')['PRCP'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 lowest minimum temperatures recorded? \\n Dataset Columns: DATE; datetime64[us, UTC], PRCP; float64, SNOW; float64, SNWD; float64, TMIN; float64, TMAX; float64\"}, {\"from\": \"gpt\", \"value\": \"df['TMIN'].nsmallest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 highest maximum temperatures recorded? \\n Dataset Columns: DATE; datetime64[us, UTC], PRCP; float64, SNOW; float64, SNWD; float64, TMIN; float64, TMAX; float64\"}, {\"from\": \"gpt\", \"value\": \"df['TMAX'].nlargest(4).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 deepest snow depth recorded in inches? \\n Dataset Columns: DATE; datetime64[us, UTC], PRCP; float64, SNOW; float64, SNWD; float64, TMIN; float64, TMAX; float64\"}, {\"from\": \"gpt\", \"value\": \"df['SNWD'].nlargest(2).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there more than 20 unique clothing items in the dataset? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Clothing ID'].nunique() > 20\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the age of the reviewers above 50 years on average? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Age'].mean() > 50\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do all reviews come from the same department? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Department Name'].nunique() == 1\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all products recommended? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"(df['Recommended IND'] == 1).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average age of the reviewers? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Age'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the highest number of positive feedback received for a review? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Positive Feedback Count'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common rating given by reviewers? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Rating'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique clothing items are there in the dataset? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Clothing ID'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which department has the most reviews? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Department Name'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which class of clothing is most commonly reviewed? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Class Name'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which division is most commonly mentioned in the reviews? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Division Name'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most frequently reviewed clothing item? If you find a tie answer with row order. \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Clothing ID'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the 4 most reviewed categories in Department Name? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Department Name'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 2 most reviewed categories in Class Name? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Class Name'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the 2 most reviewed categories in Division Name? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Division Name'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 oldest Ages of reviewers? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(5, 'Age')['Age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 most common Positive Feedback Counts of reviewers? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Positive Feedback Count'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 most common values for recommendation indicator? \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Recommended IND'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 most common clothing IDs in the reviews? If you find a tie answer in row order. \\n Dataset Columns: Clothing ID; uint16, Age; uint8, Title; category, Review Text; object, Rating; uint8, Recommended IND; uint8, Positive Feedback Count; uint8, Division Name; category, Department Name; category, Class Name; category\"}, {\"from\": \"gpt\", \"value\": \"df['Clothing ID'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any incidents that occurred at the same latitude and longitude more than once? \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"(df.groupby(['Latitude', 'Longitude']).size() > 1).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique types of incident categories are there in the dataset? \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Incident Category'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many different police districts are there in the dataset? \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Police District'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average incident count per year? \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Incident Year'].value_counts().mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common incident category? \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Incident Category'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which day of the week has the highest number of incidents? \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Incident Day of Week'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the Police District with the most incidents? \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Police District'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the years with the top 4 highest incident counts. \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Incident Year'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 years with the highest incident counts. \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Incident Year'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the 6 years with the most number of unique incident categories. \\n Dataset Columns: Incident Datetime; object, Incident Date; datetime64[us, UTC], Incident Time; category, Incident Year; uint16, Incident Day of Week; category, Report Datetime; object, Row ID; int64, Incident ID; uint32, Incident Number; uint32, CAD Number; float64, Report Type Code; category, Report Type Description; category, Filed Online; object, Incident Code; uint32, Incident Category; category, Incident Subcategory; category, Incident Description; category, Resolution; category, Intersection; category, CNN; float64, Police District; category, Analysis Neighborhood; category, Supervisor District; float64, Supervisor District 2012; float64, Latitude; float64, Longitude; float64, Point; category, Neighborhoods; float64, ESNCAG - Boundary File; float64, Central Market/Tenderloin Boundary Polygon - Updated; float64, Civic Center Harm Reduction Project Boundary; float64, HSOC Zones as of 2018-06-05; float64, Invest In Neighborhoods (IIN) Areas; category, Current Supervisor Districts; float64, Current Police Districts; float64\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('Incident Year')['Incident Category'].nunique().nlargest(6).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does any patient have a resting blood pressure above 200? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['RestingBP'] > 200).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there patients without heart disease? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['HeartDisease'].eq(0).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does everyone have normal resting electrocardiographic results? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['RestingECG'] == 'Normal').all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum age of patients in the dataset? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Age'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the minimum resting blood pressure among the patients? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['RestingBP'].min()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average cholesterol level in the dataset? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Cholesterol'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the standard deviation of maximum heart rate among the patients? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['MaxHR'].std()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common chest pain type among patients? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['ChestPainType'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the least common resting electrocardiographic result? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['RestingECG'].value_counts().idxmin()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common ST slope among patients with heart disease? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['HeartDisease'] == 1]['ST_Slope'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 most common chest pain types? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['ChestPainType'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 4 resting electrocardiographic results are least common? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['RestingECG'].value_counts().nsmallest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 most common ST slopes among patients with heart disease? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['HeartDisease'] == 1]['ST_Slope'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the ages of the 5 oldest patients in the dataset? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(5, 'Age')['Age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 highest resting blood pressures? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['RestingBP'].nlargest(4).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 6 lowest cholesterol levels in the dataset? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Cholesterol'].nsmallest(6).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 highest maximum heart rates among the patients? \\n Dataset Columns: Age; uint8, Sex; category, ChestPainType; category, RestingBP; uint8, Cholesterol; uint16, FastingBS; uint8, RestingECG; category, MaxHR; uint8, ExerciseAngina; category, Oldpeak; float64, ST_Slope; category, HeartDisease; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['MaxHR'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a roller coaster in the dataset that operates at a speed more than 100 mph? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['speed_mph'] > 100).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all roller coasters in the dataset designed by 'Werner Stengel' removed? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"(df[df['Designer'] == 'Werner Stengel']['Status'] == 'Removed').all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does every roller coaster have a G-force value? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Gforce_clean'].notna().all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum speed (in mph) for roller coasters in the dataset? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df['speed_mph'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many roller coasters were introduced in the year 2000? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['year_introduced'] == 2000].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average G-force across all roller coasters in the dataset? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Gforce_clean'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the total number of roller coasters designed by 'Edwin Madeupname' in the dataset? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Designer'] == 'Edwin Madeupname'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which manufacturer has built the fastest roller coaster? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['speed_mph'].idxmax(), 'Manufacturer']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the status of the roller coaster with the highest G-force? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Gforce_clean'].idxmax(), 'Status']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the location of the roller coaster with the highest number of inversions? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Inversions_clean'].idxmax(), 'Location']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 speeds (in mph) of roller coasters in the dataset? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df['speed_mph'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the G-force values of the 2 roller coasters with the highest G-force. \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(2, 'Gforce_clean')['Gforce_clean'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the heights (in ft) of the top 4 tallest roller coasters? \\n Dataset Columns: coaster_name; category, Length; category, Speed; object, Location; category, Status; category, Opening date; category, Type; category, Manufacturer; category, Height restriction; category, Model; category, Height; category, Inversions; float64, Lift/launch system; category, Cost; category, Trains; object, Park section; category, Duration; category, Capacity; object, G-force; category, Designer; category, Max vertical angle; category, Drop; category, Soft opening date; category, Fast Lane available; category, Replaced; category, Track layout; category, Fastrack available; category, Soft opening date.1; category, Closing date; category, Opened; category, Replaced by; category, Website; category, Flash Pass Available; category, Must transfer from wheelchair; category, Theme; category, Single rider line available; category, Restraint Style; category, Flash Pass available; category, Acceleration; object, Restraints; category, Name; category, year_introduced; uint16, latitude; float64, longitude; float64, Type_Main; category, opening_date_clean; datetime64[us, UTC], speed1; category, speed2; category, speed1_value; float64, speed1_unit; category, speed_mph; float64, height_value; float64, height_unit; category, height_ft; float64, Inversions_clean; uint8, Gforce_clean; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(4, 'height_ft')['height_ft'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a rental property with exactly 5 bedrooms? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['bedrooms'] == 5).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any rental properties that can accommodate more than 10 guests? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['accommodates'] > 10).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a rental property that has received a perfect review score? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df['review_scores_rating'].eq(10).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many rental properties are there in the dataset? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"len(df)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum number of bedrooms in a property? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df['bedrooms'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest price per night for a rental property? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df['price'].str.replace('$', '').str.replace(',', '').astype(float).max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum number of reviews a property has received? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df['number_of_reviews'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the host response time for the property with the highest number of bedrooms? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['bedrooms'] == df['bedrooms'].max(), 'host_response_time'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the property type of the listing with the most reviews? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['number_of_reviews'].idxmax(), 'property_type']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 least common scraping sources? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df['source'].value_counts().nsmallest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 prices of the most expensive properties? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df['price'].str.replace('$', '').str.replace(',', '').astype(float).nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 prices of the least expensive properties? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df['price'].str.replace('$', '').str.replace(',', '').astype(float).nsmallest(2).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 numbers of reviews received by the 2 most reviewed properties? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(2, 'number_of_reviews')['number_of_reviews'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 numbers of guests accommodated by the properties that can accommodate the most guests? \\n Dataset Columns: id; int64, listing_url; category, scrape_id; int64, last_scraped; datetime64[us, UTC], source; category, name; object, description; object, neighborhood_overview; object, picture_url; category, host_id; uint32, host_url; category, host_name; category, host_since; datetime64[us, UTC], host_location; category, host_about; object, host_response_time; category, host_response_rate; category, host_acceptance_rate; category, host_is_superhost; category, host_thumbnail_url; category, host_picture_url; category, host_neighbourhood; category, host_listings_count; float64, host_total_listings_count; float64, host_verifications; object, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, neighbourhood_cleansed; category, neighbourhood_group_cleansed; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bathrooms; category, bathrooms_text; category, bedrooms; float64, beds; float64, amenities; object, price; category, minimum_nights; uint16, maximum_nights; uint32, minimum_minimum_nights; float64, maximum_minimum_nights; float64, minimum_maximum_nights; float64, maximum_maximum_nights; float64, minimum_nights_avg_ntm; float64, maximum_nights_avg_ntm; float64, calendar_updated; category, has_availability; category, availability_30; uint8, availability_60; uint8, availability_90; uint8, availability_365; uint16, calendar_last_scraped; datetime64[us, UTC], number_of_reviews; uint16, number_of_reviews_ltm; uint16, number_of_reviews_l30d; uint8, first_review; datetime64[us, UTC], last_review; datetime64[us, UTC], review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, license; category, instant_bookable; category, calculated_host_listings_count; uint8, calculated_host_listings_count_entire_homes; uint8, calculated_host_listings_count_private_rooms; uint8, calculated_host_listings_count_shared_rooms; uint8, reviews_per_month; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(5, 'accommodates')['accommodates'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a food item with 'Fruits' as its group? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"(df['GROUP'] == 'Fruits').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there food items with 'Nuts' as their sub group? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['SUB GROUP'].str.contains('Nuts').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a food item with scientific name 'Tilia argentea'? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['SCIENTIFIC NAME'].eq('Tilia argentea').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is 'Angelica' listed as a food name in the dataset? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['FOOD NAME'].str.contains('Angelica').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many food items are there in the dataset? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"len(df)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique food groups are there in the dataset? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['GROUP'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique sub groups are there in the dataset? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['SUB GROUP'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique food items are there in the dataset? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['FOOD NAME'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the group of the food named 'Kiwi'? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['FOOD NAME'] == 'Kiwi', 'GROUP'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the sub group of the food with scientific name 'Tilia argentea'? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['SCIENTIFIC NAME'] == 'Tilia argentea', 'SUB GROUP'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the scientific name of the food named 'Colorado pinyon'? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['FOOD NAME'] == 'Colorado pinyon', 'SCIENTIFIC NAME'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the food name of the item with scientific name 'Tilia argentea'? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['SCIENTIFIC NAME'] == 'Tilia argentea', 'FOOD NAME'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 most common food groups? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['GROUP'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 most common groups? If there are two that have the same number of appearances give preference alphabetically. \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['GROUP'].value_counts().sort_index().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 least common food groups? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['GROUP'].value_counts().nsmallest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 most common sub groups? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['SUB GROUP'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the lengths of the top 5 most common sub group names? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['SUB GROUP'].value_counts().head(5).index.map(len).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the number of appearances of the 2 least common groups? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['GROUP'].value_counts().nsmallest(2).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the number of appearances of the 3 most common groups? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['GROUP'].value_counts().nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the three most common group name lengths? \\n Dataset Columns: FOOD NAME; category, SCIENTIFIC NAME; category, GROUP; category, SUB GROUP; category\"}, {\"from\": \"gpt\", \"value\": \"df['GROUP'].str.len().value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a customer with 'Large Business' as their occupation? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Occupation'].eq('Large Business').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there customers with 'King' as their pitched product? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['ProductPitched'].eq('King').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a customer with designation 'VP'? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['Designation'] == 'VP').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is 'Unmarried' listed as a marital status in the dataset? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"'Unmarried' in df['MaritalStatus'].unique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many customers are there in the dataset? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"len(df)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique occupations are there in the dataset? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Occupation'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique designations are there in the dataset? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Designation'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique marital statuses are there in the dataset? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['MaritalStatus'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the occupation of the customer with ID 200000? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['CustomerID'] == 200000, 'Occupation'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the product pitched to the customer with ID 200001? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['CustomerID'] == 200001, 'ProductPitched'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the designation of the customer with ID 200002? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['CustomerID'] == 200002, 'Designation'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the marital status of the customer with ID 200003? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['CustomerID'] == 200003, 'MaritalStatus'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 most common occupations? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Occupation'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 most common pitched products? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['ProductPitched'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 least common occupations? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Occupation'].value_counts().nsmallest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 least common pitched products? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['ProductPitched'].value_counts().nsmallest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the ages of the 3 oldest customers? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'Age')['Age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the ages of the 4 youngest customers? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(4, 'Age')['Age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 highest monthly incomes of the customers? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['MonthlyIncome'].nlargest(2).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 most common duration of pitch? \\n Dataset Columns: CustomerID; uint32, ProdTaken; uint8, Age; float64, TypeofContact; category, CityTier; uint8, DurationOfPitch; float64, Occupation; category, Gender; category, NumberOfPersonVisiting; uint8, NumberOfFollowups; float64, ProductPitched; category, PreferredPropertyStar; float64, MaritalStatus; category, NumberOfTrips; float64, Passport; uint8, PitchSatisfactionScore; uint8, OwnCar; uint8, NumberOfChildrenVisiting; float64, Designation; category, MonthlyIncome; float64\"}, {\"from\": \"gpt\", \"value\": \"df['DurationOfPitch'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any entry posted on a weekend? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['weekday_name'].isin(['Saturday', 'Sunday'])).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there titles with more than 100 characters? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['title'].str.len() > 100).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do any entries have a negative sentiment according to the Cardiff NLP model? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['title_gx_cardiff_nlp_sentiment'] == 'negative').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the term 'linux' mentioned in the \\\"Clusters II\\\" column? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Clusters II'].str.contains('linux', case=False, na=False).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many entries were posted in the morning? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['partofday'] == 'morning'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the highest score received by an entry? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['score'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: On average, how many descendants does an entry have? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['descendants'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many entries are in the Autumn season? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['season'] == 'Autumn'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which day of the week has the most entries? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['weekday_name'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the predominant language used in titles? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['title_gx_lang'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: In which season was the entry with the highest score posted? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['score'].idxmax(), 'season']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: On which part of the day are most entries posted? \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['partofday'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 4 most frequent terms in the \\\"Clusters II\\\" column. \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Clusters II'].value_counts().head(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the 2 month names which appear less in the dataset. \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['month_name'].value_counts().nsmallest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Identify the top 3 weekdays based on entry frequency. \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['weekday_name'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Provide the bottom 4 seasons in terms of entry count. \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['season'].value_counts().nsmallest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 3 scores in the dataset. \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df['score'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the bottom 5 title text lengths. \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(5, 'title_gx_text_length')['title_gx_text_length'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Identify the top 4 numbers of descendants. \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(4, 'descendants')['descendants'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Provide the bottom 6 scores in the dataset. \\n Dataset Columns: clusters_3; object, test; object, gx_cluster; category, Clusters II; category, timestamp; datetime64[us, UTC], title_gx_ngrams; object, title; object, hour; uint8, weekday_name; category, month_name; category, title_gx_cardiff_nlp_sentiment; category, title_gx_hashtags; object, url; category, by; category, score; uint16, descendants; float64, partofday; category, season; category, title_gx_lang; category, title_gx_text_length; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(6, 'score')['score'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any employees with more than 7 projects? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"(df['Number of Projects'] > 7).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Has any employee worked for more than 300 hours on average per month? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"(df['Average Monthly Hours'] > 300).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all satisfaction levels above 0.5? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"(df['Satisfaction Level'] > 0.5).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique departments are there? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['Department'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the maximum number of years an employee has been in the company? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['Years in the Company'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many employees have been promoted in the last 5 years? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['Promoted in the last 5 years?'].value_counts().get('Yes', 0)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: On average, how many hours do employees work monthly? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['Average Monthly Hours'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which department has the highest number of employees? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['Department'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common salary level among employees? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['salary'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which salary level has the least number of employees who had an accident at work? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df[df['Work Accident'] == 'Yes'].groupby('salary').size().idxmin()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the top 4 departments with the most employees. \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['Department'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Identify the 3 departments with the lowest average satisfaction levels. \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('Department')['Satisfaction Level'].mean().nsmallest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 departments with the lowest average monthly hours worked? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('Department')['Average Monthly Hours'].mean().nsmallest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the highest 3 satisfaction levels among employees who left? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df[df['Left'] == 'Yes'].nlargest(3, 'Satisfaction Level')['Satisfaction Level'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Whhat are the top 6 last evaluation scores? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[us, UTC]\"}, {\"from\": \"gpt\", \"value\": \"df['Last Evaluation'].nlargest(6).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Have there been any incidents where the cause was related to the undercarriage of the aircraft? \\n Dataset Columns: Incident_Date; category, Aircaft_Model; category, Aircaft_Registration; category, Aircaft_Operator; category, Aircaft_Nature; category, Incident_Category; category, Incident_Cause(es); category, Incident_Location; category, Aircaft_Damage_Type; category, Date; datetime64[us, UTC], Time; category, Arit; category, Aircaft_Engines; category, Onboard_Crew; category, Onboard_Passengers; category, Onboard_Total; category, Fatalities; uint16, Aircaft_First_Flight; category, Aircraft_Phase; category, Departure_Airport; category, Destination_Airport; category, Ground_Casualties; category, Collision_Casualties; category\"}, {\"from\": \"gpt\", \"value\": \"df['Incident_Cause(es)'].str.contains('undercarriage', case=False, na=False).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there incidents where the aircraft was involved in a collision? \\n Dataset Columns: Incident_Date; category, Aircaft_Model; category, Aircaft_Registration; category, Aircaft_Operator; category, Aircaft_Nature; category, Incident_Category; category, Incident_Cause(es); category, Incident_Location; category, Aircaft_Damage_Type; category, Date; datetime64[us, UTC], Time; category, Arit; category, Aircaft_Engines; category, Onboard_Crew; category, Onboard_Passengers; category, Onboard_Total; category, Fatalities; uint16, Aircaft_First_Flight; category, Aircraft_Phase; category, Departure_Airport; category, Destination_Airport; category, Ground_Casualties; category, Collision_Casualties; category\"}, {\"from\": \"gpt\", \"value\": \"(df['Incident_Category'].str.contains('collision', case=False, na=False) | df['Incident_Cause(es)'].str.contains('collision', case=False, na=False)).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique aircraft models are in the dataset? \\n Dataset Columns: Incident_Date; category, Aircaft_Model; category, Aircaft_Registration; category, Aircaft_Operator; category, Aircaft_Nature; category, Incident_Category; category, Incident_Cause(es); category, Incident_Location; category, Aircaft_Damage_Type; category, Date; datetime64[us, UTC], Time; category, Arit; category, Aircaft_Engines; category, Onboard_Crew; category, Onboard_Passengers; category, Onboard_Total; category, Fatalities; uint16, Aircaft_First_Flight; category, Aircraft_Phase; category, Departure_Airport; category, Destination_Airport; category, Ground_Casualties; category, Collision_Casualties; category\"}, {\"from\": \"gpt\", \"value\": \"df['Aircaft_Model'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which aircraft model was involved in the most incidents? \\n Dataset Columns: Incident_Date; category, Aircaft_Model; category, Aircaft_Registration; category, Aircaft_Operator; category, Aircaft_Nature; category, Incident_Category; category, Incident_Cause(es); category, Incident_Location; category, Aircaft_Damage_Type; category, Date; datetime64[us, UTC], Time; category, Arit; category, Aircaft_Engines; category, Onboard_Crew; category, Onboard_Passengers; category, Onboard_Total; category, Fatalities; uint16, Aircaft_First_Flight; category, Aircraft_Phase; category, Departure_Airport; category, Destination_Airport; category, Ground_Casualties; category, Collision_Casualties; category\"}, {\"from\": \"gpt\", \"value\": \"df['Aircaft_Model'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common phase of aircraft during incidents? \\n Dataset Columns: Incident_Date; category, Aircaft_Model; category, Aircaft_Registration; category, Aircaft_Operator; category, Aircaft_Nature; category, Incident_Category; category, Incident_Cause(es); category, Incident_Location; category, Aircaft_Damage_Type; category, Date; datetime64[us, UTC], Time; category, Arit; category, Aircaft_Engines; category, Onboard_Crew; category, Onboard_Passengers; category, Onboard_Total; category, Fatalities; uint16, Aircaft_First_Flight; category, Aircraft_Phase; category, Departure_Airport; category, Destination_Airport; category, Ground_Casualties; category, Collision_Casualties; category\"}, {\"from\": \"gpt\", \"value\": \"df['Aircraft_Phase'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 most common causes of incidents? \\n Dataset Columns: Incident_Date; category, Aircaft_Model; category, Aircaft_Registration; category, Aircaft_Operator; category, Aircaft_Nature; category, Incident_Category; category, Incident_Cause(es); category, Incident_Location; category, Aircaft_Damage_Type; category, Date; datetime64[us, UTC], Time; category, Arit; category, Aircaft_Engines; category, Onboard_Crew; category, Onboard_Passengers; category, Onboard_Total; category, Fatalities; uint16, Aircaft_First_Flight; category, Aircraft_Phase; category, Departure_Airport; category, Destination_Airport; category, Ground_Casualties; category, Collision_Casualties; category\"}, {\"from\": \"gpt\", \"value\": \"df['Incident_Cause(es)'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the 2 most frequently occurring aircraft operators in the dataset. \\n Dataset Columns: Incident_Date; category, Aircaft_Model; category, Aircaft_Registration; category, Aircaft_Operator; category, Aircaft_Nature; category, Incident_Category; category, Incident_Cause(es); category, Incident_Location; category, Aircaft_Damage_Type; category, Date; datetime64[us, UTC], Time; category, Arit; category, Aircaft_Engines; category, Onboard_Crew; category, Onboard_Passengers; category, Onboard_Total; category, Fatalities; uint16, Aircaft_First_Flight; category, Aircraft_Phase; category, Departure_Airport; category, Destination_Airport; category, Ground_Casualties; category, Collision_Casualties; category\"}, {\"from\": \"gpt\", \"value\": \"df['Aircaft_Operator'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 most common types of aircraft damage? \\n Dataset Columns: Incident_Date; category, Aircaft_Model; category, Aircaft_Registration; category, Aircaft_Operator; category, Aircaft_Nature; category, Incident_Category; category, Incident_Cause(es); category, Incident_Location; category, Aircaft_Damage_Type; category, Date; datetime64[us, UTC], Time; category, Arit; category, Aircaft_Engines; category, Onboard_Crew; category, Onboard_Passengers; category, Onboard_Total; category, Fatalities; uint16, Aircaft_First_Flight; category, Aircraft_Phase; category, Departure_Airport; category, Destination_Airport; category, Ground_Casualties; category, Collision_Casualties; category\"}, {\"from\": \"gpt\", \"value\": \"df['Aircaft_Damage_Type'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any properties with a price over 1,000,000? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['Precio'] > 1000000).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there properties with zero bathrooms? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['Ba\\u00f1os'] == 0).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Has any property been listed for more than 100 days? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['Duraci\\u00f3n'] > 100).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the highest price in the dataset? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Precio'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the total number of properties listed? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"len(df)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the longest duration a property has been listed? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Duraci\\u00f3n'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the largest surface listed? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Superficie'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common type of property listed? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Tipo'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which advertiser has listed the most properties? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Anunciante'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which property has the highest price? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Precio'].idxmax(), 'Referencia']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which property has the largest surface area? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Superficie'].idxmax(), 'Referencia']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the five types of properties more frequently listed? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Tipo'].value_counts().head(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 types of properties which are listed more frequently? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Tipo'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 most common localities for properties listed? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Localidad'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 most common districts for properties listed? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Distrito'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 highest property prices listed? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(5, 'Precio')['Precio'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 3 longest durations properties have been listed. \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Duraci\\u00f3n'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Identify the 4 largest surfaces listed. \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(4, 'Superficie')['Superficie'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 6 highest numbers of bedrooms in properties listed? \\n Dataset Columns: Id; category, Referencia; category, Precio; uint32, Tipo; category, Anunciante; category, Actualizaci\\u00f3n; datetime64[us, UTC], Duraci\\u00f3n; uint16, Superficie; uint16, Superficie \\u00fatil; uint16, Superficie solar; uint32, Habitaciones; uint8, Ba\\u00f1os; uint8, Planta; int8, Antig\\u00fcedad; uint8, Clasificaci\\u00f3n; uint8, Calle; category, Barrio; category, Distrito; category, Localidad; category, C\\u00f3digo postal; float64, Latitud; float64, Longitud; float64, Nuevo; uint8, Reformado; uint8, Conservado; uint8, Exterior; uint8, Orientaci\\u00f3n sur; uint8, Soleado; uint8, Amueblado; uint8, Negociar muebles; uint8, Cocina equipada; uint8, Cocina independiente; uint8, Armarios empotrados; uint8, Garaje; uint8, Terraza; uint8, Ascensor; uint8, Aire acondicionado; uint8, Trastero; uint8, Puerta blindada; uint8, Piscina; uint8, Jard\\u00edn; uint8, Comedor; uint8, Balc\\u00f3n; uint8, Lavadero; uint8, Chimenea; uint8, Portero autom\\u00e1tico; uint8, Sistema de seguridad; uint8, Calefacci\\u00f3n central; uint8, Calefacci\\u00f3n el\\u00e9ctrica; uint8, Gas natural; uint8, Gasoil; uint8, Aluminio; uint8, PVC; uint8, Climalit; uint8, Madera; uint8, Parquet; uint8, Gres; uint8, Tarima; uint8, M\\u00e1rmol; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Habitaciones'].nlargest(6).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there more than 2000 customers with a monthly charge higher than $80? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"(df['MonthlyCharges'] > 80).sum() > 2000\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any customers with no internet service? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"(df['InternetService'] == 'No').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique customers are there in the dataset? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['customerID'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the highest monthly charge? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['MonthlyCharges'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the total number of customers? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"len(df)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the longest tenure? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['tenure'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common payment method? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['PaymentMethod'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common contract type? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['Contract'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which customer has the highest total charge? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['TotalCharges'].idxmax(), 'customerID']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which customer has the highest monthly charge? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['MonthlyCharges'].idxmax(), 'customerID']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 most common internet services? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['InternetService'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Name the 4 most common payment methods. \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['PaymentMethod'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 most common types of contract? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['Contract'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 most common services for which customers have multiple lines? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['MultipleLines'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 highest total charges? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['TotalCharges'].nlargest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 highest monthly charges? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(4, 'MonthlyCharges')['MonthlyCharges'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 6 longest tenures? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['tenure'].nlargest(6).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 shortest tenures? \\n Dataset Columns: customerID; category, gender; category, SeniorCitizen; uint8, Partner; category, Dependents; category, tenure; uint8, PhoneService; category, MultipleLines; category, InternetService; category, OnlineSecurity; category, OnlineBackup; category, DeviceProtection; category, TechSupport; category, StreamingTV; category, StreamingMovies; category, Contract; category, PaperlessBilling; category, PaymentMethod; category, MonthlyCharges; float64, TotalCharges; float64, Churn; category\"}, {\"from\": \"gpt\", \"value\": \"df['tenure'].nsmallest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a listing with a review score rating of 100? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"(df['review_scores_rating'] == 100).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any hosts who have listed more than 10 properties? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"(df['host_total_listings_count'] > 10).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a listing that requires a minimum of 365 nights? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"(df['minimum_nights'] >= 365).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique hosts are there in the dataset? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['host_id'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest number of listings a single host has? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['host_total_listings_count'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique locations are listed by the hosts? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['host_location'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average review score rating across all listings? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['review_scores_rating'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common host location? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['host_location'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the name of the listing with the most bedrooms? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['bedrooms'] == df['bedrooms'].max(), 'name'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which location has the highest number of listings? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['host_location'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common property type? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['property_type'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 6 unique host locations with the most listings? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['host_location'].value_counts().nlargest(6).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 unique host locations with the most listings? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['host_location'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 most common types of properties?. \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['property_type'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 highest review score ratings? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['review_scores_rating'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 lowest number of minimum nights required? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df['minimum_nights'].nsmallest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 6 lowest review scores given because of locations? \\n Dataset Columns: listing_id; uint32, name; object, host_id; uint32, host_since; datetime64[us, UTC], host_location; category, host_response_time; category, host_response_rate; float64, host_acceptance_rate; float64, host_is_superhost; category, host_total_listings_count; float64, host_has_profile_pic; category, host_identity_verified; category, neighbourhood; category, district; category, city; category, latitude; float64, longitude; float64, property_type; category, room_type; category, accommodates; uint8, bedrooms; float64, amenities; object, price; uint16, minimum_nights; uint16, maximum_nights; uint32, review_scores_rating; float64, review_scores_accuracy; float64, review_scores_cleanliness; float64, review_scores_checkin; float64, review_scores_communication; float64, review_scores_location; float64, review_scores_value; float64, instant_bookable; category\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(6, 'review_scores_location')['review_scores_location'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many days had a maximum temperature above 30 degrees? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df[df['tmax'] > 30].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique days had solar radiation measurements? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df[df['sol'].notnull()]['fecha'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the highest wind speed ever recorded? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['racha'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: On which weekday did the highest temperature ever occur? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['tmax'].idxmax(), 'weekday_name']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: In which season do we find the highest average solar radiation? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('season')['sol'].mean().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which month had the lowest average wind speed? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('month_name')['velmedia'].mean().idxmin()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 months with the highest average maximum temperatures? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('month_name')['tmax'].mean().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the 5 weekdays with the most rain, ranked from highest to lowest? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('weekday_name')['prec'].sum().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 4 seasons ranked by average solar radiation, from highest to lowest. \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('season')['sol'].mean().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 2 months recorded the lowest average minimum temperatures? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('month_name')['tmin'].mean().nsmallest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 5 recorded maximum temperatures. \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df['tmax'].nlargest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 lowest wind speeds ever recorded? \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(4, 'velmedia')['velmedia'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Rank the highest 3 solar radiation measurements. \\n Dataset Columns: fecha; datetime64[us, UTC], season; category, month_name; category, tmin; float64, tmax; float64, sol; float64, presMax; float64, presMin; float64, prec; float64, velmedia; float64, racha; float64, dir; float64, tmed; float64, horatmax; datetime64[us, UTC], horatmin; datetime64[us, UTC], horaPresMax; float64, horaPresMin; float64, horaracha; datetime64[us, UTC], weekday_name; category, dayofyear; uint16, quarter; uint8, year; uint16, altitud; uint16, nombre; category, provincia; category, indicativo; uint16\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'sol')['sol'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there records where the RETRINOIN_xRZI exceeds 10,000? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['RETRINOIN_xRZI'] > 10000).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do we have respondents who fall under both PRIVADO control and NACIONAL market? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['CONTROL'] == 'PRIVADO') & (df['MERCADO'] == 'NACIONAL')].any().any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there records with RETRINOIN_WwQk less than 5,000? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['RETRINOIN_WwQk'] < 5000).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the highest value for RETRINOIN_ac1q in the dataset? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['RETRINOIN_ac1q'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique clusters are present in the 'umap_cluster' column? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['umap_cluster'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 'ANOS2' category has the most number of respondents? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['ANOS2'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: In which 'NUTS1' region do we find the highest average RETRINOIN? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('NUTS1')['RETRINOIN'].mean().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 'MERCADO' category is the least common in the dataset? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['MERCADO'].value_counts().idxmin()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 'umap_cluster' is the most dominant in the dataset? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['umap_cluster'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the 2 least common age categories in the dataset? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['ANOS2'].value_counts().nsmallest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the 3 least common 'ANOS2' categories in the dataset? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['ANOS2'].value_counts().nsmallest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 5 'NUTS1' regions by frequency. \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['NUTS1'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 5 recorded RETRINOIN values. \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['RETRINOIN'].nlargest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 lowest x values in the dataset? \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(4, 'x')['x'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Rank the highest 3 y values in the dataset. \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'y')['y'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the largest 2 y values in the dataset?. \\n Dataset Columns: clusters_2; category, RETRINOIN_xRZI; float64, CNO1; category, CNACE; category, ESTU; category, SEXO; category, ANOS2; category, NUTS1; category, ESTRATO2; category, CONTROL; category, MERCADO; category, REGULACION; category, TIPOPAIS; category, RESPONSA; category, ANOANTI; uint8, TIPOJOR; category, TIPOCON; category, RETRINOIN; float64, RETRINOIN_WwQk; float64, Quantiles_target; category, _gx_link_targets_; object, _gx_link_weights_; object, umap_cluster; category, x; float64, y; float64, RETRINOIN_ac1q; float64, RETRINOIN_QSbS; float64, RETRINOIN_stfU; float64, RETRINOIN_RxV1; float64\"}, {\"from\": \"gpt\", \"value\": \"df['y'].nlargest(2).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the most visited URL related to 'no code data science'? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"(df.loc[df['Ranking'].idxmin(), 'Keyword'] == 'no code data science')\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does any URL have a competition level of 'Low'? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"df['Competition'].eq('Low').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any URLs with an average monthly searches above 1000? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"(df['Avg. monthly searches'] > 1000).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the URL with the lowest ranking also the one with the highest monthly searches? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"(df.loc[df['Ranking'] == df['Ranking'].min(), 'URLs'].iloc[0] == df.loc[df['Avg. monthly searches'] == df['Avg. monthly searches'].max(), 'URLs'].iloc[0])\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique URLs are in the dataset? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"df['URLs'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the minimum average monthly searches in the dataset? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"df['Avg. monthly searches'].min()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique keywords are present in the dataset? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"df['Keyword'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the competition level of the highest-ranked URL? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Ranking'] == df['Ranking'].min(), 'Competition'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What keyword has the highest average monthly searches? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Avg. monthly searches'].idxmax(), 'Keyword']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the competition level for the URL with the highest ranking? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Ranking'] == df['Ranking'].max(), 'Competition'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What keyword is associated with the URL with the lowest ranking? \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Ranking'] == df['Ranking'].min(), 'Keyword'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Specify the bottom 2 average monthly searches for URLs with the highest rankings. \\n Dataset Columns: URLs; category, Ranking; uint8, Keyword; category, Avg. monthly searches; uint8, Competition; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['Ranking'] == df['Ranking'].max()].nsmallest(2, 'Avg. monthly searches')['Avg. monthly searches'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any wine with a quality rating of 10? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['quality'] == 10).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any wines with residual sugar above 15g/dm^3? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['residual sugar'] > 15).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the highest alcohol content wine also the one with the highest quality rating? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['alcohol'].idxmax() == df['quality'].idxmax())\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does any wine have a pH level below 2.5? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['pH'] < 2.5).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique quality ratings are there in the dataset? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['quality'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum fixed acidity level found in the dataset? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['fixed acidity'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the minimum volatile acidity level in the dataset? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['volatile acidity'].min()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many wines have free sulfur dioxide above 50 mg/dm^3? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['free sulfur dioxide'] > 50].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the quality rating of the wine with the highest alcohol content? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['alcohol'].idxmax(), 'quality']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the quality rating of the wine with the highest fixed acidity? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['fixed acidity'].idxmax(), 'quality']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the quality rating of the wine with the lowest volatile acidity? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['volatile acidity'].idxmin(), 'quality']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the quality rating of the wine with the highest pH level? \\n Dataset Columns: fixed acidity; float64, volatile acidity; float64, citric acid; float64, residual sugar; float64, chlorides; float64, free sulfur dioxide; float64, total sulfur dioxide; float64, density; float64, pH; float64, sulphates; float64, alcohol; float64, quality; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['pH'].idxmax(), 'quality']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any purchase with a total cost above 1000? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['Total'] > 1000).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any customers who made a purchase using cash? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['Payment'] == 'Cash').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the customer with the highest total purchase cost a 'Member'? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Total'].idxmax(), 'Customer type'] == 'Member'\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique branches are there in the dataset? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Branch'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum quantity of products bought in a single purchase? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Quantity'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the minimum total cost of a purchase in the dataset? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Total'].min()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many purchases were made in Yangon city? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['City'] == 'Yangon'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the payment method used for the purchase with the highest total cost? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Total'].idxmax(), 'Payment']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the product line of the purchase with the highest total cost? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Total'].idxmax(), 'Product line']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the customer type of the purchase with the lowest total cost? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Total'].idxmin(), 'Customer type']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the gender of the customer with the highest total purchase cost? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Total'].idxmax(), 'Gender']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the payment methods of the top 3 purchases with the highest total cost. \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'Total')['Payment'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Enumerate the product lines of the bottom 2 purchases with the lowest total cost. \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(2, 'Total')['Product line'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the customer types of the top 5 purchases with the highest total cost? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(5, 'Total')['Customer type'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the genders of the bottom 4 purchases with the lowest total cost. \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(4, 'Total')['Gender'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the quantities of products bought in the top 4 purchases with the highest total cost? \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(4, 'Total')['Quantity'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the unit prices of the bottom 3 purchases with the lowest total cost. \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(3, 'Total')['Unit price'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Enumerate the ratings of the top 5 purchases with the highest total cost. \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(5, 'Total')['Rating'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Provide the gross incomes of the bottom 2 purchases with the lowest total cost. \\n Dataset Columns: Invoice ID; category, Branch; category, City; category, Customer type; category, Gender; category, Product line; category, Unit price; float64, Quantity; uint8, Tax 5%; float64, Total; float64, Date; datetime64[us, UTC], Time; category, Payment; category, cogs; float64, gross margin percentage; float64, gross income; float64, Rating; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(2, 'Total')['gross income'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does the person with the highest glucose level also have diabetes? \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Glucose'].idxmax(), 'Outcome'] == 1\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum number of pregnancies recorded in the dataset? \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Pregnancies'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the minimum blood pressure level recorded in the dataset? \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['BloodPressure'].min()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average BMI recorded in the dataset? \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['BMI'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the diabetes outcome for the person with the highest BMI? \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['BMI'].idxmax(), 'Outcome']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the diabetes outcome for the person with the lowest blood pressure? \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['BloodPressure'].idxmin(), 'Outcome']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the diabetes outcome for the person with the highest insulin level? \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Insulin'].idxmax(), 'Outcome']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the diabetes outcome for the person with the lowest glucose level? \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Glucose'].idxmin(), 'Outcome']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the diabetes outcomes of the top 3 individuals with the highest number of pregnancies. \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'Pregnancies')['Outcome'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Provide the glucose levels of the 2 individuals with the highest insulin levels. \\n Dataset Columns: Pregnancies; uint8, Glucose; uint8, BloodPressure; uint8, SkinThickness; uint8, Insulin; uint16, BMI; float64, DiabetesPedigreeFunction; float64, Age; uint8, Outcome; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(2, 'Insulin')['Glucose'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does the article with the longest headline contain the keyword 'United States Politics and Government'? \\n Dataset Columns: headline; object, date; datetime64[us, UTC], material_type; category, web_url; category, keywords; object\"}, {\"from\": \"gpt\", \"value\": \"'United States Politics and Government' in df.loc[df['headline'].str.len().idxmax(), 'keywords']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any article published on '2021-01-05'? \\n Dataset Columns: headline; object, date; datetime64[us, UTC], material_type; category, web_url; category, keywords; object\"}, {\"from\": \"gpt\", \"value\": \"(df['date'] == '2021-01-05').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the material type of the article with the shortest headline? \\n Dataset Columns: headline; object, date; datetime64[us, UTC], material_type; category, web_url; category, keywords; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['headline'].str.len().idxmin(), 'material_type']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the material type of the article with the most number of keywords? \\n Dataset Columns: headline; object, date; datetime64[us, UTC], material_type; category, web_url; category, keywords; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['keywords'].apply(len).idxmax(), 'material_type']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the material types of the bottom 2 articles with the shortest headlines. \\n Dataset Columns: headline; object, date; datetime64[us, UTC], material_type; category, web_url; category, keywords; object\"}, {\"from\": \"gpt\", \"value\": \"df.assign(headline_length=df['headline'].str.len()).nsmallest(2, 'headline_length')['material_type'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the material types of the top 5 articles with the most number of keywords. \\n Dataset Columns: headline; object, date; datetime64[us, UTC], material_type; category, web_url; category, keywords; object\"}, {\"from\": \"gpt\", \"value\": \"df.assign(keyword_count=df['keywords'].apply(lambda x: len(x))).nlargest(5, 'keyword_count')['material_type'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the number of keywords in the bottom 3 articles with the shortest headlines. \\n Dataset Columns: headline; object, date; datetime64[us, UTC], material_type; category, web_url; category, keywords; object\"}, {\"from\": \"gpt\", \"value\": \"df.assign(headline_length=df['headline'].str.len()).nsmallest(3, 'headline_length')['keywords'].apply(lambda x: len(x.split(',') if isinstance(x, str) else [])).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Provide the number of keywords in the bottom 2 articles with the least number of keywords. \\n Dataset Columns: headline; object, date; datetime64[us, UTC], material_type; category, web_url; category, keywords; object\"}, {\"from\": \"gpt\", \"value\": \"df['keywords'].apply(lambda x: len(x.split(','))).nsmallest(2).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the 'USA' the most common entry in the 'Geographies' column? \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"(df['Geographies'].mode()[0] == 'USA')\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any participants who are unemployed with a bachelor's degree from Africa? \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Labeled Clusters'] == 'Unemployed') & (df['Geographies'].str.contains('Africa'))].any().any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do all participants recommend Python as the first programming language? \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"(df['What programming language would you recommend an aspiring data scientist to learn first?'] == 'Python').all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique job titles are represented in the dataset? \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df['Select the title most similar to your current role (or most recent title if retired)'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the median of the average number of years participants have used machine learning methods? \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df['(Average) For how many years have you used machine learning methods?'].median()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common computing platform used for data science projects? \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df['What type of computing platform do you use most often for your data science projects?'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which country has the second highest number of participants? \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df['In which country do you currently reside?'].value_counts().nlargest(2).index[-1]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which title is the most common among participants? \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df['Select the title most similar to your current role (or most recent title if retired)'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: list the top 4 most common job titles. \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df['Select the title most similar to your current role (or most recent title if retired)'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Report the top 4 age ranges of participants by frequency \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df['What is your age (years)?'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Identify the 5 highest yearly compensations. \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df['(Average) What is your current yearly compensation (approximate $USD)?'].nlargest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Report the 5 most common sizes of the company where participants work. \\n Dataset Columns: Geographies; object, Labeled Clusters; category, General Segments; object, Select the title most similar to your current role (or most recent title if retired); category, In which country do you currently reside?; category, (Average) For how many years have you used machine learning methods?; float64, (Average) What is your current yearly compensation (approximate $USD)?_rx_K; float64, (Average) What is the size of the company where you are employed?; float64, (Average) For how many years have you been writing code and_or programming?; float64, Which of the following natural language processing (NLP) methods do you use on a regular basis?; object, Which of the following integrated development environments (IDE's) do you use on a regular basis?; object, What is your current yearly compensation (approximate $USD)?; category, Which of the following cloud computing platforms do you use on a regular basis?; object, Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?; object, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?; object, Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?; object, For how many years have you been writing code and_or programming?; category, What is the size of the company where you are employed?; category, (Average) Approximately how much money have you (or your team) spent on machine; float64, (Average) What is your current yearly compensation (approximate $USD)?; float64, Which types of specialized hardware do you use on a regular basis?; object, (Average) Approximately how many individuals are responsible for data science wo; float64, Which of the following business intelligence tools do you use on a regular basis?; object, Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?; object, (Average) Approximately how many times have you used a TPU (tensor processing unit)?; float64, Do you use any of the following data storage products on a regular basis?; object, Approximately how many individuals are responsible for data science workloads at your place of business?; category, Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?; category, On which platforms have you begun or completed data science courses?; object, Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Do you use any of the following managed machine learning products on a regular basis?; object, Who_what are your favorite media sources that report on data science topics?; object, In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?; object, Do you use any tools to help manage machine learning experiments?; object, Where do you publicly share your data analysis or machine learning applications?; object, Do you use any of the following cloud computing products on a regular basis?; object, In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?; object, What is your gender?; category, Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?; object, Which categories of computer vision methods do you use on a regular basis?; object, For how many years have you used machine learning methods?; category, Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?; object, (Average) What is your age (years)?; float64, Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?; category, Which of the following business intelligence tools do you use most often?; category, What is the primary tool that you use at work or school to analyze data?; category, Does your current employer incorporate machine learning methods into their business?; category, Approximately how many times have you used a TPU (tensor processing unit)?; category, Which of the following hosted notebook products do you use on a regular basis?; object, What is the highest level of formal education that you have attained or plan to attain within the next 2 years?; category, In what industry is your current employer_contract (or your most recent employer if retired)?; category, Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?; object, Time from Start to finish (seconds); uint32, ID; uint16, Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?; category, In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?; object, Select any activities that make up an important part of your role at work; object, What data visualization libraries or tools do you use on a regular basis?; object, Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?; object, What is your age (years)?; category, What programming language would you recommend an aspiring data scientist to learn first?; category, Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?; object, What programming languages do you use on a regular basis?; object, What type of computing platform do you use most often for your data science projects?; category\"}, {\"from\": \"gpt\", \"value\": \"df['What is the size of the company where you are employed?'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there more reviews with rating 5 from 'GB' than 'US'? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"(df[(df['country_code'] == 'GB') & (df['rating'] == 5)].shape[0] > df[(df['country_code'] == 'US') & (df['rating'] == 5)].shape[0])\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the average rating for 'Wise' in 'GB' above 4? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"(df[(df['Company'] == 'Wise') & (df['country_code'] == 'GB')]['rating'].mean() > 4)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do any reviews originate from 'AO'? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df['country_code'].eq('AO').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Did any reviews receive a rating of 1? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df['rating'].eq(1).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the total number of reviews for 'Wise'? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['Company'] == 'Wise'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique countries gave 'Wise' a rating of 5? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Company'] == 'Wise') & (df['rating'] == 5)]['country_code'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest rating received? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df['rating'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the average rating across all reviews? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df['rating'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which company received the most 5-star reviews? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['rating'] == 5]['Company'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: From which country did 'Wise' receive the most reviews? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['Company'] == 'Wise']['country_code'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 3 countries with the most 5-star reviews for 'Wise'? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Company'] == 'Wise') & (df['rating'] == 5)]['country_code'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the 2 companies represented in the dataset? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df['Company'].unique().tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 most common countries? If two or more have the same number order them alphabetically. \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df['country_code'].value_counts().sort_index().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 most common ratings? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df['rating'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 least common ratings? \\n Dataset Columns: published_date; datetime64[us, UTC], country_code; category, title; category, body; object, rating; uint8, Company; category\"}, {\"from\": \"gpt\", \"value\": \"df['rating'].value_counts().nsmallest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any customer with a PhD education level? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Education'].str.contains('PhD').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do we have any customers who are married? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Marital_Status'].eq('Married').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any customer with income higher than 100000? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['Income'] > 100000).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Has any customer made more than 10 web purchases? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['NumWebPurchases'] > 10).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many customers do we have in the dataset? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['ID'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the average income of our customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Income'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the maximum number of web purchases made by a customer? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['NumWebPurchases'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the minimum recency of purchase among the customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Recency'].min()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common education level among our customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Education'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common marital status among our customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Marital_Status'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Who is the customer with the highest income? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Income'].idxmax(), 'ID']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Who is the customer with the most recent purchase? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Recency'].idxmin(), 'ID']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Who are the 3 customers with the highest income? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'Income')['ID'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 2 most common education levels among our customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Education'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 most common marital statuses among our customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Marital_Status'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Who are the 3 customers with the most web purchases? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'NumWebPurchases')['ID'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 income values among our customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Income'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 recency values among our customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Recency'].nlargest(2).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the bottom 3 income values among our customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Income'].nsmallest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the bottom 2 recency values among our customers? \\n Dataset Columns: ID; uint16, Year_Birth; uint16, Education; category, Marital_Status; category, Income; float64, Kidhome; uint8, Teenhome; uint8, Dt_Customer; datetime64[us, UTC], Recency; uint8, MntWines; uint16, MntFruits; uint8, MntMeatProducts; uint16, MntFishProducts; uint16, MntSweetProducts; uint16, MntGoldProds; uint16, NumDealsPurchases; uint8, NumWebPurchases; uint8, NumCatalogPurchases; uint8, NumStorePurchases; uint8, NumWebVisitsMonth; uint8, AcceptedCmp3; uint8, AcceptedCmp4; uint8, AcceptedCmp5; uint8, AcceptedCmp1; uint8, AcceptedCmp2; uint8, Complain; uint8, Z_CostContact; uint8, Z_Revenue; uint8, Response; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(2, 'Recency')['Recency'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any customer with a high salary? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df['salary'].eq('high').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do we have any employees who suffered a work accident? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df['Work Accident'].eq('Yes').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any employee with more than 100 hours per month on average? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df['Average Monthly Hours'].gt(100).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does any employee have a satisfaction level above 0.9? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"(df['Satisfaction Level'] > 0.9).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many employees do we have in the dataset? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"len(df)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the median satisfaction level of our employees? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df['Satisfaction Level'].median()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the most common marital status among the employees? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df['Marital_Status'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 satisfaction levels? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df['Satisfaction Level'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 most common Work Accident statuses among our employees? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df['Work Accident'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 most common marital statuses among our employees? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df['Marital_Status'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the highest 3 years spent in the company?  \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df['Years in the Company'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 departments with more 'medium' salary levels? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['salary'] == 'medium']['Department'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the lowest 2 satisfaction levels among the employees who have not had a work accident? \\n Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['Work Accident'] == 'No']['Satisfaction Level'].nsmallest(2).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any country with a Ladder score above 7.5, a Generosity score above 0.2, and a Social support score above 0.7? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Ladder score'] > 7.5) & (df['Generosity'] > 0.2) & (df['Social support'] > 0.7)].any().any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any country with a Social support score below 0.5? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['Social support'] < 0.5).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the average Ladder score among the countries in Western Europe with a Generosity score above 0.2 and a Social support score above 0.7? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Regional indicator'] == 'Western Europe') & (df['Generosity'] > 0.2) & (df['Social support'] > 0.7)]['Ladder score'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the average Perceptions of corruption score among the countries in Sub-Saharan Africa with a Ladder score below 5 and a Social support score below 0.5? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Regional indicator'] == 'Sub-Saharan Africa') & (df['Ladder score'] < 5) & (df['Social support'] < 0.5)]['Perceptions of corruption'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the maximum Generosity score among the countries? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Generosity'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the minimum Social support score among the countries? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Social support'].min()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which region has the highest number of countries with a Ladder score above 7 and a Generosity score above 0.2? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Ladder score'] > 7) & (df['Generosity'] > 0.2)]['Regional indicator'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which region accounts for the most countries with a Generosity score above 0.2? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Generosity'] > 0.2]['Regional indicator'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: In which region are the majority of countries with a Perceptions of corruption score below 0.5 located? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Perceptions of corruption'] < 0.5]['Regional indicator'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: In which region can you find the majority of countries with a Social support score above 0.7? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Social support'] > 0.7]['Regional indicator'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Can you name the three regions that have the most countries with a Ladder score above 7 and a Generosity score above 0.2? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Ladder score'] > 7) & (df['Generosity'] > 0.2)]['Regional indicator'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 regions with the most countries with a Generosity score above 0.2? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Generosity'] > 0.2]['Regional indicator'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Identify the three highest Ladder scores from countries in Western Europe that have a Generosity score above 0.2 and a Social support score above 0.7. \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['Regional indicator'] == 'Western Europe') & (df['Generosity'] > 0.2) & (df['Social support'] > 0.7)].nlargest(3, 'Ladder score')['Ladder score'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 Perceptions of corruption scores among the countries in Sub-Saharan Africa? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Regional indicator'] == 'Sub-Saharan Africa']['Perceptions of corruption'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 Generosity scores among the countries in Western Europe? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Regional indicator'] == 'Western Europe'].nlargest(3, 'Generosity')['Generosity'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 Social support scores among the countries in Sub-Saharan Africa? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Regional indicator'] == 'Sub-Saharan Africa']['Social support'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the three lowest Ladder scores in Western Europe? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Regional indicator'] == 'Western Europe'].nsmallest(3, 'Ladder score')['Ladder score'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the three lowest Perceptions of corruption scores in Sub-Saharan Africa? \\n Dataset Columns: Country name; category, Regional indicator; category, Ladder score; float64, Standard error of ladder score; float64, upperwhisker; float64, lowerwhisker; float64, Logged GDP per capita; float64, Social support; float64, Healthy life expectancy; float64, Freedom to make life choices; float64, Generosity; float64, Perceptions of corruption; float64, Ladder score in Dystopia; float64, Explained by: Log GDP per capita; float64, Explained by: Social support; float64, Explained by: Healthy life expectancy; float64, Explained by: Freedom to make life choices; float64, Explained by: Generosity; float64, Explained by: Perceptions of corruption; float64, Dystopia + residual; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Regional indicator'] == 'Sub-Saharan Africa'].nsmallest(3, 'Perceptions of corruption')['Perceptions of corruption'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the song with the highest rank from 1965? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"(df.loc[df['Rank'].idxmax(), 'Year'] == 1965)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the artist of the song with the highest rank the same as the artist of the song with the lowest rank? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Rank'].idxmin(), 'Artist'] == df.loc[df['Rank'].idxmax(), 'Artist']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there songs without lyrics? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Lyrics'].isnull().any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many songs were produced in 1965? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Year'] == 1965].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: In which year was the song with the highest rank produced? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Rank'] == df['Rank'].min(), 'Year'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the rank of the song with the longest lyrics? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Lyrics'].str.len().idxmax(), 'Rank']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique artists are there in the dataset? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df['Artist'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Who is the artist of the song with the highest rank? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Rank'] == df['Rank'].min(), 'Artist'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which song's lyrics contain the word 'love' the most times? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Lyrics'].str.count('love').idxmax(), 'Song']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the title of the top song produced in the earliest year? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['Year'] == df['Year'].min()].nsmallest(1, 'Rank')['Song'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 songs by rank produced in the most recent year? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Year'] == df['Year'].max()].nsmallest(4, 'Rank')['Song'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the years of production of the bottom 4 ranked songs? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(4, 'Rank')['Year'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the ranks of the 2 songs produced in the earliest year? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Year'] == df['Year'].min()].nsmallest(2, 'Rank')['Rank'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the song with the highest rank from 1965 by the Beatles? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"(df.loc[df['Rank'].idxmax(), 'Year'] == 1965) and (df.loc[df['Rank'].idxmax(), 'Artist'] == 'The Beatles')\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which artist has the song with the highest rank in 1965? \\n Dataset Columns: Rank; uint8, Song; category, Artist; category, Year; uint16, Lyrics; object, Source; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['Year'] == 1965].nsmallest(1, 'Rank')['Artist'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there records where the 'count' exceeds 20,000? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['count'] > 20000).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do we have any records originating from 'Jefferson'? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df['name_origin'].eq('Jefferson').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there destinations with the name 'Baldwin'? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df['name_dest'].str.contains('Baldwin').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there records where the latitude of the destination is greater than 60? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['lat_dest'] > 60).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique destinations are there in the dataset? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df['dest'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: On average, how many times is each origin-destination pair reported? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df['count'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the highest count value in the dataset? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df['count'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique origin names are there in the dataset? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df['name_origin'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: To which destination do we find the highest 'count' reported? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['count'].idxmax(), 'name_dest']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which destination has the highest longitude? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['lon_dest'].idxmax(), 'name_dest']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 origins with the highest average count? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('name_origin')['count'].mean().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the 4 destinations with the lowest average count? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('name_dest')['count'].mean().nsmallest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 5 origins with the highest average latitude values. \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('name_origin')['lat_origin'].mean().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 2 origins have the lowest non-null average longitude values? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('name_origin')['lon_origin'].mean().nsmallest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the highest 5 count values. \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df['count'].nlargest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 highest latitude values for destinations? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df['lat_dest'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Rank the lowest 4 longitude values for origins. \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df['lon_origin'].nsmallest(4).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 6 destination IDs have the highest average counts? \\n Dataset Columns: dest; uint32, origin; float64, count; uint16, name_dest; category, name_origin; category, lat_dest; float64, lon_dest; float64, lat_origin; float64, lon_origin; float64\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('dest')['count'].mean().nlargest(6).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there talks with more than a million views? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"(df['views'] > 1000000).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a talk by 'Elon Musk'? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df['speaker_1'].str.contains('Elon Musk').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any TEDx events included? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"(df['event'].str.contains('TEDx')).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique speakers are there in the dataset? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df['speaker_1'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the average number of views for the talks? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df['views'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the maximum duration of a talk (in seconds)? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df['duration'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many talks have more than 500 comments? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df[df['comments'] > 500].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which event has the highest average views? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('event')['views'].mean().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which speaker's talk has the most comments? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['comments'].idxmax(), 'speaker_1']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which talk's title has the least views? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['views'].idxmin(), 'title']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: In which event was the longest talk held? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['duration'].idxmax(), 'event']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 4 events with the highest average number of comments? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('event')['comments'].mean().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top 3 most frequent speakers in the dataset. If two have the same count go by alphabetical order.  \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df['speaker_1'].value_counts().sort_index().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 5 events have the shortest average talk durations? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('event')['duration'].mean().nsmallest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 most viewed talks' view counts? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(4, 'views')['views'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 3 shortest talk durations in the dataset. \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df['duration'].nsmallest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 highest number of comments? \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(5, 'comments')['comments'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the view counts of the 6 least viewed talks. \\n Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(6, 'views')['views'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is it true that the oldest person in the dataset has a stroke? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['age'].idxmax(), 'stroke'] == 1\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all people with heart diseases married? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df[df['heart_disease'] == 1]['ever_married'] == 'Yes').all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the average glucose level higher for males than females? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('gender')['avg_glucose_level'].mean().loc['Male'] > df.groupby('gender')['avg_glucose_level'].mean().loc['Female']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many people in the dataset have a stroke? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['stroke'].sum()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average age of people who smoke? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['smoking_status'] == 'smokes']['age'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest glucose level recorded in the dataset? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['avg_glucose_level'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique 'work_type' categories are there in the dataset? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['work_type'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common work type among stroke patients? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['stroke'] == 1]['work_type'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the smoking status of the youngest person in the dataset? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['age'] == df['age'].min(), 'smoking_status'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the residence type of the person with the highest BMI? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['bmi'] == df['bmi'].max(), 'Residence_type'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the gender of the person with the lowest glucose level? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['avg_glucose_level'].idxmin(), 'gender']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 work types among people with heart diseases? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['heart_disease'] == 1]['work_type'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 most common smoking statuses among people with a stroke? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['stroke'] == 1]['smoking_status'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 residence types of people with hypertension? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['hypertension'] == 1]['Residence_type'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 work types among people who have never married? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['ever_married'] == 'No']['work_type'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the oldest 5 ages of people with strokes? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['stroke'] == 1].nlargest(5, 'age')['age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 lowest BMIs among people who smoke? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['smoking_status'] == 'smokes'].nsmallest(3, 'bmi')['bmi'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 glucose levels of people who have heart diseases? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['heart_disease'] == 1].nlargest(4, 'avg_glucose_level')['avg_glucose_level'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 6 highest ages of people who have never married? \\n Dataset Columns: id; uint32, gender; category, age; float64, hypertension; uint8, heart_disease; uint8, ever_married; category, work_type; category, Residence_type; category, avg_glucose_level; float64, bmi; float64, smoking_status; category, stroke; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['ever_married'] == 'No'].nlargest(6, 'age')['age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any reflections with more than 10 sentences? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"(df['num_sentence'] > 10).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a reflection from 'USA' with over 5 sentences? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"(df[(df['country'] == 'USA') & (df['num_sentence'] > 5)].shape[0] > 0)\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any reflections categorized as 'affection'? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df['predicted_category'].eq('affection').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any married individuals who reflected on 'exercise'? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df[(df['marital'] == 'married') & (df['predicted_category'] == 'exercise')].shape[0] > 0\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique reflection periods are there? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df['reflection_period'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: On average, how many sentences are there in the reflections? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df['num_sentence'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the highest age of an individual in the dataset? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df['age'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many reflections are from 'IND'? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['country'] == 'IND'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which country has the highest average number of sentences in their reflections? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('country')['num_sentence'].mean().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which gender has the most reflections categorized as 'affection'? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['predicted_category'] == 'affection']['gender'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: From which country is the oldest individual who reflected? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['age'] == df['age'].max(), 'country'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which marital status has the most reflections on 'bonding'? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['predicted_category'] == 'bonding']['marital'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 3 countries with the highest average number of sentences in their reflections? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('country')['num_sentence'].mean().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 4 most common predicted categories in the dataset. \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df['predicted_category'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 5 countries have the youngest average age of reflectors? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('country')['age'].mean().nsmallest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List 2 genders with the most number of reflections. \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df['gender'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the lowest 4 number of sentences? \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(4, 'num_sentence')['num_sentence'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 3 highest ages in the dataset. \\n Dataset Columns: wid; uint16, reflection_period; category, cleaned_hm; object, num_sentence; uint8, ground_truth_category; category, predicted_category; category, age; float64, country; category, gender; category, marital; category, parenthood; category\"}, {\"from\": \"gpt\", \"value\": \"df['age'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is it true that the youngest participant has met their match? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['age'] == df['age'].min(), 'match'].iloc[0] == 1\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do all people who got a match have the same race as their partner? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df[df['match'] == 1]['samerace'] == 1).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the average age of participants who got a match higher than those who didn't? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df[df['match'] == 1]['age'].mean()) > (df[df['match'] == 0]['age'].mean())\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many participants had a match? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['match'].sum()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average age of participants who have the same race as their partner? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['samerace'] == 1]['age'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest number of matches expected by any participant in the dataset? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['expected_num_matches'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique 'race' categories are there in the dataset? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['race'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common race among participants who got a match? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['match'] == 1]['race'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the gender of the youngest participant in the dataset? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['age'] == df['age'].min(), 'gender'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the race of the participant with the highest number of expected matches? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['expected_num_matches'].idxmax(), 'race']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the wave of the participant with the youngest age? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['age'].idxmin(), 'wave']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 waves among people who got a match? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['match'] == 1]['wave'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 most common races among people who expected more than 5 matches? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['expected_num_matches'] > 5]['race'].value_counts().head(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 waves of people who have the same race as their partner? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['samerace'] == 1]['wave'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 genders among people who expected no match? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['expected_num_matches'] == 0]['gender'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 5 ages of participants who got a match? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['match'] == 1]['age'].nlargest(5).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 lowest numbers of matches expected by people who got a match? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['match'] == 1]['expected_num_matches'].nsmallest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 ages of people who have the same race as their partner? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['samerace'] == 1].nlargest(4, 'age')['age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 6 youngest ages of participants who expected no match? \\n Dataset Columns: has_null; uint8, wave; uint8, gender; category, age; float64, age_o; float64, d_age; uint8, d_d_age; object, race; category, race_o; category, samerace; uint8, importance_same_race; float64, importance_same_religion; float64, d_importance_same_race; object, d_importance_same_religion; object, field; category, pref_o_attractive; float64, pref_o_sincere; float64, pref_o_intelligence; float64, pref_o_funny; float64, pref_o_ambitious; float64, pref_o_shared_interests; float64, d_pref_o_attractive; object, d_pref_o_sincere; object, d_pref_o_intelligence; object, d_pref_o_funny; object, d_pref_o_ambitious; object, d_pref_o_shared_interests; object, attractive_o; float64, sinsere_o; float64, intelligence_o; float64, funny_o; float64, ambitous_o; float64, shared_interests_o; float64, d_attractive_o; object, d_sinsere_o; object, d_intelligence_o; object, d_funny_o; object, d_ambitous_o; object, d_shared_interests_o; object, attractive_important; float64, sincere_important; float64, intellicence_important; float64, funny_important; float64, ambtition_important; float64, shared_interests_important; float64, d_attractive_important; object, d_sincere_important; object, d_intellicence_important; object, d_funny_important; object, d_ambtition_important; object, d_shared_interests_important; object, attractive; float64, sincere; float64, intelligence; float64, funny; float64, ambition; float64, d_attractive; object, d_sincere; object, d_intelligence; object, d_funny; object, d_ambition; object, attractive_partner; float64, sincere_partner; float64, intelligence_partner; float64, funny_partner; float64, ambition_partner; float64, shared_interests_partner; float64, d_attractive_partner; object, d_sincere_partner; object, d_intelligence_partner; object, d_funny_partner; object, d_ambition_partner; object, d_shared_interests_partner; object, sports; float64, tvsports; float64, exercise; float64, dining; float64, museums; float64, art; float64, hiking; float64, gaming; float64, clubbing; float64, reading; float64, tv; float64, theater; float64, movies; float64, concerts; float64, music; float64, shopping; float64, yoga; float64, d_sports; object, d_tvsports; object, d_exercise; object, d_dining; object, d_museums; object, d_art; object, d_hiking; object, d_gaming; object, d_clubbing; object, d_reading; object, d_tv; object, d_theater; object, d_movies; object, d_concerts; object, d_music; object, d_shopping; object, d_yoga; object, interests_correlate; float64, d_interests_correlate; object, expected_happy_with_sd_people; float64, expected_num_interested_in_me; float64, expected_num_matches; float64, d_expected_happy_with_sd_people; object, d_expected_num_interested_in_me; object, d_expected_num_matches; object, like; float64, guess_prob_liked; float64, d_like; object, d_guess_prob_liked; object, met; float64, decision; uint8, decision_o; uint8, match; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['expected_num_matches'] == 0]['age'].nsmallest(6).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any tweets with more than 10 retweets? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"(df['retweet_count'] > 10).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any tweets categorized with 'Late Flight' as the negative reason? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df['negativereason'].eq('Late Flight').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any tweets from 'Eastern Time (US & Canada)' timezone with positive sentiment? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df[(df['user_timezone'] == 'Eastern Time (US & Canada)') & (df['airline_sentiment'] == 'positive')].shape[0] > 0\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique user timezones are there in the dataset? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df['user_timezone'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: On average, what is the sentiment confidence of the tweets? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df['airline_sentiment_confidence'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the maximum number of retweets a tweet has received? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df['retweet_count'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many tweets are from 'Virgin America' airline? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['airline'] == 'Virgin America'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which airline has the highest average sentiment confidence? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('airline')['airline_sentiment_confidence'].mean().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which negative reason is most commonly associated with 'American' airline? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['airline'] == 'American']['negativereason'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: From which timezone is the tweet with the highest sentiment confidence? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['airline_sentiment_confidence'].idxmax(), 'user_timezone']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which airline has the most tweets with negative sentiment? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['airline_sentiment'] == 'negative']['airline'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 3 airlines with the highest average sentiment confidence? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('airline')['airline_sentiment_confidence'].mean().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 3 user timezones have the most number of tweets? \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df['user_timezone'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 2 airlines with the least number of tweets in the dataset. \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df['airline'].value_counts().nsmallest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 3 highest retweet counts in the dataset. \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df['retweet_count'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 6 highest sentiment confidence values. \\n Dataset Columns: tweet_id; int64, airline_sentiment; category, airline_sentiment_confidence; float64, negativereason; category, negativereason_confidence; float64, airline; category, airline_sentiment_gold; category, name; category, negativereason_gold; category, retweet_count; uint8, text; object, tweet_coord; object, tweet_created; datetime64[us, UTC], tweet_location; category, user_timezone; category\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(6, 'airline_sentiment_confidence')['airline_sentiment_confidence'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is it true that the student with the highest number of absences is from a rural area? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['absences'].idxmax(), 'address'] == 'R'\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all students who are in a romantic relationship older than 17? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df[df['romantic'] == 'yes']['age'] > 17).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the average final grade (G3) of students who consume a lot of alcohol (Dalc > 2) lower than those who don't? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df[df['Dalc'] > 2]['G3'].mean() < df[df['Dalc'] <= 2]['G3'].mean())\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Do all students who have both parents at home (Pstatus = 'T') have more than 3 free time after school (freetime > 3)? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df[df['Pstatus'] == 'T']['freetime'] > 3).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many students have their mother's education (Medu) level above 3? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['Medu'] > 3].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the average age of students who want to take higher education (higher = 'yes')? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['higher'] == 'yes']['age'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest number of absences among students? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['absences'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique schools are there in the dataset? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['school'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common mother's job among students who want to take higher education? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['higher'] == 'yes']['Mjob'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the gender of the student with the highest final grade (G3)? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['G3'].idxmax(), 'sex']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the school of the student with the highest number of absences? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['absences'].idxmax(), 'school']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the family size of the student with the highest final grade (G3)? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['G3'].idxmax(), 'famsize']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 reasons for choosing a school among students who want to take higher education? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['higher'] == 'yes']['reason'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 most common mother's jobs among students with a final grade above 10? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['G3'] > 10]['Mjob'].value_counts().head(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 schools among students with absences above 10? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['absences'] > 10]['school'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 family relations among students with a final grade below 10? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['G3'] < 10]['famrel'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 5 ages of students who want to take higher education? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['higher'] == 'yes']['age'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 ages of students whose mother's education level is above 3? \\n Dataset Columns: school; category, sex; category, age; uint8, address; category, famsize; category, Pstatus; category, Medu; uint8, Fedu; uint8, Mjob; category, Fjob; category, reason; category, guardian; category, traveltime; uint8, studytime; uint8, failures; uint8, schoolsup; category, famsup; category, paid; category, activities; category, nursery; category, higher; category, internet; category, romantic; category, famrel; uint8, freetime; uint8, goout; uint8, Dalc; uint8, Walc; uint8, health; uint8, absences; uint8, G1; uint8, G2; uint8, G3; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['Medu'] > 3]['age'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is it true that the oldest company (based on approval year) is from an urban (UrbanRural=1) area? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['ApprovalFY'] == df['ApprovalFY'].min(), 'UrbanRural'].iloc[0] == 1\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all companies with more than 10 employees located in an urban (UrbanRural=1) area? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"(df[df['NoEmp'] > 10]['UrbanRural'] == 1).all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all companies with a default amount greater than $250,000 in the food sector? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"(df[df['default_amount'] > 250000]['Sector'] == 'Food').all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the average number of retained jobs higher for companies located in urban (UrbanRural=1) areas than those in rural (UrbanRural=0) areas? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"(df[df['UrbanRural'] == 1]['RetainedJob'].mean() > df[df['UrbanRural'] == 0]['RetainedJob'].mean())\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many companies have a franchise code of 1? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df[df['FranchiseCode'] == 1].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest approval year in the dataset? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df['ApprovalFY'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique sectors are there in the dataset? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df['Sector'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common sector among companies with a franchise code of 1? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df[df['FranchiseCode'] == 1]['Sector'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the state of the company with the highest disbursement gross? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['DisbursementGross'].idxmax(), 'State']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the bank for the company with the highest default amount? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['default_amount'].idxmax(), 'Bank']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the sector of the company with the most number of employees? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['NoEmp'].idxmax(), 'Sector']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 sectors among companies with a franchise code of 1? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df[df['FranchiseCode'] == 1]['Sector'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 most common banks among companies with an approval year earlier than 2000? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df[df['ApprovalFY'] < 2000]['Bank'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 states among companies with a disbursement gross greater than $1,000,000? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df[df['DisbursementGross'] > 1000000]['State'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 2 sectors among companies with a default amount greater than $500,000? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df[df['default_amount'] > 500000]['Sector'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 approval years for companies in the state of CA? \\n Dataset Columns: LoanNr_ChkDgt; int64, Name; category, Sector; category, City; category, State; category, Zip; uint32, Bank; category, BankState; category, NAICS; uint32, ApprovalFY; uint16, NoEmp; uint16, NewExist; float64, CreateJob; uint16, RetainedJob; uint16, FranchiseCode; uint32, UrbanRural; uint8, DisbursementGross; uint32, GrAppv; uint32, SBA_Appv; uint32, default_amount; uint32\"}, {\"from\": \"gpt\", \"value\": \"df[df['State'] == 'CA']['ApprovalFY'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is it true that the oldest movie (based on year) in the drama genre is from the USA? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"(df[df['genre'].str.contains('Drama')].sort_values(by='year').iloc[0]['country'] == 'USA')\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are all movies from the USA, with more than 80 minutes duration in the drama genre, in English? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['country'] == 'USA') & (df['duration'] > 80) & (df['genre'].str.contains('Drama'))]['language'].eq('English').all()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is the average duration of English language movies from the USA longer than those from non-USA countries? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"(df[(df['language'] == 'English') & (df['country'] == 'USA')]['duration'].mean() > df[(df['language'] == 'English') & (df['country'] != 'USA')]['duration'].mean())\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many movies from the USA, in the drama genre, have a metascore of 100? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['country'] == 'USA') & (df['genre'].str.contains('Drama')) & (df['metascore'] == 100)].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the latest year for English language movies from the USA in the dataset? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['country'] == 'USA') & (df['language'] == 'English')]['year'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common genre among English language movies from the USA with a metascore of 100? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['metascore'] == 100) & (df['country'] == 'USA') & (df['language'] == 'English')]['genre'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the language of the movie from the USA with the highest metascore? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"df[df['country'] == 'USA'].nlargest(1, 'metascore')['language'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the genre of the English language movie from the USA with the most votes? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['country'] == 'USA') & (df['language'] == 'English')].loc[df['votes'].idxmax(), 'genre']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 5 most common countries among English language movies with a year earlier than 2000? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['language'] == 'English') & (df['year'] < 2000)]['country'].value_counts().head(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 5 years for English language movies from the USA in the drama genre? \\n Dataset Columns: imdb_title_id; category, title; category, original_title; category, year; float64, date_published; category, genre; category, duration; uint16, country; category, language; category, director; category, writer; category, production_company; category, actors; object, description; object, avg_vote; float64, votes; uint32, budget; category, usa_gross_income; category, worlwide_gross_income; category, metascore; float64, reviews_from_users; float64, reviews_from_critics; float64\"}, {\"from\": \"gpt\", \"value\": \"df[(df['language'] == 'English') & (df['country'] == 'USA') & (df['genre'].str.contains('Drama'))]['year'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does the song with the longest duration also have the highest energy? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['duration_ms'].idxmax(), 'energy'] == df['energy'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does the song with the highest energy also have the highest popularity? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['energy'].idxmax() == df['popularity'].idxmax())\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the maximum popularity score in the dataset? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df['popularity'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many songs were released in the year with the most releases? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df['release_year'].value_counts().max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Who is the artist with the highest popularity score? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['popularity'].idxmax(), 'artists']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: In which month was the most popular song released? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['popularity'].idxmax(), 'release_month']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the name of the longest song? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['duration_ms'].idxmax(), 'name']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the name of the song with the most energy? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['energy'].idxmax(), 'name']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the the 2 shortest songs in the dataset? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nsmallest(2, 'duration_ms')['name'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 3 longest song durations? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'duration_ms')['duration_ms'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 latest release years in the dataset? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df['release_year'].nlargest(4).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 energy scores in the dataset? \\n Dataset Columns: id; uint16, name; category, popularity; uint8, duration_ms; float64, artists; object, id_artists; object, danceability; float64, energy; float64, key; uint8, loudness; float64, speechiness; float64, acousticness; float64, instrumentalness; float64, liveness; float64, valence; float64, tempo; float64, release_year; uint16, release_month; float64, release_day; float64\"}, {\"from\": \"gpt\", \"value\": \"df['energy'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does the athlete with the highest weight also participate in the sport with the most athletes? \\n Dataset Columns: ID; uint32, Name; category, Sex; category, Age; float64, Height; float64, Weight; float64, Team; category, NOC; category, Games; category, Year; uint16, Season; category, City; category, Sport; category, Event; category, Medal; category\"}, {\"from\": \"gpt\", \"value\": \"(df['Sport'].value_counts().idxmax() == df.loc[df['Weight'].idxmax(), 'Sport'])\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the average age of athletes in the dataset? \\n Dataset Columns: ID; uint32, Name; category, Sex; category, Age; float64, Height; float64, Weight; float64, Team; category, NOC; category, Games; category, Year; uint16, Season; category, City; category, Sport; category, Event; category, Medal; category\"}, {\"from\": \"gpt\", \"value\": \"df['Age'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the maximum weight of athletes in the dataset? \\n Dataset Columns: ID; uint32, Name; category, Sex; category, Age; float64, Height; float64, Weight; float64, Team; category, NOC; category, Games; category, Year; uint16, Season; category, City; category, Sport; category, Event; category, Medal; category\"}, {\"from\": \"gpt\", \"value\": \"df['Weight'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the name of the athlete who participated in the most number of games? \\n Dataset Columns: ID; uint32, Name; category, Sex; category, Age; float64, Height; float64, Weight; float64, Team; category, NOC; category, Games; category, Year; uint16, Season; category, City; category, Sport; category, Event; category, Medal; category\"}, {\"from\": \"gpt\", \"value\": \"df['Name'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the sport of the athlete with the most medals? \\n Dataset Columns: ID; uint32, Name; category, Sex; category, Age; float64, Height; float64, Weight; float64, Team; category, NOC; category, Games; category, Year; uint16, Season; category, City; category, Sport; category, Event; category, Medal; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['Name'] == df['Name'].value_counts().idxmax()]['Sport'].iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top five most common ages of athletes? \\n Dataset Columns: ID; uint32, Name; category, Sex; category, Age; float64, Height; float64, Weight; float64, Team; category, NOC; category, Games; category, Year; uint16, Season; category, City; category, Sport; category, Event; category, Medal; category\"}, {\"from\": \"gpt\", \"value\": \"df['Age'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the 4 most common years of participation? \\n Dataset Columns: ID; uint32, Name; category, Sex; category, Age; float64, Height; float64, Weight; float64, Team; category, NOC; category, Games; category, Year; uint16, Season; category, City; category, Sport; category, Event; category, Medal; category\"}, {\"from\": \"gpt\", \"value\": \"df['Year'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the three most common heights of athletes? \\n Dataset Columns: ID; uint32, Name; category, Sex; category, Age; float64, Height; float64, Weight; float64, Team; category, NOC; category, Games; category, Year; uint16, Season; category, City; category, Sport; category, Event; category, Medal; category\"}, {\"from\": \"gpt\", \"value\": \"df['Height'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does the dataset contain customers who are under the age of 18? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['customer_age'] < 18).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any customers with a total transaction amount of zero? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['total_trans_amt'] == 0).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does the dataset include customers with a credit limit exceeding $50,000? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['credit_limit'] > 50000).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any customers in the dataset who are inactive for more than 12 months? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"(df['months_inactive_12_mon'] > 12).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest credit limit in the dataset? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['credit_limit'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the maximum total transaction amount recorded? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['total_trans_amt'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the largest total revolving balance in the dataset? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['total_revolving_bal'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest customer age in the dataset? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['customer_age'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common level of education among the customers? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['education_level'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common income category of the customers? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['income_category'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which gender is most represented among the customers? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['gender'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common attrition flag value? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['attrition_flag'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 3 most common education levels among the customers? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['education_level'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are 4 most frequent income categories? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['income_category'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 3 most frequent income categories? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['income_category'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the two most frequent income categories? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df['income_category'].value_counts().nlargest(2).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How old are the 5 oldest customers in the dataset? \\n Dataset Columns: id; uint16, attrition_flag; uint8, customer_age; uint8, gender; category, education_level; category, income_category; category, total_relationship_count; uint8, months_inactive_12_mon; uint8, credit_limit; float64, total_revolving_bal; uint16, total_amt_chng_q4_q1; float64, total_trans_amt; uint16, total_trans_ct; uint8, total_ct_chng_q4_q1; float64, avg_utilization_ratio; float64\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(5, 'customer_age')['customer_age'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any job positions available in 'New York, NY'? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['Location'] == 'New York, NY').any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any job listings from companies founded before 1900? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['Founded'] < 1900).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any job listings that require Python skills? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"(df['python_yn'] == 1).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there a job listing for a 'Data Engineer' role? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Job Title'].str.contains('Data Engineer', case=False).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique job titles are listed? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Job Title'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: On average, how old are the companies that have job listings? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['age'].mean()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the highest rating a company has received? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Rating'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many job listings are there from 'Government' type of ownership? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df[df['Type of ownership'] == 'Government'].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which job title has the highest average salary? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('Job Title')['avg_salary'].mean().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which state has the most number of job listings? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['job_state'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: From which sector is the job listing with the highest salary? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.loc[df['avg_salary'].idxmax(), 'Sector']\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which company size has the most job listings? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Size'].mode().iloc[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the top 3 sectors with the most job listings? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Sector'].value_counts().nlargest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 4 most common industries in the dataset. \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Industry'].value_counts().head(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which 5 states have the most number of job listings? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['job_state'].value_counts().nlargest(5).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the 3 company sizes with the least number of job listings. \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Size'].value_counts().nsmallest(3).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the top 4 average salaries for job titles in the dataset? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.groupby('Job Title')['avg_salary'].mean().nlargest(4).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which are the highest 3 ratings given? \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df['Rating'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the average salaries of the 6 most recent companies. \\n Dataset Columns: Job Title; category, Salary Estimate; object, Job Description; object, Rating; float64, Company Name; category, Location; category, Headquarters; category, Size; category, Founded; int16, Type of ownership; category, Industry; category, Sector; category, Revenue; category, Competitors; category, hourly; uint8, employer_provided; uint8, min_salary; uint8, max_salary; uint16, avg_salary; float64, company_txt; category, job_state; category, same_state; uint8, age; int16, python_yn; uint8, R_yn; uint8, spark; uint8, aws; uint8, excel; uint8\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(6, 'Founded')['avg_salary'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Are there any authors in the dataset who have more followers than people they are following? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"(df['user_followers_count<gx:number>'] > df['user_following_count<gx:number>']).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Is there any tweet in the dataset that has more replies<gx:number> than retweets<gx:number>? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"(df['replies<gx:number>'] > df['retweets<gx:number>']).any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Does the dataset contain any tweets that include image links? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['image_links<gx:list[url]>'].notna().any()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: How many unique authors are present in the dataset? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['author_id<gx:category>'].nunique()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the highest number of retweets<gx:number> a single tweet has received? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['retweets<gx:number>'].max()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What's the total number of tweets from verified users? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df[df['user_verified<gx:boolean>'] == True].shape[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which author has the most tweets in the dataset? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['author_id<gx:category>'].value_counts().idxmax()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which language is most commonly used in the tweets? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['lang<gx:category>'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What is the most common source of tweets? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['source<gx:text>'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Which type of tweet (e.g., original, retweet, quote) is most common in the dataset? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['type<gx:category>'].mode()[0]\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: Who are the top three authors (by ID) with the most followers? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df.nlargest(3, 'user_followers_count<gx:number>')['author_id<gx:category>'].tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top four most commonly used languages in the tweets. \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['lang<gx:category>'].value_counts().nlargest(4).index.tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the highest three numbers of followers count present in the dataset? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['user_followers_count<gx:number>'].nlargest(3).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: List the top six numbers of retweets. \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['retweets<gx:number>'].nlargest(6).tolist()\"}]",
    "[{\"from\": \"human\", \"value\": \"Question: What are the bottom five numbers of replies? \\n Dataset Columns: id<gx:category>; int64, author_id<gx:category>; uint32, author_name<gx:category>; category, author_handler<gx:category>; category, author_avatar<gx:url>; category, user_created_at<gx:date>; datetime64[us, UTC], user_description<gx:text>; category, user_favourites_count<gx:number>; uint16, user_followers_count<gx:number>; uint32, user_following_count<gx:number>; uint16, user_listed_count<gx:number>; uint16, user_tweets_count<gx:number>; uint16, user_verified<gx:boolean>; bool, user_location<gx:text>; category, lang<gx:category>; category, type<gx:category>; category, text<gx:text>; object, date<gx:date>; datetime64[us, UTC], mention_ids<gx:list[category]>; object, mention_names<gx:list[category]>; object, retweets<gx:number>; uint32, favorites<gx:number>; uint32, replies<gx:number>; uint16, quotes<gx:number>; uint16, links<gx:list[url]>; object, links_first<gx:url>; category, image_links<gx:list[url]>; object, image_links_first<gx:url>; category, rp_user_id<gx:category>; category, rp_user_name<gx:category>; category, location<gx:text>; category, tweet_link<gx:url>; category, source<gx:text>; category, search<gx:category>; category\"}, {\"from\": \"gpt\", \"value\": \"df['replies<gx:number>'].nsmallest(5).tolist()\"}]"
  ]
}