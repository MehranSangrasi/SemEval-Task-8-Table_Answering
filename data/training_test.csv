text
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the person with the highest net worth self-made? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df.loc[df['finalWorth'].idxmax(), 'selfMade'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the city with the most billionaires in the United States? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] (df[df['country'] == 'United States']['city'].mode()[0] == df['city'].mode()[0]) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a non-self-made billionaire in the top 5 ranks? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] (df[df['rank'] <= 5]['selfMade'] == False).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does the oldest billionaire have a philanthropy score of 5? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df.loc[df['age'] == df['age'].max(), 'philanthropyScore'].iloc[0] == 5 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the age of the youngest billionaire? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df['age'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many billionaires are there from the 'Technology' category? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df[df['category'] == 'Technology'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the total worth of billionaires in the 'Automotive' category? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df[df['category'] == 'Automotive']['finalWorth'].sum() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many billionaires have a philanthropy score above 3? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df[df['philanthropyScore'] > 3].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the rank of the wealthiest non-self-made billionaire? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df[df['selfMade'] == False].nsmallest(1, 'rank')['rank'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which category does the richest billionaire belong to? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df.loc[df['finalWorth'] == df['finalWorth'].max(), 'category'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the country of origin of the oldest billionaire? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df.loc[df['age'] == df['age'].max(), 'country'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the gender of the billionaire with the highest philanthropy score? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df.loc[df['philanthropyScore'].idxmax(), 'gender'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the source of wealth for the youngest billionaire? 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df.loc[df['age'] == df['age'].min(), 'source'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 3 countries with the most billionaires. 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df['country'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 5 sources of wealth for billionaires. 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df['source'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the bottom 3 categories with the fewest billionaires. 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df['category'].value_counts().nsmallest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 5 ranks of billionaires who are not self-made. 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df[df['selfMade'] == False].nsmallest(5, 'rank')['rank'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the bottom 3 ages of billionaires who have a philanthropy score of 5. 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df[df['philanthropyScore'] == 5].nsmallest(3, 'age')['age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 6 final worth values of billionaires in the 'Technology' category. 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df[df['category'] == 'Technology'].nlargest(6, 'finalWorth')['finalWorth'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 2 final worth values of billionaires in the 'Automotive' category. 
 Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object) [/INST] df[df['category'] == 'Automotive'].nlargest(2, 'finalWorth')['finalWorth'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Were there any passengers who paid a fare of more than $500? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] (df['Fare'] > 500).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is every passenger's name unique? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df['Name'].is_unique </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Were there any female passengers in the 3rd class who survived? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] (df[(df['Sex'] == 'female') & (df['Pclass'] == 3) & (df['Survived'] == True)].shape[0] > 0) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique passenger classes are present in the dataset? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df['Pclass'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the maximum age of the passengers? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df['Age'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many passengers boarded without any siblings or spouses? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df[df['Siblings_Spouses Aboard'] == 0].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On average, how much fare did the passengers pay? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df['Fare'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which passenger class has the highest number of survivors? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df[df['Survived'] == True]['Pclass'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common gender among the survivors? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df[df['Survived'] == True]['Sex'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common age range among passengers: (0-18, 18-30, 30-50, 50+)? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df['Age'].dropna().apply(lambda x: '0-18' if x <= 18 else '18-30' if x <= 30 else '30-50' if x <= 50 else '50+').mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the top 3 passenger classes by survival rate. 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df.groupby('Pclass')['Survived'].mean().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 genders by average fare paid? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df.groupby('Sex')['Fare'].mean().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the oldest 3 ages among the survivors? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df[df['Survived'] == True].nlargest(3, 'Age')['Age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Could you list the youngest 3 ages among the survivors? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df[df['Survived'] == True].nsmallest(3, 'Age')['Age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the lowest 4 fares among those who didn't survive? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df[df['Survived'] == False].nsmallest(4, 'Fare')['Fare'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the average age of the respondents above 30? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] (df['What is your age? 👶🏻👵🏻'].mean() > 30) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there more single individuals than married ones in the dataset? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] (df['What is your civil status? 💍'] == 'Single').sum() > (df['What is your civil status? 💍'] == 'Married').sum() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the most frequent hair color black? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] (df['What is your hair color? 👩🦰👱🏽'].mode()[0] == 'black') </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average gross annual salary? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['Gross annual salary (in euros) 💸'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the median age of the respondents? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What is your age? 👶🏻👵🏻'].median() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common level of studies achieved? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What is the maximum level of studies you have achieved? 🎓'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which body complexity has the least number of respondents? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What is your body complexity? 🏋️'].value_counts().idxmin() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most frequent eye color? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What is your eye color? 👁️'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the bottom 3 hair lengths in terms of frequency. 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['How long is your hair? 💇🏻♀️💇🏽♂️'].value_counts().nsmallest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the top 5 civil statuses represented in the dataset. 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What is your civil status? 💍'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 least common hair colors? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What is your hair color? 👩🦰👱🏽'].value_counts().nsmallest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 maximum gross annual salaries? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df.nlargest(4, 'Gross annual salary (in euros) 💸')['Gross annual salary (in euros) 💸'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the bottom 3 values for the happiness scale. 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['Happiness scale'].nsmallest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 highest ages present in the dataset? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What is your age? 👶🏻👵🏻'].nlargest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the bottom 6 skin tone values based on frequency. 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What is your skin tone?'].value_counts().nsmallest(6).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any trips with a total distance greater than 30 miles? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] (df['trip_distance'] > 30).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Were there any trips that cost more than $100 in total? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] (df['total_amount'] > 100).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any trip with more than 6 passengers? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] (df['passenger_count'] > 6).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Did all the trips use a payment type of either 1 or 2? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['payment_type'].isin([1, 2]).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum fare amount charged for a trip? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['fare_amount'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique pickup locations are in the dataset? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['PULocationID'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average tip amount given by passengers? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['tip_amount'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which payment type is the most common in the dataset? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['payment_type'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which vendor has the most trips recorded? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['VendorID'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common drop-off location? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['DOLocationID'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 3 most frequent pickup locations? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['PULocationID'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the 4 most common rate codes used. 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['RatecodeID'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: list the 2 most frequent store and forward flags. 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['store_and_fwd_flag'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Identify the top 4 payment types used by frequency 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['payment_type'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Report the 4 highest toll amounts paid. 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df.nlargest(4, 'tolls_amount')['tolls_amount'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: list the top 3 longest trip distances 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df.nlargest(3, 'trip_distance')['trip_distance'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Report the 6 highest fare amounts charged. 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df.nlargest(6, 'fare_amount')['fare_amount'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do any complaints have 'Dog' as a descriptor? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['descriptor'].str.contains('Dog').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Were there any complaints raised in April? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] (df['month_name'] == 'April').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the total number of unique agencies handling complaints? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['agency'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many complaints were raised at midnight? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df[df['hour'] == 0].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique descriptors are present in the dataset? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['descriptor'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which borough has the most complaints? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['borough'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which month sees the highest number of complaints? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['month_name'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which weekday has the least complaints? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['weekday_name'].value_counts().idxmin() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which agency is least frequently handling complaints? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['agency'].value_counts().idxmin() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 5 most frequent complaint types. 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['complaint_type'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 4 agencies handle the most complaints? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['agency'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Mention the 2 most common weekdays for complaints. 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['weekday_name'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 hours with the most complaints? 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['hour'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: State the 3 lowest unique complaint keys. 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['unique_key'].nsmallest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 6 highest complaint numbers from the dataset. 
 Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC] [/INST] df['unique_key'].nlargest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all properties in the dataset located in the same neighbourhood? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['neighbourhood_cleansed'].nunique() == 1 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do all hosts verify their identity? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['host_identity_verified'].eq('t').all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all reviews_per_month values greater than 5? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] (df['reviews_per_month'] > 5).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any listings without a specified room type? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['room_type'].isnull().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique neighbourhoods are there in the dataset? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['host_neighbourhood'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum number of bedrooms a property has in this dataset? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['bedrooms'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which neighbourhood has the most listings? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['neighbourhood_cleansed'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common room type in the listings? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['room_type'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What property type has the most listings? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['property_type'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 3 neighbourhoods with the most listings. 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['neighbourhood_cleansed'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 4 most common property types? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['property_type'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the 2 most preferred room types? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['room_type'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 highest review scores for location? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['review_scores_location'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 most common number of bedrooms in properties? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['bedrooms'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 highest counts of listings by a single host for entire homes? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['calculated_host_listings_count_entire_homes'].nlargest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 6 lowest review scores for communication. 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df['review_scores_communication'].nsmallest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there players who have a greater overall score than their potential score? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] (df['Overall<gx:number>'] > df['Potential<gx:number>']).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any players whose preferred foot is left and are from a nationality that starts with 'B'? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df[(df['Preferred Foot<gx:category>'] == 'Left') & (df['Nationality<gx:category>'].str.startswith('B'))].any().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average overall score of players from France? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df[df['Nationality<gx:category>'] == 'France']['Overall<gx:number>'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique clubs are there in the dataset? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Club<gx:category>'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest value (in €) of a player in the dataset? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Value_€<gx:currency>'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many players have the position 'ST'? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df[df['Position<gx:category>'] == 'ST'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common nationality in the dataset? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Nationality<gx:category>'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common preferred foot amongst players? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Preferred Foot<gx:category>'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common position of players in the dataset? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Position<gx:category>'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 3 clubs in terms of the total value (in €) of their players? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df.groupby('Club<gx:category>')['Value_€<gx:currency>'].sum().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the bottom 4 nationalities in terms of the average agility of their players? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df.groupby('Nationality<gx:category>')['Agility<gx:number>'].mean().nsmallest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 overall scores in the dataset? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Overall<gx:number>'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the bottom 5 potential scores in the dataset? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Potential<gx:number>'].nsmallest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 values (in €) of players in the dataset? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Value_€<gx:currency>'].nlargest(4).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 wages (in €) of players in the dataset? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Wage_€<gx:currency>'].nlargest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: All tornadoes in the dataset occurred in the 21st century. 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] (df['yr'] >= 2001).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique states are represented in the dataset? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df['st'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest magnitude of tornado recorded in the dataset? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df['mag'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the longest length of a tornado path in the dataset? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df['len'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum number of injuries caused by a single tornado? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df['inj'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which state has experienced the most tornadoes? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df['st'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: In which month do most tornadoes occur? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df['mo'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 number of injuries caused by tornadoes in the dataset? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df['inj'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 5 magnitudes of tornadoes in the dataset? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df['mag'].nlargest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 path lengths of tornadoes in the dataset? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df.nlargest(4, 'len')['len'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 6 number of fatalities caused by tornadoes in the dataset? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df['fat'].nlargest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: All recorded temperatures are above freezing point. 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] (df['TMIN'] > 0).all() and (df['TMAX'] > 0).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest recorded precipitation in inches? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df['PRCP'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the lowest minimum temperature recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df['TMIN'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest maximum temperature recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df['TMAX'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the deepest recorded snow depth in inches? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df['SNWD'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 highest recorded precipitation events in inches? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df.nlargest(3, 'PRCP')['PRCP'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 lowest minimum temperatures recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df['TMIN'].nsmallest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 highest maximum temperatures recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df['TMAX'].nlargest(4).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 deepest snow depth recorded in inches? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df['SNWD'].nlargest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there more than 20 unique clothing items in the dataset? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Clothing ID'].nunique() > 20 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the age of the reviewers above 50 years on average? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Age'].mean() > 50 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do all reviews come from the same department? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Department Name'].nunique() == 1 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all products recommended? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] (df['Recommended IND'] == 1).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average age of the reviewers? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Age'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest number of positive feedback received for a review? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Positive Feedback Count'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common rating given by reviewers? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Rating'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique clothing items are there in the dataset? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Clothing ID'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which department has the most reviews? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Department Name'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which class of clothing is most commonly reviewed? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Class Name'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which division is most commonly mentioned in the reviews? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Division Name'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most frequently reviewed clothing item? If you find a tie answer with row order. 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Clothing ID'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the 4 most reviewed categories in Department Name? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Department Name'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 2 most reviewed categories in Class Name? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Class Name'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the 2 most reviewed categories in Division Name? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Division Name'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 oldest Ages of reviewers? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df.nlargest(5, 'Age')['Age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 most common Positive Feedback Counts of reviewers? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Positive Feedback Count'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 most common values for recommendation indicator? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Recommended IND'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 most common clothing IDs in the reviews? If you find a tie answer in row order. 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Clothing ID'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any incidents that occurred at the same latitude and longitude more than once? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] (df.groupby(['Latitude', 'Longitude']).size() > 1).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique types of incident categories are there in the dataset? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Incident Category'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many different police districts are there in the dataset? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Police District'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average incident count per year? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Incident Year'].value_counts().mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common incident category? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Incident Category'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which day of the week has the highest number of incidents? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Incident Day of Week'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the Police District with the most incidents? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Police District'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the years with the top 4 highest incident counts. 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Incident Year'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 years with the highest incident counts. 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Incident Year'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the 6 years with the most number of unique incident categories. 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df.groupby('Incident Year')['Incident Category'].nunique().nlargest(6).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does any patient have a resting blood pressure above 200? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] (df['RestingBP'] > 200).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there patients without heart disease? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['HeartDisease'].eq(0).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does everyone have normal resting electrocardiographic results? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] (df['RestingECG'] == 'Normal').all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum age of patients in the dataset? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['Age'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the minimum resting blood pressure among the patients? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['RestingBP'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average cholesterol level in the dataset? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['Cholesterol'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the standard deviation of maximum heart rate among the patients? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['MaxHR'].std() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common chest pain type among patients? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['ChestPainType'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the least common resting electrocardiographic result? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['RestingECG'].value_counts().idxmin() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common ST slope among patients with heart disease? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df[df['HeartDisease'] == 1]['ST_Slope'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 most common chest pain types? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['ChestPainType'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 4 resting electrocardiographic results are least common? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['RestingECG'].value_counts().nsmallest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 most common ST slopes among patients with heart disease? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df[df['HeartDisease'] == 1]['ST_Slope'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the ages of the 5 oldest patients in the dataset? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df.nlargest(5, 'Age')['Age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 highest resting blood pressures? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['RestingBP'].nlargest(4).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 6 lowest cholesterol levels in the dataset? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['Cholesterol'].nsmallest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 highest maximum heart rates among the patients? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['MaxHR'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a roller coaster in the dataset that operates at a speed more than 100 mph? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] (df['speed_mph'] > 100).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all roller coasters in the dataset designed by 'Werner Stengel' removed? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] (df[df['Designer'] == 'Werner Stengel']['Status'] == 'Removed').all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does every roller coaster have a G-force value? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df['Gforce_clean'].notna().all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum speed (in mph) for roller coasters in the dataset? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df['speed_mph'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many roller coasters were introduced in the year 2000? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df[df['year_introduced'] == 2000].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average G-force across all roller coasters in the dataset? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df['Gforce_clean'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the total number of roller coasters designed by 'Edwin Madeupname' in the dataset? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df[df['Designer'] == 'Edwin Madeupname'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which manufacturer has built the fastest roller coaster? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df.loc[df['speed_mph'].idxmax(), 'Manufacturer'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the status of the roller coaster with the highest G-force? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df.loc[df['Gforce_clean'].idxmax(), 'Status'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the location of the roller coaster with the highest number of inversions? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df.loc[df['Inversions_clean'].idxmax(), 'Location'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 speeds (in mph) of roller coasters in the dataset? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df['speed_mph'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the G-force values of the 2 roller coasters with the highest G-force. 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df.nlargest(2, 'Gforce_clean')['Gforce_clean'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the heights (in ft) of the top 4 tallest roller coasters? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df.nlargest(4, 'height_ft')['height_ft'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a rental property with exactly 5 bedrooms? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] (df['bedrooms'] == 5).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any rental properties that can accommodate more than 10 guests? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] (df['accommodates'] > 10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a rental property that has received a perfect review score? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df['review_scores_rating'].eq(10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many rental properties are there in the dataset? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] len(df) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum number of bedrooms in a property? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df['bedrooms'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest price per night for a rental property? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df['price'].str.replace('$', '').str.replace(',', '').astype(float).max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum number of reviews a property has received? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df['number_of_reviews'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the host response time for the property with the highest number of bedrooms? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df.loc[df['bedrooms'] == df['bedrooms'].max(), 'host_response_time'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the property type of the listing with the most reviews? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df.loc[df['number_of_reviews'].idxmax(), 'property_type'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 least common scraping sources? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df['source'].value_counts().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 prices of the most expensive properties? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df['price'].str.replace('$', '').str.replace(',', '').astype(float).nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 prices of the least expensive properties? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df['price'].str.replace('$', '').str.replace(',', '').astype(float).nsmallest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 numbers of reviews received by the 2 most reviewed properties? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df.nlargest(2, 'number_of_reviews')['number_of_reviews'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 numbers of guests accommodated by the properties that can accommodate the most guests? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df.nlargest(5, 'accommodates')['accommodates'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a food item with 'Fruits' as its group? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] (df['GROUP'] == 'Fruits').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there food items with 'Nuts' as their sub group? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['SUB GROUP'].str.contains('Nuts').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a food item with scientific name 'Tilia argentea'? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['SCIENTIFIC NAME'].eq('Tilia argentea').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is 'Angelica' listed as a food name in the dataset? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['FOOD NAME'].str.contains('Angelica').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many food items are there in the dataset? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] len(df) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique food groups are there in the dataset? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['GROUP'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique sub groups are there in the dataset? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['SUB GROUP'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique food items are there in the dataset? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['FOOD NAME'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the group of the food named 'Kiwi'? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df.loc[df['FOOD NAME'] == 'Kiwi', 'GROUP'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the sub group of the food with scientific name 'Tilia argentea'? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df.loc[df['SCIENTIFIC NAME'] == 'Tilia argentea', 'SUB GROUP'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the scientific name of the food named 'Colorado pinyon'? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df.loc[df['FOOD NAME'] == 'Colorado pinyon', 'SCIENTIFIC NAME'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the food name of the item with scientific name 'Tilia argentea'? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df.loc[df['SCIENTIFIC NAME'] == 'Tilia argentea', 'FOOD NAME'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 most common food groups? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['GROUP'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 most common groups? If there are two that have the same number of appearances give preference alphabetically. 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['GROUP'].value_counts().sort_index().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 least common food groups? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['GROUP'].value_counts().nsmallest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 most common sub groups? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['SUB GROUP'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the lengths of the top 5 most common sub group names? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['SUB GROUP'].value_counts().head(5).index.map(len).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the number of appearances of the 2 least common groups? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['GROUP'].value_counts().nsmallest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the number of appearances of the 3 most common groups? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['GROUP'].value_counts().nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the three most common group name lengths? 
 Dataset Columns: FOOD NAME (category), SCIENTIFIC NAME (category), GROUP (category), SUB GROUP (category) [/INST] df['GROUP'].str.len().value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a customer with 'Large Business' as their occupation? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['Occupation'].eq('Large Business').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there customers with 'King' as their pitched product? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['ProductPitched'].eq('King').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a customer with designation 'VP'? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] (df['Designation'] == 'VP').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is 'Unmarried' listed as a marital status in the dataset? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] 'Unmarried' in df['MaritalStatus'].unique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many customers are there in the dataset? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] len(df) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique occupations are there in the dataset? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['Occupation'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique designations are there in the dataset? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['Designation'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique marital statuses are there in the dataset? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['MaritalStatus'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the occupation of the customer with ID 200000? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df.loc[df['CustomerID'] == 200000, 'Occupation'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the product pitched to the customer with ID 200001? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df.loc[df['CustomerID'] == 200001, 'ProductPitched'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the designation of the customer with ID 200002? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df.loc[df['CustomerID'] == 200002, 'Designation'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the marital status of the customer with ID 200003? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df.loc[df['CustomerID'] == 200003, 'MaritalStatus'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 most common occupations? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['Occupation'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 most common pitched products? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['ProductPitched'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 least common occupations? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['Occupation'].value_counts().nsmallest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 least common pitched products? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['ProductPitched'].value_counts().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the ages of the 3 oldest customers? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df.nlargest(3, 'Age')['Age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the ages of the 4 youngest customers? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df.nsmallest(4, 'Age')['Age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 highest monthly incomes of the customers? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['MonthlyIncome'].nlargest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 most common duration of pitch? 
 Dataset Columns: CustomerID (uint32), ProdTaken (uint8, unique_values: [1, 0]), Age (float64), TypeofContact (category, unique_values: [Self Enquiry, Company Invited]), CityTier (uint8, unique_values: [3, 1, 2]), DurationOfPitch (float64), Occupation (category, unique_values: [Salaried, Free Lancer, Small Business, Large Business]), Gender (category, unique_values: [Female, Male, Fe Male]), NumberOfPersonVisiting (uint8, unique_values: [3, 2, 1, 4, 5]), NumberOfFollowups (float64, unique_values: [3.0, 4.0, 2.0, 5.0, 1.0, 6.0]), ProductPitched (category, unique_values: [Deluxe, Basic, Standard, Super Deluxe, King]), PreferredPropertyStar (float64, unique_values: [3.0, 4.0, 5.0]), MaritalStatus (category, unique_values: [Single, Divorced, Married, Unmarried]), NumberOfTrips (float64), Passport (uint8, unique_values: [1, 0]), PitchSatisfactionScore (uint8, unique_values: [2, 3, 5, 4, 1]), OwnCar (uint8, unique_values: [1, 0]), NumberOfChildrenVisiting (float64, unique_values: [0.0, 2.0, 1.0, 3.0]), Designation (category, unique_values: [Manager, Executive, Senior Manager, AVP, VP]), MonthlyIncome (float64) [/INST] df['DurationOfPitch'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any entry posted on a weekend? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] (df['weekday_name'].isin(['Saturday', 'Sunday'])).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there titles with more than 100 characters? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] (df['title'].str.len() > 100).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do any entries have a negative sentiment according to the Cardiff NLP model? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] (df['title_gx_cardiff_nlp_sentiment'] == 'negative').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the term 'linux' mentioned in the ""Clusters II"" column? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['Clusters II'].str.contains('linux', case=False, na=False).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many entries were posted in the morning? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df[df['partofday'] == 'morning'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest score received by an entry? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['score'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On average, how many descendants does an entry have? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['descendants'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many entries are in the Autumn season? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df[df['season'] == 'Autumn'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which day of the week has the most entries? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['weekday_name'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the predominant language used in titles? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['title_gx_lang'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: In which season was the entry with the highest score posted? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df.loc[df['score'].idxmax(), 'season'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On which part of the day are most entries posted? 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['partofday'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 4 most frequent terms in the ""Clusters II"" column. 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['Clusters II'].value_counts().head(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the 2 month names which appear less in the dataset. 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['month_name'].value_counts().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Identify the top 3 weekdays based on entry frequency. 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['weekday_name'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Provide the bottom 4 seasons in terms of entry count. 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['season'].value_counts().nsmallest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 3 scores in the dataset. 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df['score'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the bottom 5 title text lengths. 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df.nsmallest(5, 'title_gx_text_length')['title_gx_text_length'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Identify the top 4 numbers of descendants. 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df.nlargest(4, 'descendants')['descendants'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Provide the bottom 6 scores in the dataset. 
 Dataset Columns: clusters_3 (object, unique_values: [search, ripgrep, brave search, pdfs, search, search engine, engine, seo spam, search results, result, search, appearing in google, search, search results, result, google search, duckduckgo, search, engine option, search engine option, [Noise], search, police, 1,500, copyright claim, search results, search, product, promote, warrantless, search, laptops, phones]), test (object, unique_values: [[], ['test 1'], ['test 2'], ['test 1' 'test 2']]), gx_cluster (category), Clusters II (category, unique_values: [year, work, new, apple, linux, rust, iphone, google, web, firefox, open, amazon, database, sqlite, sql, facebook, twitter, die, account, python, python 3, 3.8, python 2]), timestamp (datetime64[us), UTC], title_gx_ngrams (object), title (object), hour (uint8), weekday_name (category, unique_values: [Wednesday, Tuesday, Monday, Sunday, Saturday, Friday, Thursday]), month_name (category), title_gx_cardiff_nlp_sentiment (category, unique_values: []), title_gx_hashtags (object, unique_values: [[], ['#deletefacebook'], ['#c0ffee']]), url (category), by (category), score (uint16), descendants (float64), partofday (category, unique_values: [afternoon, morning, evening, noon, night]), season (category, unique_values: [Autumn, Summer, Spring, Winter]), title_gx_lang (category), title_gx_text_length (float64) [/INST] df.nsmallest(6, 'score')['score'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any employees with more than 7 projects? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] (df['Number of Projects'] > 7).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Has any employee worked for more than 300 hours on average per month? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] (df['Average Monthly Hours'] > 300).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all satisfaction levels above 0.5? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] (df['Satisfaction Level'] > 0.5).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique departments are there? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df['Department'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the maximum number of years an employee has been in the company? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df['Years in the Company'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many employees have been promoted in the last 5 years? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df['Promoted in the last 5 years?'].value_counts().get('Yes', 0) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On average, how many hours do employees work monthly? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df['Average Monthly Hours'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which department has the highest number of employees? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df['Department'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common salary level among employees? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df['salary'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which salary level has the least number of employees who had an accident at work? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df[df['Work Accident'] == 'Yes'].groupby('salary').size().idxmin() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the top 4 departments with the most employees. 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df['Department'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Identify the 3 departments with the lowest average satisfaction levels. 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df.groupby('Department')['Satisfaction Level'].mean().nsmallest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 departments with the lowest average monthly hours worked? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df.groupby('Department')['Average Monthly Hours'].mean().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the highest 3 satisfaction levels among employees who left? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df[df['Left'] == 'Yes'].nlargest(3, 'Satisfaction Level')['Satisfaction Level'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Whhat are the top 6 last evaluation scores? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[us), UTC] [/INST] df['Last Evaluation'].nlargest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Have there been any incidents where the cause was related to the undercarriage of the aircraft? 
 Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category) [/INST] df['Incident_Cause(es)'].str.contains('undercarriage', case=False, na=False).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there incidents where the aircraft was involved in a collision? 
 Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category) [/INST] (df['Incident_Category'].str.contains('collision', case=False, na=False) | df['Incident_Cause(es)'].str.contains('collision', case=False, na=False)).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique aircraft models are in the dataset? 
 Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category) [/INST] df['Aircaft_Model'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which aircraft model was involved in the most incidents? 
 Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category) [/INST] df['Aircaft_Model'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common phase of aircraft during incidents? 
 Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category) [/INST] df['Aircraft_Phase'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 most common causes of incidents? 
 Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category) [/INST] df['Incident_Cause(es)'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the 2 most frequently occurring aircraft operators in the dataset. 
 Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category) [/INST] df['Aircaft_Operator'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 most common types of aircraft damage? 
 Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category) [/INST] df['Aircaft_Damage_Type'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any properties with a price over 1,000,000? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] (df['Precio'] > 1000000).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there properties with zero bathrooms? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] (df['Baños'] == 0).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Has any property been listed for more than 100 days? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] (df['Duración'] > 100).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest price in the dataset? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Precio'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the total number of properties listed? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] len(df) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the longest duration a property has been listed? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Duración'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the largest surface listed? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Superficie'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common type of property listed? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Tipo'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which advertiser has listed the most properties? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Anunciante'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which property has the highest price? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df.loc[df['Precio'].idxmax(), 'Referencia'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which property has the largest surface area? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df.loc[df['Superficie'].idxmax(), 'Referencia'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the five types of properties more frequently listed? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Tipo'].value_counts().head(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 types of properties which are listed more frequently? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Tipo'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 most common localities for properties listed? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Localidad'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 most common districts for properties listed? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Distrito'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 highest property prices listed? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df.nlargest(5, 'Precio')['Precio'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 3 longest durations properties have been listed. 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Duración'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Identify the 4 largest surfaces listed. 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df.nlargest(4, 'Superficie')['Superficie'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 6 highest numbers of bedrooms in properties listed? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Habitaciones'].nlargest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there more than 2000 customers with a monthly charge higher than $80? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] (df['MonthlyCharges'] > 80).sum() > 2000 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any customers with no internet service? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] (df['InternetService'] == 'No').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique customers are there in the dataset? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['customerID'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest monthly charge? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['MonthlyCharges'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the total number of customers? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] len(df) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the longest tenure? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['tenure'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common payment method? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['PaymentMethod'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common contract type? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['Contract'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which customer has the highest total charge? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df.loc[df['TotalCharges'].idxmax(), 'customerID'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which customer has the highest monthly charge? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df.loc[df['MonthlyCharges'].idxmax(), 'customerID'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 most common internet services? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['InternetService'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the 4 most common payment methods. 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['PaymentMethod'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 most common types of contract? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['Contract'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 most common services for which customers have multiple lines? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['MultipleLines'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 highest total charges? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['TotalCharges'].nlargest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 highest monthly charges? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df.nlargest(4, 'MonthlyCharges')['MonthlyCharges'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 6 longest tenures? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['tenure'].nlargest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 shortest tenures? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df['tenure'].nsmallest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a listing with a review score rating of 100? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] (df['review_scores_rating'] == 100).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any hosts who have listed more than 10 properties? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] (df['host_total_listings_count'] > 10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a listing that requires a minimum of 365 nights? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] (df['minimum_nights'] >= 365).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique hosts are there in the dataset? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['host_id'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest number of listings a single host has? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['host_total_listings_count'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique locations are listed by the hosts? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['host_location'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average review score rating across all listings? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['review_scores_rating'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common host location? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['host_location'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the name of the listing with the most bedrooms? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df.loc[df['bedrooms'] == df['bedrooms'].max(), 'name'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which location has the highest number of listings? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['host_location'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common property type? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['property_type'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 6 unique host locations with the most listings? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['host_location'].value_counts().nlargest(6).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 unique host locations with the most listings? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['host_location'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 most common types of properties?. 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['property_type'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 highest review score ratings? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['review_scores_rating'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 lowest number of minimum nights required? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df['minimum_nights'].nsmallest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 6 lowest review scores given because of locations? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] df.nsmallest(6, 'review_scores_location')['review_scores_location'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many days had a maximum temperature above 30 degrees? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df[df['tmax'] > 30].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique days had solar radiation measurements? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df[df['sol'].notnull()]['fecha'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest wind speed ever recorded? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df['racha'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On which weekday did the highest temperature ever occur? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.loc[df['tmax'].idxmax(), 'weekday_name'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: In which season do we find the highest average solar radiation? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.groupby('season')['sol'].mean().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which month had the lowest average wind speed? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.groupby('month_name')['velmedia'].mean().idxmin() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 months with the highest average maximum temperatures? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.groupby('month_name')['tmax'].mean().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the 5 weekdays with the most rain, ranked from highest to lowest? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.groupby('weekday_name')['prec'].sum().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 4 seasons ranked by average solar radiation, from highest to lowest. 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.groupby('season')['sol'].mean().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 2 months recorded the lowest average minimum temperatures? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.groupby('month_name')['tmin'].mean().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 5 recorded maximum temperatures. 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df['tmax'].nlargest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 lowest wind speeds ever recorded? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.nsmallest(4, 'velmedia')['velmedia'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Rank the highest 3 solar radiation measurements. 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.nlargest(3, 'sol')['sol'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there records where the RETRINOIN_xRZI exceeds 10,000? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] (df['RETRINOIN_xRZI'] > 10000).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do we have respondents who fall under both PRIVADO control and NACIONAL market? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df[(df['CONTROL'] == 'PRIVADO') & (df['MERCADO'] == 'NACIONAL')].any().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there records with RETRINOIN_WwQk less than 5,000? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] (df['RETRINOIN_WwQk'] < 5000).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest value for RETRINOIN_ac1q in the dataset? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['RETRINOIN_ac1q'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique clusters are present in the 'umap_cluster' column? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['umap_cluster'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 'ANOS2' category has the most number of respondents? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['ANOS2'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: In which 'NUTS1' region do we find the highest average RETRINOIN? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df.groupby('NUTS1')['RETRINOIN'].mean().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 'MERCADO' category is the least common in the dataset? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['MERCADO'].value_counts().idxmin() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 'umap_cluster' is the most dominant in the dataset? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['umap_cluster'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the 2 least common age categories in the dataset? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['ANOS2'].value_counts().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the 3 least common 'ANOS2' categories in the dataset? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['ANOS2'].value_counts().nsmallest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 5 'NUTS1' regions by frequency. 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['NUTS1'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 5 recorded RETRINOIN values. 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['RETRINOIN'].nlargest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 lowest x values in the dataset? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df.nsmallest(4, 'x')['x'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Rank the highest 3 y values in the dataset. 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df.nlargest(3, 'y')['y'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the largest 2 y values in the dataset?. 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['y'].nlargest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the most visited URL related to 'no code data science'? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] (df.loc[df['Ranking'].idxmin(), 'Keyword'] == 'no code data science') </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does any URL have a competition level of 'Low'? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] df['Competition'].eq('Low').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any URLs with an average monthly searches above 1000? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] (df['Avg. monthly searches'] > 1000).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the URL with the lowest ranking also the one with the highest monthly searches? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] (df.loc[df['Ranking'] == df['Ranking'].min(), 'URLs'].iloc[0] == df.loc[df['Avg. monthly searches'] == df['Avg. monthly searches'].max(), 'URLs'].iloc[0]) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique URLs are in the dataset? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] df['URLs'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the minimum average monthly searches in the dataset? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] df['Avg. monthly searches'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique keywords are present in the dataset? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] df['Keyword'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the competition level of the highest-ranked URL? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] df.loc[df['Ranking'] == df['Ranking'].min(), 'Competition'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What keyword has the highest average monthly searches? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] df.loc[df['Avg. monthly searches'].idxmax(), 'Keyword'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the competition level for the URL with the highest ranking? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] df.loc[df['Ranking'] == df['Ranking'].max(), 'Competition'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What keyword is associated with the URL with the lowest ranking? 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] df.loc[df['Ranking'] == df['Ranking'].min(), 'Keyword'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Specify the bottom 2 average monthly searches for URLs with the highest rankings. 
 Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High]) [/INST] df[df['Ranking'] == df['Ranking'].max()].nsmallest(2, 'Avg. monthly searches')['Avg. monthly searches'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any wine with a quality rating of 10? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] (df['quality'] == 10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any wines with residual sugar above 15g/dm^3? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] (df['residual sugar'] > 15).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the highest alcohol content wine also the one with the highest quality rating? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] (df['alcohol'].idxmax() == df['quality'].idxmax()) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does any wine have a pH level below 2.5? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] (df['pH'] < 2.5).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique quality ratings are there in the dataset? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df['quality'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum fixed acidity level found in the dataset? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df['fixed acidity'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the minimum volatile acidity level in the dataset? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df['volatile acidity'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many wines have free sulfur dioxide above 50 mg/dm^3? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df[df['free sulfur dioxide'] > 50].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the quality rating of the wine with the highest alcohol content? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.loc[df['alcohol'].idxmax(), 'quality'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the quality rating of the wine with the highest fixed acidity? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.loc[df['fixed acidity'].idxmax(), 'quality'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the quality rating of the wine with the lowest volatile acidity? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.loc[df['volatile acidity'].idxmin(), 'quality'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the quality rating of the wine with the highest pH level? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.loc[df['pH'].idxmax(), 'quality'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any purchase with a total cost above 1000? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] (df['Total'] > 1000).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any customers who made a purchase using cash? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] (df['Payment'] == 'Cash').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the customer with the highest total purchase cost a 'Member'? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.loc[df['Total'].idxmax(), 'Customer type'] == 'Member' </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique branches are there in the dataset? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df['Branch'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum quantity of products bought in a single purchase? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df['Quantity'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the minimum total cost of a purchase in the dataset? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df['Total'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many purchases were made in Yangon city? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df[df['City'] == 'Yangon'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the payment method used for the purchase with the highest total cost? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.loc[df['Total'].idxmax(), 'Payment'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the product line of the purchase with the highest total cost? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.loc[df['Total'].idxmax(), 'Product line'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the customer type of the purchase with the lowest total cost? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.loc[df['Total'].idxmin(), 'Customer type'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the gender of the customer with the highest total purchase cost? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.loc[df['Total'].idxmax(), 'Gender'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the payment methods of the top 3 purchases with the highest total cost. 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.nlargest(3, 'Total')['Payment'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Enumerate the product lines of the bottom 2 purchases with the lowest total cost. 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.nsmallest(2, 'Total')['Product line'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the customer types of the top 5 purchases with the highest total cost? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.nlargest(5, 'Total')['Customer type'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the genders of the bottom 4 purchases with the lowest total cost. 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.nsmallest(4, 'Total')['Gender'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the quantities of products bought in the top 4 purchases with the highest total cost? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.nlargest(4, 'Total')['Quantity'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the unit prices of the bottom 3 purchases with the lowest total cost. 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.nsmallest(3, 'Total')['Unit price'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Enumerate the ratings of the top 5 purchases with the highest total cost. 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.nlargest(5, 'Total')['Rating'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Provide the gross incomes of the bottom 2 purchases with the lowest total cost. 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df.nsmallest(2, 'Total')['gross income'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does the person with the highest glucose level also have diabetes? 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df.loc[df['Glucose'].idxmax(), 'Outcome'] == 1 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum number of pregnancies recorded in the dataset? 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df['Pregnancies'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the minimum blood pressure level recorded in the dataset? 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df['BloodPressure'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average BMI recorded in the dataset? 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df['BMI'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the diabetes outcome for the person with the highest BMI? 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df.loc[df['BMI'].idxmax(), 'Outcome'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the diabetes outcome for the person with the lowest blood pressure? 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df.loc[df['BloodPressure'].idxmin(), 'Outcome'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the diabetes outcome for the person with the highest insulin level? 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df.loc[df['Insulin'].idxmax(), 'Outcome'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the diabetes outcome for the person with the lowest glucose level? 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df.loc[df['Glucose'].idxmin(), 'Outcome'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the diabetes outcomes of the top 3 individuals with the highest number of pregnancies. 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df.nlargest(3, 'Pregnancies')['Outcome'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Provide the glucose levels of the 2 individuals with the highest insulin levels. 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df.nlargest(2, 'Insulin')['Glucose'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does the article with the longest headline contain the keyword 'United States Politics and Government'? 
 Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object) [/INST] 'United States Politics and Government' in df.loc[df['headline'].str.len().idxmax(), 'keywords'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any article published on '2021-01-05'? 
 Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object) [/INST] (df['date'] == '2021-01-05').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the material type of the article with the shortest headline? 
 Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object) [/INST] df.loc[df['headline'].str.len().idxmin(), 'material_type'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the material type of the article with the most number of keywords? 
 Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object) [/INST] df.loc[df['keywords'].apply(len).idxmax(), 'material_type'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the material types of the bottom 2 articles with the shortest headlines. 
 Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object) [/INST] df.assign(headline_length=df['headline'].str.len()).nsmallest(2, 'headline_length')['material_type'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the material types of the top 5 articles with the most number of keywords. 
 Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object) [/INST] df.assign(keyword_count=df['keywords'].apply(lambda x: len(x))).nlargest(5, 'keyword_count')['material_type'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the number of keywords in the bottom 3 articles with the shortest headlines. 
 Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object) [/INST] df.assign(headline_length=df['headline'].str.len()).nsmallest(3, 'headline_length')['keywords'].apply(lambda x: len(x.split(',') if isinstance(x, str) else [])).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Provide the number of keywords in the bottom 2 articles with the least number of keywords. 
 Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object) [/INST] df['keywords'].apply(lambda x: len(x.split(','))).nsmallest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the 'USA' the most common entry in the 'Geographies' column? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] (df['Geographies'].mode()[0] == 'USA') </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any participants who are unemployed with a bachelor's degree from Africa? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df[(df['Labeled Clusters'] == 'Unemployed') & (df['Geographies'].str.contains('Africa'))].any().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do all participants recommend Python as the first programming language? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] (df['What programming language would you recommend an aspiring data scientist to learn first?'] == 'Python').all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique job titles are represented in the dataset? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['Select the title most similar to your current role (or most recent title if retired)'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the median of the average number of years participants have used machine learning methods? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['(Average) For how many years have you used machine learning methods?'].median() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common computing platform used for data science projects? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['What type of computing platform do you use most often for your data science projects?'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which country has the second highest number of participants? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['In which country do you currently reside?'].value_counts().nlargest(2).index[-1] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which title is the most common among participants? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['Select the title most similar to your current role (or most recent title if retired)'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: list the top 4 most common job titles. 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['Select the title most similar to your current role (or most recent title if retired)'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Report the top 4 age ranges of participants by frequency 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['What is your age (years)?'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Identify the 5 highest yearly compensations. 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['(Average) What is your current yearly compensation (approximate $USD)?'].nlargest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Report the 5 most common sizes of the company where participants work. 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['What is the size of the company where you are employed?'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there more reviews with rating 5 from 'GB' than 'US'? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] (df[(df['country_code'] == 'GB') & (df['rating'] == 5)].shape[0] > df[(df['country_code'] == 'US') & (df['rating'] == 5)].shape[0]) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the average rating for 'Wise' in 'GB' above 4? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] (df[(df['Company'] == 'Wise') & (df['country_code'] == 'GB')]['rating'].mean() > 4) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do any reviews originate from 'AO'? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['country_code'].eq('AO').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Did any reviews receive a rating of 1? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['rating'].eq(1).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the total number of reviews for 'Wise'? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df[df['Company'] == 'Wise'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique countries gave 'Wise' a rating of 5? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df[(df['Company'] == 'Wise') & (df['rating'] == 5)]['country_code'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest rating received? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['rating'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the average rating across all reviews? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['rating'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which company received the most 5-star reviews? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df[df['rating'] == 5]['Company'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: From which country did 'Wise' receive the most reviews? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df[df['Company'] == 'Wise']['country_code'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 3 countries with the most 5-star reviews for 'Wise'? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df[(df['Company'] == 'Wise') & (df['rating'] == 5)]['country_code'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the 2 companies represented in the dataset? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['Company'].unique().tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 most common countries? If two or more have the same number order them alphabetically. 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['country_code'].value_counts().sort_index().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 most common ratings? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['rating'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 least common ratings? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['rating'].value_counts().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any customer with a PhD education level? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Education'].str.contains('PhD').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do we have any customers who are married? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Marital_Status'].eq('Married').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any customer with income higher than 100000? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] (df['Income'] > 100000).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Has any customer made more than 10 web purchases? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] (df['NumWebPurchases'] > 10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many customers do we have in the dataset? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['ID'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the average income of our customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Income'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the maximum number of web purchases made by a customer? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['NumWebPurchases'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the minimum recency of purchase among the customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Recency'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common education level among our customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Education'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common marital status among our customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Marital_Status'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Who is the customer with the highest income? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df.loc[df['Income'].idxmax(), 'ID'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Who is the customer with the most recent purchase? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df.loc[df['Recency'].idxmin(), 'ID'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Who are the 3 customers with the highest income? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df.nlargest(3, 'Income')['ID'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 most common education levels among our customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Education'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 most common marital statuses among our customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Marital_Status'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Who are the 3 customers with the most web purchases? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df.nlargest(3, 'NumWebPurchases')['ID'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 income values among our customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Income'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 recency values among our customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Recency'].nlargest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the bottom 3 income values among our customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df['Income'].nsmallest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the bottom 2 recency values among our customers? 
 Dataset Columns: ID (uint16), Year_Birth (uint16), Education (category, unique_values: [Graduation, PhD, Master, Basic, 2n Cycle]), Marital_Status (category, unique_values: [Single, Together, Married, Divorced, Widow, Alone, Absurd, YOLO]), Income (float64), Kidhome (uint8, unique_values: [0, 1, 2]), Teenhome (uint8, unique_values: [0, 1, 2]), Dt_Customer (datetime64[us), UTC], Recency (uint8), MntWines (uint16), MntFruits (uint8), MntMeatProducts (uint16), MntFishProducts (uint16), MntSweetProducts (uint16), MntGoldProds (uint16), NumDealsPurchases (uint8), NumWebPurchases (uint8), NumCatalogPurchases (uint8), NumStorePurchases (uint8), NumWebVisitsMonth (uint8), AcceptedCmp3 (uint8, unique_values: [0, 1]), AcceptedCmp4 (uint8, unique_values: [0, 1]), AcceptedCmp5 (uint8, unique_values: [0, 1]), AcceptedCmp1 (uint8, unique_values: [0, 1]), AcceptedCmp2 (uint8, unique_values: [0, 1]), Complain (uint8, unique_values: [0, 1]), Z_CostContact (uint8, unique_values: [3]), Z_Revenue (uint8, unique_values: [11]), Response (uint8, unique_values: [1, 0]) [/INST] df.nsmallest(2, 'Recency')['Recency'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any customer with a high salary? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df['salary'].eq('high').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do we have any employees who suffered a work accident? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df['Work Accident'].eq('Yes').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any employee with more than 100 hours per month on average? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df['Average Monthly Hours'].gt(100).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does any employee have a satisfaction level above 0.9? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] (df['Satisfaction Level'] > 0.9).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many employees do we have in the dataset? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] len(df) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the median satisfaction level of our employees? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df['Satisfaction Level'].median() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common marital status among the employees? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df['Marital_Status'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 satisfaction levels? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df['Satisfaction Level'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 most common Work Accident statuses among our employees? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df['Work Accident'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 most common marital statuses among our employees? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df['Marital_Status'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the highest 3 years spent in the company?  
 Dataset Columns: Left; category, Satisfaction Level; float64, Work Accident; category, Average Monthly Hours; uint16, Last Evaluation; float64, Years in the Company; uint8, salary; category, Department; category, Number of Projects; uint8, Promoted in the last 5 years?; category, Date Hired; datetime64[ns, UTC], Marital_Status; category [/INST] df['Years in the Company'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 departments with more 'medium' salary levels? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df[df['salary'] == 'medium']['Department'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the lowest 2 satisfaction levels among the employees who have not had a work accident? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df[df['Work Accident'] == 'No']['Satisfaction Level'].nsmallest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any country with a Ladder score above 7.5, a Generosity score above 0.2, and a Social support score above 0.7? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[(df['Ladder score'] > 7.5) & (df['Generosity'] > 0.2) & (df['Social support'] > 0.7)].any().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any country with a Social support score below 0.5? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] (df['Social support'] < 0.5).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the average Ladder score among the countries in Western Europe with a Generosity score above 0.2 and a Social support score above 0.7? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[(df['Regional indicator'] == 'Western Europe') & (df['Generosity'] > 0.2) & (df['Social support'] > 0.7)]['Ladder score'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the average Perceptions of corruption score among the countries in Sub-Saharan Africa with a Ladder score below 5 and a Social support score below 0.5? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[(df['Regional indicator'] == 'Sub-Saharan Africa') & (df['Ladder score'] < 5) & (df['Social support'] < 0.5)]['Perceptions of corruption'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the maximum Generosity score among the countries? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df['Generosity'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the minimum Social support score among the countries? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df['Social support'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which region has the highest number of countries with a Ladder score above 7 and a Generosity score above 0.2? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[(df['Ladder score'] > 7) & (df['Generosity'] > 0.2)]['Regional indicator'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which region accounts for the most countries with a Generosity score above 0.2? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[df['Generosity'] > 0.2]['Regional indicator'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: In which region are the majority of countries with a Perceptions of corruption score below 0.5 located? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[df['Perceptions of corruption'] < 0.5]['Regional indicator'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: In which region can you find the majority of countries with a Social support score above 0.7? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[df['Social support'] > 0.7]['Regional indicator'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Can you name the three regions that have the most countries with a Ladder score above 7 and a Generosity score above 0.2? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[(df['Ladder score'] > 7) & (df['Generosity'] > 0.2)]['Regional indicator'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 regions with the most countries with a Generosity score above 0.2? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[df['Generosity'] > 0.2]['Regional indicator'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Identify the three highest Ladder scores from countries in Western Europe that have a Generosity score above 0.2 and a Social support score above 0.7. 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[(df['Regional indicator'] == 'Western Europe') & (df['Generosity'] > 0.2) & (df['Social support'] > 0.7)].nlargest(3, 'Ladder score')['Ladder score'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 Perceptions of corruption scores among the countries in Sub-Saharan Africa? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[df['Regional indicator'] == 'Sub-Saharan Africa']['Perceptions of corruption'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 Generosity scores among the countries in Western Europe? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[df['Regional indicator'] == 'Western Europe'].nlargest(3, 'Generosity')['Generosity'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 Social support scores among the countries in Sub-Saharan Africa? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[df['Regional indicator'] == 'Sub-Saharan Africa']['Social support'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the three lowest Ladder scores in Western Europe? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[df['Regional indicator'] == 'Western Europe'].nsmallest(3, 'Ladder score')['Ladder score'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the three lowest Perceptions of corruption scores in Sub-Saharan Africa? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[df['Regional indicator'] == 'Sub-Saharan Africa'].nsmallest(3, 'Perceptions of corruption')['Perceptions of corruption'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the song with the highest rank from 1965? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] (df.loc[df['Rank'].idxmax(), 'Year'] == 1965) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the artist of the song with the highest rank the same as the artist of the song with the lowest rank? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df.loc[df['Rank'].idxmin(), 'Artist'] == df.loc[df['Rank'].idxmax(), 'Artist'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there songs without lyrics? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df['Lyrics'].isnull().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many songs were produced in 1965? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df[df['Year'] == 1965].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: In which year was the song with the highest rank produced? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df.loc[df['Rank'] == df['Rank'].min(), 'Year'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the rank of the song with the longest lyrics? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df.loc[df['Lyrics'].str.len().idxmax(), 'Rank'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique artists are there in the dataset? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df['Artist'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Who is the artist of the song with the highest rank? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df.loc[df['Rank'] == df['Rank'].min(), 'Artist'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which song's lyrics contain the word 'love' the most times? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df.loc[df['Lyrics'].str.count('love').idxmax(), 'Song'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the title of the top song produced in the earliest year? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df.loc[df['Year'] == df['Year'].min()].nsmallest(1, 'Rank')['Song'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 songs by rank produced in the most recent year? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df[df['Year'] == df['Year'].max()].nsmallest(4, 'Rank')['Song'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the years of production of the bottom 4 ranked songs? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df.nsmallest(4, 'Rank')['Year'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the ranks of the 2 songs produced in the earliest year? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df[df['Year'] == df['Year'].min()].nsmallest(2, 'Rank')['Rank'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the song with the highest rank from 1965 by the Beatles? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] (df.loc[df['Rank'].idxmax(), 'Year'] == 1965) and (df.loc[df['Rank'].idxmax(), 'Artist'] == 'The Beatles') </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which artist has the song with the highest rank in 1965? 
 Dataset Columns: Rank (uint8), Song (category), Artist (category), Year (uint16), Lyrics (object), Source (float64, unique_values: [3.0, 1.0, 5.0]) [/INST] df[df['Year'] == 1965].nsmallest(1, 'Rank')['Artist'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there records where the 'count' exceeds 20,000? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] (df['count'] > 20000).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do we have any records originating from 'Jefferson'? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df['name_origin'].eq('Jefferson').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there destinations with the name 'Baldwin'? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df['name_dest'].str.contains('Baldwin').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there records where the latitude of the destination is greater than 60? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] (df['lat_dest'] > 60).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique destinations are there in the dataset? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df['dest'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On average, how many times is each origin-destination pair reported? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df['count'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest count value in the dataset? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df['count'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique origin names are there in the dataset? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df['name_origin'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: To which destination do we find the highest 'count' reported? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df.loc[df['count'].idxmax(), 'name_dest'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which destination has the highest longitude? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df.loc[df['lon_dest'].idxmax(), 'name_dest'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 origins with the highest average count? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df.groupby('name_origin')['count'].mean().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the 4 destinations with the lowest average count? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df.groupby('name_dest')['count'].mean().nsmallest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 5 origins with the highest average latitude values. 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df.groupby('name_origin')['lat_origin'].mean().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 2 origins have the lowest non-null average longitude values? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df.groupby('name_origin')['lon_origin'].mean().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the highest 5 count values. 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df['count'].nlargest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 highest latitude values for destinations? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df['lat_dest'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Rank the lowest 4 longitude values for origins. 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df['lon_origin'].nsmallest(4).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 6 destination IDs have the highest average counts? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df.groupby('dest')['count'].mean().nlargest(6).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there talks with more than a million views? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] (df['views'] > 1000000).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a talk by 'Elon Musk'? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df['speaker_1'].str.contains('Elon Musk').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any TEDx events included? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] (df['event'].str.contains('TEDx')).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique speakers are there in the dataset? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df['speaker_1'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the average number of views for the talks? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df['views'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the maximum duration of a talk (in seconds)? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df['duration'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many talks have more than 500 comments? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df[df['comments'] > 500].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which event has the highest average views? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df.groupby('event')['views'].mean().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which speaker's talk has the most comments? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df.loc[df['comments'].idxmax(), 'speaker_1'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which talk's title has the least views? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df.loc[df['views'].idxmin(), 'title'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: In which event was the longest talk held? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df.loc[df['duration'].idxmax(), 'event'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 4 events with the highest average number of comments? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df.groupby('event')['comments'].mean().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 3 most frequent speakers in the dataset. If two have the same count go by alphabetical order.  
 Dataset Columns: talk_id; uint16, title; object, speaker_1; category, all_speakers; object, occupations; category, about_speakers; object, views; uint32, recorded_date; datetime64[us, UTC], published_date; datetime64[us, UTC], event; category, native_lang; category, available_lang; object, comments; float64, duration; uint16, topics; object, related_talks; object, url; category, description; object, transcript; object [/INST] df['speaker_1'].value_counts().sort_index().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 5 events have the shortest average talk durations? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df.groupby('event')['duration'].mean().nsmallest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 most viewed talks' view counts? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df.nlargest(4, 'views')['views'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 3 shortest talk durations in the dataset. 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df['duration'].nsmallest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 highest number of comments? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df.nlargest(5, 'comments')['comments'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the view counts of the 6 least viewed talks. 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df.nsmallest(6, 'views')['views'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is it true that the oldest person in the dataset has a stroke? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df.loc[df['age'].idxmax(), 'stroke'] == 1 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all people with heart diseases married? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] (df[df['heart_disease'] == 1]['ever_married'] == 'Yes').all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the average glucose level higher for males than females? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df.groupby('gender')['avg_glucose_level'].mean().loc['Male'] > df.groupby('gender')['avg_glucose_level'].mean().loc['Female'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many people in the dataset have a stroke? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df['stroke'].sum() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average age of people who smoke? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['smoking_status'] == 'smokes']['age'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest glucose level recorded in the dataset? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df['avg_glucose_level'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique 'work_type' categories are there in the dataset? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df['work_type'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common work type among stroke patients? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['stroke'] == 1]['work_type'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the smoking status of the youngest person in the dataset? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df.loc[df['age'] == df['age'].min(), 'smoking_status'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the residence type of the person with the highest BMI? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df.loc[df['bmi'] == df['bmi'].max(), 'Residence_type'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the gender of the person with the lowest glucose level? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df.loc[df['avg_glucose_level'].idxmin(), 'gender'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 work types among people with heart diseases? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['heart_disease'] == 1]['work_type'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 most common smoking statuses among people with a stroke? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['stroke'] == 1]['smoking_status'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 residence types of people with hypertension? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['hypertension'] == 1]['Residence_type'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 work types among people who have never married? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['ever_married'] == 'No']['work_type'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the oldest 5 ages of people with strokes? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['stroke'] == 1].nlargest(5, 'age')['age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 lowest BMIs among people who smoke? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['smoking_status'] == 'smokes'].nsmallest(3, 'bmi')['bmi'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 glucose levels of people who have heart diseases? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['heart_disease'] == 1].nlargest(4, 'avg_glucose_level')['avg_glucose_level'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 6 highest ages of people who have never married? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['ever_married'] == 'No'].nlargest(6, 'age')['age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any reflections with more than 10 sentences? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] (df['num_sentence'] > 10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a reflection from 'USA' with over 5 sentences? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] (df[(df['country'] == 'USA') & (df['num_sentence'] > 5)].shape[0] > 0) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any reflections categorized as 'affection'? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df['predicted_category'].eq('affection').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any married individuals who reflected on 'exercise'? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df[(df['marital'] == 'married') & (df['predicted_category'] == 'exercise')].shape[0] > 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique reflection periods are there? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df['reflection_period'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On average, how many sentences are there in the reflections? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df['num_sentence'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest age of an individual in the dataset? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df['age'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many reflections are from 'IND'? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df[df['country'] == 'IND'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which country has the highest average number of sentences in their reflections? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df.groupby('country')['num_sentence'].mean().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which gender has the most reflections categorized as 'affection'? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df[df['predicted_category'] == 'affection']['gender'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: From which country is the oldest individual who reflected? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df.loc[df['age'] == df['age'].max(), 'country'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which marital status has the most reflections on 'bonding'? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df[df['predicted_category'] == 'bonding']['marital'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 3 countries with the highest average number of sentences in their reflections? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df.groupby('country')['num_sentence'].mean().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 4 most common predicted categories in the dataset. 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df['predicted_category'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 5 countries have the youngest average age of reflectors? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df.groupby('country')['age'].mean().nsmallest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List 2 genders with the most number of reflections. 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df['gender'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the lowest 4 number of sentences? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df.nsmallest(4, 'num_sentence')['num_sentence'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 3 highest ages in the dataset. 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df['age'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is it true that the youngest participant has met their match? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df.loc[df['age'] == df['age'].min(), 'match'].iloc[0] == 1 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do all people who got a match have the same race as their partner? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] (df[df['match'] == 1]['samerace'] == 1).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the average age of participants who got a match higher than those who didn't? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] (df[df['match'] == 1]['age'].mean()) > (df[df['match'] == 0]['age'].mean()) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many participants had a match? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df['match'].sum() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average age of participants who have the same race as their partner? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['samerace'] == 1]['age'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest number of matches expected by any participant in the dataset? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df['expected_num_matches'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique 'race' categories are there in the dataset? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df['race'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common race among participants who got a match? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['match'] == 1]['race'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the gender of the youngest participant in the dataset? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df.loc[df['age'] == df['age'].min(), 'gender'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the race of the participant with the highest number of expected matches? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df.loc[df['expected_num_matches'].idxmax(), 'race'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the wave of the participant with the youngest age? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df.loc[df['age'].idxmin(), 'wave'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 waves among people who got a match? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['match'] == 1]['wave'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 most common races among people who expected more than 5 matches? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['expected_num_matches'] > 5]['race'].value_counts().head(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 waves of people who have the same race as their partner? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['samerace'] == 1]['wave'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 genders among people who expected no match? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['expected_num_matches'] == 0]['gender'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 5 ages of participants who got a match? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['match'] == 1]['age'].nlargest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 lowest numbers of matches expected by people who got a match? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['match'] == 1]['expected_num_matches'].nsmallest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 ages of people who have the same race as their partner? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['samerace'] == 1].nlargest(4, 'age')['age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 6 youngest ages of participants who expected no match? 
 Dataset Columns: has_null (uint8, unique_values: [0, 1]), wave (uint8), gender (category, unique_values: [female, male]), age (float64), age_o (float64), d_age (uint8), d_d_age (object, unique_values: [['4-6'], ['0-1'], ['2-3'], ['7-37']]), race (category, unique_values: [asian/pacific islander/asian-american, european/caucasian-american, other, latino/hispanic american, black/african american]), race_o (category, unique_values: [european/caucasian-american, asian/pacific islander/asian-american, latino/hispanic american, other, black/african american]), samerace (uint8, unique_values: [0, 1]), importance_same_race (float64), importance_same_religion (float64), d_importance_same_race (object, unique_values: [['2-5'], ['6-10'], ['0-1']]), d_importance_same_religion (object, unique_values: [['2-5'], ['0-1'], ['6-10']]), field (category), pref_o_attractive (float64), pref_o_sincere (float64), pref_o_intelligence (float64), pref_o_funny (float64), pref_o_ambitious (float64), pref_o_shared_interests (float64), d_pref_o_attractive (object, unique_values: [['21-100'], ['16-20'], ['0-15']]), d_pref_o_sincere (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_intelligence (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_pref_o_funny (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_pref_o_ambitious (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_pref_o_shared_interests (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive_o (float64), sinsere_o (float64), intelligence_o (float64), funny_o (float64), ambitous_o (float64), shared_interests_o (float64), d_attractive_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_sinsere_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_intelligence_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambitous_o (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_shared_interests_o (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_important (float64), sincere_important (float64), intellicence_important (float64), funny_important (float64), ambtition_important (float64), shared_interests_important (float64), d_attractive_important (object, unique_values: [['0-15'], ['21-100'], ['16-20']]), d_sincere_important (object, unique_values: [['16-20'], ['0-15'], ['21-100']]), d_intellicence_important (object, unique_values: [['16-20'], ['21-100'], ['0-15']]), d_funny_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_ambtition_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), d_shared_interests_important (object, unique_values: [['0-15'], ['16-20'], ['21-100']]), attractive (float64, unique_values: [6.0, 7.0, 8.0, 5.0, 9.0, 4.0, 10.0, 3.0, 2.0]), sincere (float64, unique_values: [8.0, 5.0, 9.0, 3.0, 7.0, 6.0, 4.0, 2.0, 10.0]), intelligence (float64, unique_values: [8.0, 10.0, 9.0, 6.0, 5.0, 7.0, 3.0, 2.0, 4.0]), funny (float64, unique_values: [8.0, 9.0, 7.0, 10.0, 6.0, 5.0, 3.0, 4.0]), ambition (float64, unique_values: [7.0, 3.0, 8.0, 5.0, 9.0, 6.0, 4.0, 10.0, 2.0]), d_attractive (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_intelligence (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_ambition (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), attractive_partner (float64), sincere_partner (float64), intelligence_partner (float64), funny_partner (float64), ambition_partner (float64), shared_interests_partner (float64), d_attractive_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_sincere_partner (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_intelligence_partner (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_funny_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_ambition_partner (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_shared_interests_partner (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), sports (float64), tvsports (float64), exercise (float64), dining (float64), museums (float64), art (float64), hiking (float64), gaming (float64), clubbing (float64), reading (float64), tv (float64), theater (float64), movies (float64), concerts (float64), music (float64), shopping (float64), yoga (float64), d_sports (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_tvsports (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_exercise (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_dining (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_museums (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_art (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_hiking (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_gaming (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_clubbing (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), d_reading (object, unique_values: [['6-8'], ['9-10'], ['0-5']]), d_tv (object, unique_values: [['9-10'], ['0-5'], ['6-8']]), d_theater (object, unique_values: [['0-5'], ['9-10'], ['6-8']]), d_movies (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_concerts (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_music (object, unique_values: [['9-10'], ['6-8'], ['0-5']]), d_shopping (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_yoga (object, unique_values: [['0-5'], ['6-8'], ['9-10']]), interests_correlate (float64), d_interests_correlate (object, unique_values: [['0-0.33'], ['0.33-1'], ['-1-0']]), expected_happy_with_sd_people (float64), expected_num_interested_in_me (float64), expected_num_matches (float64), d_expected_happy_with_sd_people (object, unique_values: [['0-4'], ['7-10'], ['5-6']]), d_expected_num_interested_in_me (object, unique_values: [['0-3'], ['4-9'], ['10-20']]), d_expected_num_matches (object, unique_values: [['3-5'], ['0-2'], ['5-18']]), like (float64), guess_prob_liked (float64), d_like (object, unique_values: [['6-8'], ['0-5'], ['9-10']]), d_guess_prob_liked (object, unique_values: [['5-6'], ['0-4'], ['7-10']]), met (float64, unique_values: [0.0, 1.0, 3.0, 5.0, 7.0, 8.0, 6.0]), decision (uint8, unique_values: [1, 0]), decision_o (uint8, unique_values: [0, 1]), match (uint8, unique_values: [0, 1]) [/INST] df[df['expected_num_matches'] == 0]['age'].nsmallest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any tweets with more than 10 retweets? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] (df['retweet_count'] > 10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any tweets categorized with 'Late Flight' as the negative reason? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df['negativereason'].eq('Late Flight').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any tweets from 'Eastern Time (US & Canada)' timezone with positive sentiment? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df[(df['user_timezone'] == 'Eastern Time (US & Canada)') & (df['airline_sentiment'] == 'positive')].shape[0] > 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique user timezones are there in the dataset? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df['user_timezone'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On average, what is the sentiment confidence of the tweets? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df['airline_sentiment_confidence'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the maximum number of retweets a tweet has received? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df['retweet_count'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many tweets are from 'Virgin America' airline? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df[df['airline'] == 'Virgin America'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which airline has the highest average sentiment confidence? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df.groupby('airline')['airline_sentiment_confidence'].mean().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which negative reason is most commonly associated with 'American' airline? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df[df['airline'] == 'American']['negativereason'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: From which timezone is the tweet with the highest sentiment confidence? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df.loc[df['airline_sentiment_confidence'].idxmax(), 'user_timezone'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which airline has the most tweets with negative sentiment? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df[df['airline_sentiment'] == 'negative']['airline'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 3 airlines with the highest average sentiment confidence? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df.groupby('airline')['airline_sentiment_confidence'].mean().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 3 user timezones have the most number of tweets? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df['user_timezone'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 2 airlines with the least number of tweets in the dataset. 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df['airline'].value_counts().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 3 highest retweet counts in the dataset. 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df['retweet_count'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 6 highest sentiment confidence values. 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df.nlargest(6, 'airline_sentiment_confidence')['airline_sentiment_confidence'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is it true that the student with the highest number of absences is from a rural area? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df.loc[df['absences'].idxmax(), 'address'] == 'R' </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all students who are in a romantic relationship older than 17? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] (df[df['romantic'] == 'yes']['age'] > 17).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the average final grade (G3) of students who consume a lot of alcohol (Dalc > 2) lower than those who don't? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] (df[df['Dalc'] > 2]['G3'].mean() < df[df['Dalc'] <= 2]['G3'].mean()) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do all students who have both parents at home (Pstatus = 'T') have more than 3 free time after school (freetime > 3)? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] (df[df['Pstatus'] == 'T']['freetime'] > 3).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many students have their mother's education (Medu) level above 3? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df[df['Medu'] > 3].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average age of students who want to take higher education (higher = 'yes')? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df[df['higher'] == 'yes']['age'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest number of absences among students? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df['absences'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique schools are there in the dataset? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df['school'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common mother's job among students who want to take higher education? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df[df['higher'] == 'yes']['Mjob'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the gender of the student with the highest final grade (G3)? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df.loc[df['G3'].idxmax(), 'sex'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the school of the student with the highest number of absences? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df.loc[df['absences'].idxmax(), 'school'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the family size of the student with the highest final grade (G3)? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df.loc[df['G3'].idxmax(), 'famsize'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 reasons for choosing a school among students who want to take higher education? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df[df['higher'] == 'yes']['reason'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 most common mother's jobs among students with a final grade above 10? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df[df['G3'] > 10]['Mjob'].value_counts().head(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 schools among students with absences above 10? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df[df['absences'] > 10]['school'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 family relations among students with a final grade below 10? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df[df['G3'] < 10]['famrel'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 5 ages of students who want to take higher education? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df[df['higher'] == 'yes']['age'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 ages of students whose mother's education level is above 3? 
 Dataset Columns: school (category, unique_values: [GP, MS]), sex (category, unique_values: [F, M]), age (uint8, unique_values: [18, 17, 15, 16, 19, 22, 20, 21]), address (category, unique_values: [U, R]), famsize (category, unique_values: [GT3, LE3]), Pstatus (category, unique_values: [A, T]), Medu (uint8, unique_values: [4, 1, 3, 2, 0]), Fedu (uint8, unique_values: [4, 1, 2, 3, 0]), Mjob (category, unique_values: [at_home, health, other, services, teacher]), Fjob (category, unique_values: [teacher, other, services, health, at_home]), reason (category, unique_values: [course, other, home, reputation]), guardian (category, unique_values: [mother, father, other]), traveltime (uint8, unique_values: [2, 1, 3, 4]), studytime (uint8, unique_values: [2, 3, 1, 4]), failures (uint8, unique_values: [0, 3, 2, 1]), schoolsup (category, unique_values: [yes, no]), famsup (category, unique_values: [no, yes]), paid (category, unique_values: [no, yes]), activities (category, unique_values: [no, yes]), nursery (category, unique_values: [yes, no]), higher (category, unique_values: [yes, no]), internet (category, unique_values: [no, yes]), romantic (category, unique_values: [no, yes]), famrel (uint8, unique_values: [4, 5, 3, 1, 2]), freetime (uint8, unique_values: [3, 2, 4, 1, 5]), goout (uint8, unique_values: [4, 3, 2, 1, 5]), Dalc (uint8, unique_values: [1, 2, 5, 3, 4]), Walc (uint8, unique_values: [1, 3, 2, 4, 5]), health (uint8, unique_values: [3, 5, 1, 2, 4]), absences (uint8), G1 (uint8), G2 (uint8), G3 (uint8) [/INST] df[df['Medu'] > 3]['age'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is it true that the oldest company (based on approval year) is from an urban (UrbanRural=1) area? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df.loc[df['ApprovalFY'] == df['ApprovalFY'].min(), 'UrbanRural'].iloc[0] == 1 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all companies with more than 10 employees located in an urban (UrbanRural=1) area? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] (df[df['NoEmp'] > 10]['UrbanRural'] == 1).all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all companies with a default amount greater than $250,000 in the food sector? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] (df[df['default_amount'] > 250000]['Sector'] == 'Food').all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the average number of retained jobs higher for companies located in urban (UrbanRural=1) areas than those in rural (UrbanRural=0) areas? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] (df[df['UrbanRural'] == 1]['RetainedJob'].mean() > df[df['UrbanRural'] == 0]['RetainedJob'].mean()) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many companies have a franchise code of 1? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df[df['FranchiseCode'] == 1].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest approval year in the dataset? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df['ApprovalFY'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique sectors are there in the dataset? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df['Sector'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common sector among companies with a franchise code of 1? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df[df['FranchiseCode'] == 1]['Sector'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the state of the company with the highest disbursement gross? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df.loc[df['DisbursementGross'].idxmax(), 'State'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the bank for the company with the highest default amount? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df.loc[df['default_amount'].idxmax(), 'Bank'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the sector of the company with the most number of employees? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df.loc[df['NoEmp'].idxmax(), 'Sector'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 sectors among companies with a franchise code of 1? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df[df['FranchiseCode'] == 1]['Sector'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 most common banks among companies with an approval year earlier than 2000? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df[df['ApprovalFY'] < 2000]['Bank'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 states among companies with a disbursement gross greater than $1,000,000? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df[df['DisbursementGross'] > 1000000]['State'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 2 sectors among companies with a default amount greater than $500,000? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df[df['default_amount'] > 500000]['Sector'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 approval years for companies in the state of CA? 
 Dataset Columns: LoanNr_ChkDgt (int64), Name (category), Sector (category), City (category), State (category), Zip (uint32), Bank (category), BankState (category), NAICS (uint32), ApprovalFY (uint16), NoEmp (uint16), NewExist (float64, unique_values: [1.0, 2.0, 0.0]), CreateJob (uint16), RetainedJob (uint16), FranchiseCode (uint32), UrbanRural (uint8, unique_values: [0, 1, 2]), DisbursementGross (uint32), GrAppv (uint32), SBA_Appv (uint32), default_amount (uint32) [/INST] df[df['State'] == 'CA']['ApprovalFY'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is it true that the oldest movie (based on year) in the drama genre is from the USA? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] (df[df['genre'].str.contains('Drama')].sort_values(by='year').iloc[0]['country'] == 'USA') </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all movies from the USA, with more than 80 minutes duration in the drama genre, in English? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[(df['country'] == 'USA') & (df['duration'] > 80) & (df['genre'].str.contains('Drama'))]['language'].eq('English').all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is the average duration of English language movies from the USA longer than those from non-USA countries? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] (df[(df['language'] == 'English') & (df['country'] == 'USA')]['duration'].mean() > df[(df['language'] == 'English') & (df['country'] != 'USA')]['duration'].mean()) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many movies from the USA, in the drama genre, have a metascore of 100? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[(df['country'] == 'USA') & (df['genre'].str.contains('Drama')) & (df['metascore'] == 100)].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the latest year for English language movies from the USA in the dataset? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[(df['country'] == 'USA') & (df['language'] == 'English')]['year'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common genre among English language movies from the USA with a metascore of 100? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[(df['metascore'] == 100) & (df['country'] == 'USA') & (df['language'] == 'English')]['genre'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the language of the movie from the USA with the highest metascore? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[df['country'] == 'USA'].nlargest(1, 'metascore')['language'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the genre of the English language movie from the USA with the most votes? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[(df['country'] == 'USA') & (df['language'] == 'English')].loc[df['votes'].idxmax(), 'genre'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 5 most common countries among English language movies with a year earlier than 2000? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[(df['language'] == 'English') & (df['year'] < 2000)]['country'].value_counts().head(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 5 years for English language movies from the USA in the drama genre? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[(df['language'] == 'English') & (df['country'] == 'USA') & (df['genre'].str.contains('Drama'))]['year'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does the song with the longest duration also have the highest energy? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.loc[df['duration_ms'].idxmax(), 'energy'] == df['energy'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does the song with the highest energy also have the highest popularity? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] (df['energy'].idxmax() == df['popularity'].idxmax()) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the maximum popularity score in the dataset? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df['popularity'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many songs were released in the year with the most releases? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df['release_year'].value_counts().max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Who is the artist with the highest popularity score? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.loc[df['popularity'].idxmax(), 'artists'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: In which month was the most popular song released? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.loc[df['popularity'].idxmax(), 'release_month'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the name of the longest song? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.loc[df['duration_ms'].idxmax(), 'name'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the name of the song with the most energy? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.loc[df['energy'].idxmax(), 'name'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the the 2 shortest songs in the dataset? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.nsmallest(2, 'duration_ms')['name'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 3 longest song durations? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.nlargest(3, 'duration_ms')['duration_ms'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 latest release years in the dataset? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df['release_year'].nlargest(4).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 energy scores in the dataset? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df['energy'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does the athlete with the highest weight also participate in the sport with the most athletes? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] (df['Sport'].value_counts().idxmax() == df.loc[df['Weight'].idxmax(), 'Sport']) </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the average age of athletes in the dataset? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df['Age'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the maximum weight of athletes in the dataset? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df['Weight'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the name of the athlete who participated in the most number of games? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df['Name'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the sport of the athlete with the most medals? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df[df['Name'] == df['Name'].value_counts().idxmax()]['Sport'].iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top five most common ages of athletes? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df['Age'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 most common years of participation? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df['Year'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the three most common heights of athletes? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df['Height'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does the dataset contain customers who are under the age of 18? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] (df['customer_age'] < 18).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any customers with a total transaction amount of zero? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] (df['total_trans_amt'] == 0).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does the dataset include customers with a credit limit exceeding $50,000? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] (df['credit_limit'] > 50000).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any customers in the dataset who are inactive for more than 12 months? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] (df['months_inactive_12_mon'] > 12).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest credit limit in the dataset? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['credit_limit'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the maximum total transaction amount recorded? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['total_trans_amt'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the largest total revolving balance in the dataset? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['total_revolving_bal'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest customer age in the dataset? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['customer_age'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common level of education among the customers? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['education_level'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common income category of the customers? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['income_category'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which gender is most represented among the customers? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['gender'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common attrition flag value? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['attrition_flag'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 most common education levels among the customers? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['education_level'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are 4 most frequent income categories? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['income_category'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 3 most frequent income categories? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['income_category'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the two most frequent income categories? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df['income_category'].value_counts().nlargest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How old are the 5 oldest customers in the dataset? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df.nlargest(5, 'customer_age')['customer_age'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any job positions available in 'New York, NY'? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] (df['Location'] == 'New York, NY').any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any job listings from companies founded before 1900? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] (df['Founded'] < 1900).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any job listings that require Python skills? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] (df['python_yn'] == 1).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a job listing for a 'Data Engineer' role? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['Job Title'].str.contains('Data Engineer', case=False).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique job titles are listed? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['Job Title'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On average, how old are the companies that have job listings? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['age'].mean() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest rating a company has received? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['Rating'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many job listings are there from 'Government' type of ownership? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df[df['Type of ownership'] == 'Government'].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which job title has the highest average salary? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df.groupby('Job Title')['avg_salary'].mean().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which state has the most number of job listings? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['job_state'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: From which sector is the job listing with the highest salary? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df.loc[df['avg_salary'].idxmax(), 'Sector'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which company size has the most job listings? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['Size'].mode().iloc[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 3 sectors with the most job listings? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['Sector'].value_counts().nlargest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 4 most common industries in the dataset. 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['Industry'].value_counts().head(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 5 states have the most number of job listings? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['job_state'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 3 company sizes with the least number of job listings. 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['Size'].value_counts().nsmallest(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 average salaries for job titles in the dataset? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df.groupby('Job Title')['avg_salary'].mean().nlargest(4).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the highest 3 ratings given? 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df['Rating'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the average salaries of the 6 most recent companies. 
 Dataset Columns: Job Title (category), Salary Estimate (object), Job Description (object), Rating (float64), Company Name (category), Location (category), Headquarters (category), Size (category, unique_values: [501 to 1000 employees, 10000+ employees, 1001 to 5000 employees, 51 to 200 employees, 201 to 500 employees, 5001 to 10000 employees, 1 to 50 employees, Unknown, -1]), Founded (int16), Type of ownership (category), Industry (category), Sector (category), Revenue (category), Competitors (category), hourly (uint8, unique_values: [0, 1]), employer_provided (uint8, unique_values: [0, 1]), min_salary (uint8), max_salary (uint16), avg_salary (float64), company_txt (category), job_state (category), same_state (uint8, unique_values: [0, 1]), age (int16), python_yn (uint8, unique_values: [1, 0]), R_yn (uint8, unique_values: [0, 1]), spark (uint8, unique_values: [0, 1]), aws (uint8, unique_values: [0, 1]), excel (uint8, unique_values: [1, 0]) [/INST] df.nlargest(6, 'Founded')['avg_salary'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any authors in the dataset who have more followers than people they are following? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] (df['user_followers_count<gx:number>'] > df['user_following_count<gx:number>']).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there any tweet in the dataset that has more replies<gx:number> than retweets<gx:number>? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] (df['replies<gx:number>'] > df['retweets<gx:number>']).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does the dataset contain any tweets that include image links? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['image_links<gx:list[url]>'].notna().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique authors are present in the dataset? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['author_id<gx:category>'].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the highest number of retweets<gx:number> a single tweet has received? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['retweets<gx:number>'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the total number of tweets from verified users? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df[df['user_verified<gx:boolean>'] == True].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which author has the most tweets in the dataset? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['author_id<gx:category>'].value_counts().idxmax() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which language is most commonly used in the tweets? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['lang<gx:category>'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common source of tweets? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['source<gx:text>'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which type of tweet (e.g., original, retweet, quote) is most common in the dataset? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['type<gx:category>'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Who are the top three authors (by ID) with the most followers? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df.nlargest(3, 'user_followers_count<gx:number>')['author_id<gx:category>'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top four most commonly used languages in the tweets. 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['lang<gx:category>'].value_counts().nlargest(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the highest three numbers of followers count present in the dataset? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['user_followers_count<gx:number>'].nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top six numbers of retweets. 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['retweets<gx:number>'].nlargest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the bottom five numbers of replies? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['replies<gx:number>'].nsmallest(5).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Did any children below the age of 18 survive? 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64) [/INST] df[(df['Age'] < 18) & (df['Survived'] == True)].any().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do the majority of respondents have a height greater than 170 cm? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] (df[""What's your height? in cm 📏""] > 170).mean() > 0.5 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique nationalities are present in the dataset? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df[""What's your nationality?""].nunique() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which sexual orientation has the highest representation? 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What\'s your sexual orientation?'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the top 3 most common areas of knowledge. 
 Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? 👶🏻👵🏻 (uint8), What's your nationality? (category), What is your civil status? 💍 (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? 🍼 (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? 🎓 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) 💸 (float64), What's your height? in cm 📏 (uint8), What's your weight? in Kg ⚖️ (float64), What is your body complexity? 🏋️ (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? 👁️ (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? 👩🦰👱🏽 (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? 💇🏻♀️💇🏽♂️ (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? 🧔🏻 (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? 👓 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64) [/INST] df['What area of knowledge is closer to you?'].value_counts().head(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many trips took place in the airport area? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['Airport_fee'].count() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On which date did the first recorded trip occur? 
 Dataset Columns: VendorID (uint8, unique_values: [1, 2]), tpep_pickup_datetime (datetime64[us), UTC], tpep_dropoff_datetime (datetime64[us), UTC], passenger_count (uint8, unique_values: [2, 1, 5, 0, 3, 4, 6]), trip_distance (float64), RatecodeID (uint8, unique_values: [1, 5, 2, 4]), store_and_fwd_flag (category, unique_values: [N, Y]), PULocationID (uint16), DOLocationID (uint16), payment_type (uint8, unique_values: [2, 1, 4, 3]), fare_amount (float64), extra (float64), mta_tax (float64, unique_values: [0.5, 0.0, 0.8]), tip_amount (float64), tolls_amount (uint8, unique_values: [0]), improvement_surcharge (float64, unique_values: [1.0, 0.3, 0.0]), total_amount (float64), congestion_surcharge (float64, unique_values: [2.5]), Airport_fee (float64, unique_values: [0.0]), airport_fee (category, unique_values: []) [/INST] df['tpep_pickup_datetime'].min() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many properties have received the worst possible (0-5) review score for communication? 
 Dataset Columns: neighbourhood_cleansed (category), host_neighbourhood (category), price (category, unique_values: []), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), reviews_per_month (float64), property_type (category), bedrooms (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['email'], ['phone' 'work_email'], [], ['email' 'work_email'], ['None'], ['email' 'phone' 'photographer']]), host_acceptance_rate (category, unique_values: []), host_identity_verified (category, unique_values: [f, t]), beds (float64), amenities (object), minimum_nights (uint16), last_review (datetime64[us), UTC], review_scores_rating (float64), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint16), first_review (datetime64[us), UTC], number_of_reviews (uint16), accommodates (uint8), listing_url (category), last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, within a few hours, within a day, a few days or more]), host_response_rate (category), host_is_superhost (category, unique_values: [f, t]), host_thumbnail_url (category), host_picture_url (category), host_listings_count (float64), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), neighbourhood (category), latitude (float64), longitude (float64), bathrooms (category, unique_values: []), bathrooms_text (category), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2023-03-14 00:00:00+00:00, 2023-03-15 00:00:00+00:00, 2023-03-16 00:00:00+00:00, 2023-03-29 00:00:00+00:00]), UTC], number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category, unique_values: []), calculated_host_listings_count_entire_homes (uint16), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), x (float64), y (float64), price_M0jI (category, unique_values: []) [/INST] df[df['review_scores_communication'] == 0].shape[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any players who joined their current club before they were 18 years old? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] (df['Age<gx:number>'] < 18).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which club has the most players in the dataset? 
 Dataset Columns: ID<gx:number> (uint32), Name<gx:text> (category), Age<gx:number> (uint8), Photo<gx:url> (category), Nationality<gx:category> (category), Overall<gx:number> (uint8), Potential<gx:number> (uint8), Club<gx:category> (category), Value_€<gx:currency> (uint32), Wage_€<gx:currency> (uint32), Preferred Foot<gx:category> (category, unique_values: [Right, Left]), International Reputation<gx:number> (uint8, unique_values: [5, 4, 2, 3, 1]), Weak Foot<gx:number> (uint8, unique_values: [4, 5, 3, 2, 1]), Skill Moves<gx:number> (uint8, unique_values: [3, 4, 5, 2, 1]), Work Rate<gx:category> (category, unique_values: [High/ Medium, High/ High, Medium/ Medium, Medium/ High, Medium/ Low, High/ Low, Low/ High, Low/ Low, Low/ Medium]), Position<gx:category> (category), Joined<gx:date> (category), Contract Valid Until<gx:date> (category), Height_ft<gx:number> (float64), Weight_lbs<gx:number> (uint8), Crossing<gx:number> (uint8), Finishing<gx:number> (uint8), HeadingAccuracy<gx:number> (uint8), ShortPassing<gx:number> (uint8), Volleys<gx:number> (uint8), Dribbling<gx:number> (uint8), Curve<gx:number> (uint8), FKAccuracy<gx:number> (uint8), LongPassing<gx:number> (uint8), BallControl<gx:number> (uint8), Acceleration<gx:number> (uint8), SprintSpeed<gx:number> (uint8), Agility<gx:number> (uint8), Reactions<gx:number> (uint8), Balance<gx:number> (uint8), ShotPower<gx:number> (uint8), Jumping<gx:number> (uint8), Stamina<gx:number> (uint8), Strength<gx:number> (uint8), LongShots<gx:number> (uint8), Aggression<gx:number> (uint8), Interceptions<gx:number> (uint8), Positioning<gx:number> (uint8), Vision<gx:number> (uint8), Penalties<gx:number> (uint8), Composure<gx:number> (uint8), Marking<gx:number> (category, unique_values: []), StandingTackle<gx:number> (uint8), SlidingTackle<gx:number> (uint8), GKDiving<gx:number> (uint8), GKHandling<gx:number> (uint8), GKKicking<gx:number> (uint8), GKPositioning<gx:number> (uint8), GKReflexes<gx:number> (uint8), Best Position<gx:category> (category), Best Overall Rating<gx:number> (uint8), DefensiveAwareness<gx:number> (uint8), General Postion<gx:category> (category, unique_values: [FWD, MD, DF, GK]), Legend (bool, unique_values: [False]) [/INST] df['Club<gx:category>'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On what date did the most destructive tornado (by injuries) occur? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df.loc[df['inj'].idxmax(), 'date'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On what date did the longest tornado (by path length) occur? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df.loc[df['len'].idxmax(), 'date'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 5 states with the highest average tornado magnitude? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df.groupby('st')['mag'].mean().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 2 states with the most tornado-related injuries? If in a tie then select alphabetically.  
 Dataset Columns: yr; uint16, mo; uint8, dy; uint8, date; datetime64[us, UTC], st; category, mag; int8, inj; uint16, fat; uint8, slat; float64, slon; float64, elat; float64, elon; float64, len; float64, wid; uint16 [/INST] df.groupby('st')['inj'].sum().nlargest(2).sort_index().index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the top 4 states with the most tornado-related fatalities? If you find a tie select alphabetically. 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df.groupby('st')['fat'].sum().nlargest(4).sort_index().index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the bottom 2 states in terms of the average tornado path length? 
 Dataset Columns: yr (uint16), mo (uint8), dy (uint8), date (datetime64[us), UTC], st (category), mag (int8, unique_values: [3, 1, 2, 4, 0, 5, -9]), inj (uint16), fat (uint8), slat (float64), slon (float64), elat (float64), elon (float64), len (float64), wid (uint16) [/INST] df.groupby('st')['len'].mean().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: There were no days when the maximum temperature was below freezing point. 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df['TMAX'].min() < 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On which date was the highest precipitation recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df.loc[df['PRCP'].idxmax(), 'DATE'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On which date was the lowest minimum temperature recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df.loc[df['TMIN'].idxmin(), 'DATE'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On which date was the highest maximum temperature recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df.loc[df['TMAX'].idxmax(), 'DATE'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On which date was the deepest snow depth recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df.loc[df['SNWD'].idxmax(), 'DATE'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the dates of the top 5 highest recorded precipitation events? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df.nlargest(5, 'PRCP')['DATE'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the dates of the top 3 lowest minimum temperatures recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df.nsmallest(3, 'TMIN')['DATE'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the dates of the top 4 highest maximum temperatures recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df.nlargest(4, 'TMAX')['DATE'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the dates of the top 2 deepest snow depth recorded? 
 Dataset Columns: DATE (datetime64[us), UTC], PRCP (float64), SNOW (float64), SNWD (float64), TMIN (float64), TMAX (float64) [/INST] df.nlargest(2, 'SNWD')['DATE'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 highest ratings given by reviewers? 
 Dataset Columns: Clothing ID (uint16), Age (uint8), Title (category), Review Text (object), Rating (uint8, unique_values: [4, 5, 3, 2, 1]), Recommended IND (uint8, unique_values: [1, 0]), Positive Feedback Count (uint8), Division Name (category, unique_values: [Initmates, General, General Petite]), Department Name (category, unique_values: [Intimate, Dresses, Bottoms, Tops, Jackets, Trend]), Class Name (category) [/INST] df['Rating'].drop_duplicates().nlargest(4).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Was the highest reported incident in the year 2023 filed online? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df.loc[(df['Incident Year'] == 2023) & (df['Incident Number'] == df[df['Incident Year'] == 2023]['Incident Number'].max()), 'Filed Online'].iloc[0] == 'True' </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all incidents reported on Mondays resolved? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df[df['Incident Day of Week'] == 'Monday']['Resolution'].eq('Resolved').all() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do any incidents reported in Police District 'Central' fall in Supervisor District 5? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df[(df['Police District'] == 'Central') & (df['Supervisor District'] == 5)].empty </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the total number of incidents reported online? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Filed Online'].sum() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the most common resolution for incidents reported online? 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df[df['Filed Online'] == True]['Resolution'].mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Name the 4 most frequently occurring police districts. 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Police District'].value_counts().head(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the three most common incident categories on Fridays. 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df[df['Incident Day of Week'] == 'Friday']['Incident Category'].value_counts().head(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Give the 6 most common resolutions for incidents. 
 Dataset Columns: Incident Datetime (object), Incident Date (datetime64[us), UTC], Incident Time (category), Incident Year (uint16, unique_values: [2023, 2022, 2018, 2019, 2021, 2020]), Incident Day of Week (category, unique_values: [Monday, Wednesday, Tuesday, Saturday, Thursday, Friday, Sunday]), Report Datetime (object), Row ID (int64), Incident ID (uint32), Incident Number (uint32), CAD Number (float64), Report Type Code (category, unique_values: [VS, II, IS, VI]), Report Type Description (category, unique_values: [Vehicle Supplement, Coplogic Initial, Coplogic Supplement, Initial, Initial Supplement, Vehicle Initial]), Filed Online (object, unique_values: [True]), Incident Code (uint32), Incident Category (category), Incident Subcategory (category), Incident Description (category), Resolution (category, unique_values: [Open or Active, Cite or Arrest Adult, Exceptional Adult, Unfounded]), Intersection (category), CNN (float64), Police District (category), Analysis Neighborhood (category), Supervisor District (float64), Supervisor District 2012 (float64), Latitude (float64), Longitude (float64), Point (category), Neighborhoods (float64), ESNCAG - Boundary File (float64, unique_values: [1.0]), Central Market/Tenderloin Boundary Polygon - Updated (float64, unique_values: [1.0]), Civic Center Harm Reduction Project Boundary (float64, unique_values: [1.0]), HSOC Zones as of 2018-06-05 (float64, unique_values: [3.0, 1.0, 5.0, 4.0, 2.0]), Invest In Neighborhoods (IIN) Areas (category, unique_values: []), Current Supervisor Districts (float64), Current Police Districts (float64) [/INST] df['Resolution'].value_counts().head(6).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do all patients experience exercise-induced angina? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df['ExerciseAngina'].nunique() == 1 and df['ExerciseAngina'].iloc[0] == 'Yes' </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the least common chest pain type among male patients? 
 Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1]) [/INST] df[df['Sex'] == 'M']['ChestPainType'].value_counts().idxmin() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the names of the top 3 fastest roller coasters? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df.nlargest(3, 'speed_mph')['coaster_name'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 2 roller coasters have the highest number of inversions? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df.nlargest(2, 'Inversions_clean')['coaster_name'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the locations of the top 5 roller coasters with the highest G-force? 
 Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64) [/INST] df.nlargest(5, 'Gforce_clean')['Location'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a rental property listed by a superhost that is instantly bookable? 
 Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64) [/INST] df[(df['host_is_superhost'] == 't') & (df['instant_bookable'] == 't')].shape[0] > 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Any property with more than 10 bedrooms? 
 Dataset Columns: Id (category), Referencia (category), Precio (uint32), Tipo (category), Anunciante (category), Actualización (datetime64[us), UTC], Duración (uint16), Superficie (uint16), Superficie útil (uint16), Superficie solar (uint32), Habitaciones (uint8), Baños (uint8), Planta (int8, unique_values: [1, 2, 0, 3, -1]), Antigüedad (uint8, unique_values: [4, 6, 5, 1, 3, 2]), Clasificación (uint8, unique_values: [4, 5, 1, 3, 7, 6, 2]), Calle (category), Barrio (category), Distrito (category), Localidad (category), Código postal (float64), Latitud (float64), Longitud (float64), Nuevo (uint8, unique_values: [1, 0]), Reformado (uint8, unique_values: [0, 1]), Conservado (uint8, unique_values: [1, 0]), Exterior (uint8, unique_values: [0, 1]), Orientación sur (uint8, unique_values: [0, 1]), Soleado (uint8, unique_values: [0, 1]), Amueblado (uint8, unique_values: [0, 1]), Negociar muebles (uint8, unique_values: [0, 1]), Cocina equipada (uint8, unique_values: [0, 1]), Cocina independiente (uint8, unique_values: [0, 1]), Armarios empotrados (uint8, unique_values: [0, 1]), Garaje (uint8, unique_values: [1, 0]), Terraza (uint8, unique_values: [1, 0]), Ascensor (uint8, unique_values: [1, 0]), Aire acondicionado (uint8, unique_values: [0, 1]), Trastero (uint8, unique_values: [1, 0]), Puerta blindada (uint8, unique_values: [0, 1]), Piscina (uint8, unique_values: [0, 1]), Jardín (uint8, unique_values: [0, 1]), Comedor (uint8, unique_values: [0, 1]), Balcón (uint8, unique_values: [0, 1]), Lavadero (uint8, unique_values: [0, 1]), Chimenea (uint8, unique_values: [0, 1]), Portero automático (uint8, unique_values: [0, 1]), Sistema de seguridad (uint8, unique_values: [0, 1]), Calefacción central (uint8, unique_values: [0, 1]), Calefacción eléctrica (uint8, unique_values: [0, 1]), Gas natural (uint8, unique_values: [0, 1]), Gasoil (uint8, unique_values: [0, 1]), Aluminio (uint8, unique_values: [0, 1]), PVC (uint8, unique_values: [0, 1]), Climalit (uint8, unique_values: [0, 1]), Madera (uint8, unique_values: [0, 1]), Parquet (uint8, unique_values: [0, 1]), Gres (uint8, unique_values: [0, 1]), Tarima (uint8, unique_values: [0, 1]), Mármol (uint8, unique_values: [0, 1]) [/INST] df['Habitaciones'].gt(10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any customers who are senior citizens and have dependents? 
 Dataset Columns: customerID (category), gender (category, unique_values: [Female, Male]), SeniorCitizen (uint8, unique_values: [0, 1]), Partner (category, unique_values: [Yes, No]), Dependents (category, unique_values: [No, Yes]), tenure (uint8), PhoneService (category, unique_values: [No, Yes]), MultipleLines (category, unique_values: [No phone service, No, Yes]), InternetService (category, unique_values: [DSL, Fiber optic, No]), OnlineSecurity (category, unique_values: [No, Yes, No internet service]), OnlineBackup (category, unique_values: [Yes, No, No internet service]), DeviceProtection (category, unique_values: [No, Yes, No internet service]), TechSupport (category, unique_values: [No, Yes, No internet service]), StreamingTV (category, unique_values: [No, Yes, No internet service]), StreamingMovies (category, unique_values: [No, Yes, No internet service]), Contract (category, unique_values: [Month-to-month, One year, Two year]), PaperlessBilling (category, unique_values: [Yes, No]), PaymentMethod (category, unique_values: [Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)]), MonthlyCharges (float64), TotalCharges (float64), Churn (category, unique_values: [No, Yes]) [/INST] df[(df['SeniorCitizen'] == 1) & (df['Dependents'] == 'Yes')].shape[0] > 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are all listings instantly bookable? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] all(df['instant_bookable'] == 'True') </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 highest unique number of bedrooms listed? 
 Dataset Columns: listing_id (uint32), name (object), host_id (uint32), host_since (datetime64[us), UTC], host_location (category), host_response_time (category, unique_values: [within a few hours, within a day, within an hour, a few days or more]), host_response_rate (float64), host_acceptance_rate (float64), host_is_superhost (category, unique_values: [f, t]), host_total_listings_count (float64), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), district (category, unique_values: [Manhattan, Brooklyn, Queens, Bronx, Staten Island]), city (category, unique_values: [New York]), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Entire place, Private room, Hotel room, Shared room]), accommodates (uint8), bedrooms (float64), amenities (object), price (uint16), minimum_nights (uint16), maximum_nights (uint32), review_scores_rating (float64), review_scores_accuracy (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), review_scores_cleanliness (float64, unique_values: [8.0, 9.0, 10.0, 7.0, 6.0, 4.0, 2.0, 5.0, 3.0]), review_scores_checkin (float64, unique_values: [8.0, 10.0, 9.0, 2.0, 7.0, 6.0, 4.0, 3.0, 5.0]), review_scores_communication (float64, unique_values: [8.0, 10.0, 9.0, 7.0, 4.0, 2.0, 6.0, 5.0, 3.0]), review_scores_location (float64, unique_values: [10.0, 9.0, 8.0, 6.0, 2.0, 7.0, 4.0, 5.0]), review_scores_value (float64, unique_values: [10.0, 9.0, 8.0, 7.0, 6.0, 2.0, 4.0, 5.0, 3.0]), instant_bookable (category, unique_values: [f, t]) [/INST] sorted(df['bedrooms'].dropna().unique(), reverse=True)[:4] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Was there a day when the minimum temperature was below zero and it didn't rain? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df[(df['tmin'] < 0) & (df['prec'] == 0)].shape[0] > 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there records where the solar radiation exceeds 10 but the maximum temperature was below 20? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df[(df['sol'] > 10) & (df['tmax'] < 20)].empty == False </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Did any day with maximum wind speed above 15 also have average wind speed below 5? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df[(df['racha'] > 15) & (df['velmedia'] < 5)].shape[0] > 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: On what date was the highest pressure ever recorded? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.loc[df['presMax'].idxmax(), 'fecha'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 6 days of the year (numbered from 1 to 365/366) had the highest average temperatures? 
 Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195]) [/INST] df.groupby('dayofyear')['tmed'].mean().nlargest(6).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: How many unique respondents belong to the ESTE NUTS1 region? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['NUTS1'].eq('ESTE').sum() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which 2 'umap_cluster' categories are the least represented? 
 Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educación secundaria, Licenciados y similares, y doctores universitarios, Educación primaria, Diplomados universitarios y similares, Enseñanzas de formación profesional de grado superior y simi, Segunda etapa de eduación secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [MÁS DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 AÑOS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y MÁS TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNIÓN EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTONÓMICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACIÓN, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPAÑA, RESTO MUNDO]), RESPONSA (category, unique_values: [No, Sí]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64) [/INST] df['umap_cluster'].value_counts().nsmallest(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the quality ratings of the top 3 wines with the highest alcohol content. 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.nlargest(3, 'alcohol')['quality'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Enumerate the quality ratings of the bottom 2 wines with the lowest residual sugar. 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.nsmallest(2, 'residual sugar')['quality'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the quality ratings of the top 5 wines with the highest density? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.nlargest(5, 'density')['quality'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the quality ratings of the bottom 4 wines with the lowest pH level. 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.nsmallest(4, 'pH')['quality'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the alcohol contents of the top 4 wines with the highest quality ratings? 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.nlargest(4, 'quality')['alcohol'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the volatile acidity levels of the bottom 3 wines with the lowest quality ratings. 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.nsmallest(3, 'quality')['volatile acidity'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Enumerate the fixed acidity levels of the top 5 wines with the highest quality ratings. 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.nlargest(5, 'quality')['fixed acidity'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Provide the residual sugar levels of the bottom 2 wines with the lowest quality ratings. 
 Dataset Columns: fixed acidity (float64), volatile acidity (float64), citric acid (float64), residual sugar (float64), chlorides (float64), free sulfur dioxide (float64), total sulfur dioxide (float64), density (float64), pH (float64), sulphates (float64), alcohol (float64), quality (uint8, unique_values: [5, 6, 7, 4, 8, 3]) [/INST] df.nsmallest(2, 'quality')['residual sugar'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does any customer with a rating strictly above 9 use 'Ewallet' as their payment method? 
 Dataset Columns: Invoice ID (category), Branch (category, unique_values: [A, C, B]), City (category, unique_values: [Yangon, Naypyitaw, Mandalay]), Customer type (category, unique_values: [Member, Normal]), Gender (category, unique_values: [Female, Male]), Product line (category, unique_values: [Health and beauty, Electronic accessories, Home and lifestyle, Sports and travel, Food and beverages, Fashion accessories]), Unit price (float64), Quantity (uint8), Tax 5% (float64), Total (float64), Date (datetime64[us), UTC], Time (category), Payment (category, unique_values: [Ewallet, Cash, Credit card]), cogs (float64), gross margin percentage (float64, unique_values: [4.761904762]), gross income (float64), Rating (float64) [/INST] df[(df['Rating'] > 9) & (df['Payment'] == 'Ewallet')].shape[0] > 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there anyone who has zero pregnancies and is diabetic? 
 Dataset Columns: Pregnancies (uint8), Glucose (uint8), BloodPressure (uint8), SkinThickness (uint8), Insulin (uint16), BMI (float64), DiabetesPedigreeFunction (float64), Age (uint8), Outcome (uint8, unique_values: [1, 0]) [/INST] df[(df['Pregnancies'] == 0) & (df['Outcome'] == 1)].any().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Does any article contain more than 10 keywords? 
 Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object) [/INST] df['keywords'].apply(len).gt(10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there more than 1000 participants who hope to become familiar with AWS in the next 2 years? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] (df['Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?'].apply(lambda x: 'AWS' in x if isinstance(x, list) else False)).sum() > 1000 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the most common programming language used on a regular basis? 
 Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor’s degree, Doctoral degree, No formal education past high school, Master’s degree, Some college/university study without earning a bachelor’s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)]) [/INST] df['What programming languages do you use on a regular basis?'].explode().mode()[0] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which country had the lowest representation in the reviews? 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['country_code'].value_counts().idxmin() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the bottom 4 countries in terms of review count? If two or more have the same number order them alphabetically. 
 Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26]) [/INST] df['country_code'].value_counts().nsmallest(4).sort_index().index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What's the highest number of projects for a given employee? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df['Number of Projects'].max() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 average monthly hours worked among the employees in the top 3 departments with the most employees? 
 Dataset Columns: Left (category, unique_values: [Yes, No]), Satisfaction Level (float64), Work Accident (category, unique_values: [Yes, No]), Average Monthly Hours (uint16), Last Evaluation (float64), Years in the Company (uint8, unique_values: [3, 5, 4, 6, 2, 8, 10, 7]), salary (category, unique_values: [low, medium, high]), Department (category), Number of Projects (uint8, unique_values: [2, 5, 4, 6, 7, 3]), Promoted in the last 5 years? (category, unique_values: [Yes, No]), Date Hired (datetime64[ns), UTC], Marital_Status (category, unique_values: [Together, Single, Married]) [/INST] df[df['Department'].isin(df['Department'].value_counts().nlargest(3).index)].groupby('Department')['Average Monthly Hours'].mean().nlargest(3).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any countries in Western Europe with a Perceptions of corruption score above 0.5, a Ladder score above 7, and a Social support score above 0.7? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[(df['Regional indicator'] == 'Western Europe') & (df['Perceptions of corruption'] > 0.5) & (df['Ladder score'] > 7) & (df['Social support'] > 0.7)].any().any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there any countries in Western Europe with a Perceptions of corruption score above 0.5? 
 Dataset Columns: Country name (category), Regional indicator (category), Ladder score (float64), Standard error of ladder score (float64), upperwhisker (float64), lowerwhisker (float64), Logged GDP per capita (float64), Social support (float64), Healthy life expectancy (float64), Freedom to make life choices (float64), Generosity (float64), Perceptions of corruption (float64), Ladder score in Dystopia (float64, unique_values: [1.972316742]), Explained by: Log GDP per capita (float64), Explained by: Social support (float64), Explained by: Healthy life expectancy (float64), Explained by: Freedom to make life choices (float64), Explained by: Generosity (float64), Explained by: Perceptions of corruption (float64), Dystopia + residual (float64) [/INST] df[(df['Regional indicator'] == 'Western Europe') & (df['Perceptions of corruption'] > 0.5)].shape[0] > 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: From which origin do we have the highest 'count' recorded? 
 Dataset Columns: dest (uint32), origin (float64), count (uint16), name_dest (category), name_origin (category), lat_dest (float64), lon_dest (float64), lat_origin (float64), lon_origin (float64) [/INST] df.loc[df['count'].idxmax(), 'name_origin'] </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Are there talks available in more than 10 languages? 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df['available_lang'].apply(lambda x: len(x) > 10).any() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List 2 events with the most number of talks. 
 Dataset Columns: talk_id (uint16), title (object), speaker_1 (category), all_speakers (object), occupations (category), about_speakers (object), views (uint32), recorded_date (datetime64[us), UTC], published_date (datetime64[us), UTC], event (category), native_lang (category), available_lang (object), comments (float64), duration (uint16), topics (object), related_talks (object), url (category), description (object), transcript (object) [/INST] df['event'].value_counts().head(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Do all smokers have hypertension? 
 Dataset Columns: id (uint32), gender (category, unique_values: [Male, Female, Other]), age (float64), hypertension (uint8, unique_values: [0, 1]), heart_disease (uint8, unique_values: [1, 0]), ever_married (category, unique_values: [Yes, No]), work_type (category, unique_values: [Private, Self-employed, Govt_job, children, Never_worked]), Residence_type (category, unique_values: [Urban, Rural]), avg_glucose_level (float64), bmi (float64), smoking_status (category, unique_values: [formerly smoked, never smoked, smokes, Unknown]), stroke (uint8, unique_values: [1, 0]) [/INST] df[df['smoking_status'] == 'smoker']['hypertension'].eq(1).all() == False </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Which are the highest 5 number of sentences? 
 Dataset Columns: wid (uint16), reflection_period (category, unique_values: [24h, 3m]), cleaned_hm (object), num_sentence (uint8), ground_truth_category (category, unique_values: [bonding, leisure, affection, enjoy_the_moment, achievement, nature, exercise]), predicted_category (category, unique_values: [affection, exercise, bonding, leisure, achievement, enjoy_the_moment, nature]), age (float64), country (category), gender (category, unique_values: [m, f, o]), marital (category, unique_values: [single, married, divorced, widowed, separated]), parenthood (category, unique_values: [n, y]) [/INST] df['num_sentence'].nlargest(6).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Is there a negative sentiment tweet from 'United' airline? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df[(df['airline'] == 'United') & (df['airline_sentiment'] == 'negative')].shape[0] > 0 </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: List the 3 most common negative reasons in the dataset. 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df['negativereason'].value_counts().head(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 2 lowest values for sentiment confidence? 
 Dataset Columns: tweet_id (int64), airline_sentiment (category, unique_values: [neutral, positive, negative]), airline_sentiment_confidence (float64), negativereason (category), negativereason_confidence (float64), airline (category, unique_values: [Virgin America, United, Southwest, Delta, US Airways, American]), airline_sentiment_gold (category, unique_values: [negative, neutral, positive]), name (category), negativereason_gold (category), retweet_count (uint8), text (object), tweet_coord (object), tweet_created (datetime64[us), UTC], tweet_location (category), user_timezone (category) [/INST] df['airline_sentiment_confidence'].nsmallest(2).tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 genres among English language movies from the USA with a metascore of 100? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[(df['metascore'] == 100) & (df['country'].str.contains('USA')) & (df['language'].str.contains('English'))]['genre'].value_counts().head(3).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 4 languages among movies from the USA with a duration greater than 180 minutes? 
 Dataset Columns: imdb_title_id (category), title (category), original_title (category), year (float64), date_published (category), genre (category), duration (uint16), country (category), language (category), director (category), writer (category), production_company (category), actors (object), description (object), avg_vote (float64), votes (uint32), budget (category), usa_gross_income (category), worlwide_gross_income (category), metascore (float64), reviews_from_users (float64), reviews_from_critics (float64) [/INST] df[df['country'] == 'USA'][df['duration'] > 180]['language'].value_counts().head(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the names of the top 3 most popular songs? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.nlargest(3, 'popularity')['name'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 3 artists who released songs with the longest durations? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.nlargest(3, 'duration_ms')['artists'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the names of the top 2 songs with the most energy? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df.nlargest(2, 'energy')['name'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 5 most popular scores? 
 Dataset Columns: id (uint16), name (category), popularity (uint8), duration_ms (float64), artists (object), id_artists (object), danceability (float64), energy (float64), key (uint8), loudness (float64), speechiness (float64), acousticness (float64), instrumentalness (float64), liveness (float64), valence (float64), tempo (float64), release_year (uint16), release_month (float64), release_day (float64) [/INST] df['popularity'].value_counts().nlargest(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the top 5 most common team names in the dataset? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df['Team'].value_counts().head(5).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the 4 most common cities of participation? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df['City'].value_counts().head(4).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the names of the top 2 athletes who participated in the most number of games? 
 Dataset Columns: ID (uint32), Name (category), Sex (category, unique_values: [M, F]), Age (float64), Height (float64), Weight (float64), Team (category), NOC (category), Games (category), Year (uint16), Season (category, unique_values: [Summer, Winter]), City (category), Sport (category), Event (category), Medal (category, unique_values: [Gold, Bronze, Silver]) [/INST] df['Name'].value_counts().head(2).index.tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What are the five customer IDs with the highest credit limit? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df.nlargest(5, 'credit_limit')['credit_limit'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: Who are the 6 customers with the highest total transaction amount? 
 Dataset Columns: id (uint16), attrition_flag (uint8, unique_values: [0, 1]), customer_age (uint8), gender (category, unique_values: [F, M]), education_level (category, unique_values: [Post-Graduate, College, Unknown, Uneducated, Graduate, High School, Doctorate]), income_category (category, unique_values: [Less than $40K, $80K - $120K, $60K - $80K, $120K +, $40K - $60K, Unknown]), total_relationship_count (uint8, unique_values: [3, 6, 1, 2, 4, 5]), months_inactive_12_mon (uint8, unique_values: [2, 4, 3, 1, 0, 6, 5]), credit_limit (float64), total_revolving_bal (uint16), total_amt_chng_q4_q1 (float64), total_trans_amt (uint16), total_trans_ct (uint8), total_ct_chng_q4_q1 (float64), avg_utilization_ratio (float64) [/INST] df.nlargest(6, 'total_trans_amt')['total_trans_amt'].tolist() </s>"
"<s>[INST] <<SYS>> You are a helpful assistant (expert query generator) designed to generate Python pandas DataFrame queries for tabular question-answering tasks. The user provides a question and the list of all columns in the dataset along with their data types as input. Your task is to:

1. Analyze the input question to infer the type of answer needed.
2. Generate a single-line pandas DataFrame query that extracts the required answer directly from the dataset.
3. **IMPORTANT**: Columns are provided with their data type in the brackets, and in some cases where unique values are available, they are also provided in square brackets within the data type. For example, (bool, unique_values: [False, True]). This is provided to help you understand the data better and generate accurate queries instead of assuming values where needed.

Possible Answer Types:
1. Boolean: When the question expects a yes/no answer.
2. Number: When the question seeks a numerical value (e.g., sum, average, count, maximum, minimum, etc.).
3. List[Number]: When the question requires a list of numerical values (e.g., values in a column or results of a computation).
4. List[Category]: When the question asks for a list of unique or filtered categorical values (e.g., names, labels, etc.).
5. Category: When the question expects a single categorical value (e.g., most frequent category or specific label).

Response Requirements:
- Only use columns explicitly provided in the input prompt.
- Avoid hallucinating columns or using data not present in the dataset.
- Always provide a single-line pandas query that outputs the answer based on the inferred type.
- Ensure the query is concise, accurate, and directly maps to the inferred answer type.

Make sure you are able to infer what answer type is required from the question provided and you can analyze which columns to use from total columns to answer the question. 

**Examples**:

Question: ""What's the most common gender among the survivors?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code:
df[df['Survived'] == True]['Sex'].mode()[0]

Question: ""How many passengers boarded without any siblings or spouses?"" 
 Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)

You should provide the following code: 
df[df['Siblings_Spouses Aboard'] == 0].shape[0] <</SYS>> Question: What is the average number of favorites per tweet? 
 Dataset Columns: id<gx:category> (int64), author_id<gx:category> (uint32, unique_values: [3131144855]), author_name<gx:category> (category, unique_values: [Boris Johnson]), author_handler<gx:category> (category, unique_values: [BorisJohnson]), author_avatar<gx:url> (category, unique_values: [http://pbs.twimg.com/profile_images/1331215386633756675/NodbPVQv_normal.jpg]), user_created_at<gx:date> (datetime64[us, unique_values: [2015-04-01 20:15:49+00:00]), UTC], user_description<gx:text> (category, unique_values: [Prime Minister of the United Kingdom and @Conservatives leader. Member of Parliament for Uxbridge and South Ruislip.]), user_favourites_count<gx:number> (uint16, unique_values: [468]), user_followers_count<gx:number> (uint32, unique_values: [3543401, 3543402]), user_following_count<gx:number> (uint16, unique_values: [460]), user_listed_count<gx:number> (uint16, unique_values: [8550]), user_tweets_count<gx:number> (uint16, unique_values: [4706]), user_verified<gx:boolean> (bool, unique_values: [True]), user_location<gx:text> (category, unique_values: [United Kingdom]), lang<gx:category> (category, unique_values: [en, de, zh, und, fr, ja, hu, es, ro]), type<gx:category> (category, unique_values: [original]), text<gx:text> (object), date<gx:date> (datetime64[us), UTC], mention_ids<gx:list[category]> (object), mention_names<gx:list[category]> (object), retweets<gx:number> (uint32), favorites<gx:number> (uint32), replies<gx:number> (uint16), quotes<gx:number> (uint16), links<gx:list[url]> (object), links_first<gx:url> (category), image_links<gx:list[url]> (object), image_links_first<gx:url> (category), rp_user_id<gx:category> (category, unique_values: []), rp_user_name<gx:category> (category, unique_values: []), location<gx:text> (category, unique_values: []), tweet_link<gx:url> (category), source<gx:text> (category, unique_values: [<a href=""https://studio.twitter.com"" rel=""nofollow"">Twitter Media Studio</a>, <a href=""https://mobile.twitter.com"" rel=""nofollow"">Twitter Web App</a>, <a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>, <a href=""https://about.twitter.com/products/tweetdeck"" rel=""nofollow"">TweetDeck</a>, <a href=""https://periscope.tv"" rel=""nofollow"">Periscope</a>, <a href=""http://twitter.com"" rel=""nofollow"">Twitter Web Client</a>, <a href=""http://twitter.com/download/android"" rel=""nofollow"">Twitter for Android</a>, <a href=""http://twitter.com/#!/download/ipad"" rel=""nofollow"">Twitter for iPad</a>, <a href=""http://www.apple.com"" rel=""nofollow"">iOS</a>]), search<gx:category> (category, unique_values: [from:@BorisJohnson]) [/INST] df['favorites<gx:number>'].mean() </s>"
