[
    {
        "input": "Question: Does the youngest billionaire identify as male?  \n Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object)",
        "output": "df[(df['gender'] == 'M') & (df['age'] == df['age'].min())].shape[0] > 0",
        "dataset": "001_Forbes",
        "query2": "df.query(\"gender == 'M' and age == age.min()\").shape[0] > 0",
        "query3": "df.loc[df['age'].idxmin()]['gender'] == 'M'",
        "query4": "df[df['age'] == df['age'].min()]['gender'].values[0] == 'M'"
    },
    {
        "input": "Question: List the top 4 ranks of female billionaires. \n Dataset Columns: rank (uint16), personName (category), age (float64), finalWorth (uint32), category (category), source (category), country (category), state (category), city (category), organization (category), selfMade (bool, unique_values: [True, False]), gender (category, unique_values: [M, F]), birthDate (datetime64[us), UTC], title (category), philanthropyScore (float64, unique_values: [1.0, 4.0, 5.0, 2.0, 3.0]), bio (object), about (object)",
        "output": "df.loc[df['gender'] == 'F'].nsmallest(4, 'rank')['rank'].tolist()",
        "dataset": "001_Forbes",
        "query2": "df[df['gender'] == 'F'].sort_values('rank', ascending=True)['rank'].head(4).tolist()",
        "query3": "df.query(\"gender == 'F'\").nsmallest(4, 'rank')['rank'].tolist()"
    },
    {
        "input": "Question: Among those who survived, which fare range was the most common: (0-50, 50-100, 100-150, 150+)? \n Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)",
        "output": "df[df['Survived'] == True]['Fare'].apply(lambda x: '0-50' if x <= 50 else '50-100' if x <= 100 else '100-150' if x <= 150 else '150+').value_counts().idxmax()",
        "dataset": "002_Titanic",
        "query2": "df.loc[df['Survived'] == True, 'Fare'].apply(lambda x: '0-50' if x <= 50 else '50-100' if x <= 100 else '100-150' if x <= 150 else '150+').value_counts().idxmax()",
        "query3": "df.query('Survived == True')['Fare'].apply(lambda x: '0-50' if x <= 50 else '50-100' if x <= 100 else '100-150' if x <= 150 else '150+').value_counts().idxmax()",
        "query4": "df[df.Survived]['Fare'].apply(lambda x: '0-50' if x <= 50 else '50-100' if x <= 100 else '100-150' if x <= 150 else '150+').value_counts().idxmax()"
    },
    {
        "input": "Question: Could you list the lower 3 fare ranges by number of survivors: (0-50, 50-100, 100-150, 150+)? \n Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)",
        "output": "df[df['Survived'] == True]['Fare'].apply(lambda x: '0-50' if x <= 50 else '50-100' if x <= 100 else '100-150' if x <= 150 else '150+').value_counts(ascending=False).tail(3).index.tolist()",
        "dataset": "002_Titanic",
        "query2": "df.loc[df['Survived'] == True, 'Fare'].apply(lambda x: '0-50' if x <= 50 else '50-100' if x <= 100 else '100-150' if x <= 150 else '150+').value_counts(ascending=False).nsmallest(3).index.tolist()",
        "query3": "df[df['Survived']].groupby(pd.cut(df['Fare'], bins=[0, 50, 100, 150, float('inf')], labels=['0-50', '50-100', '100-150', '150+'])).size().nsmallest(3).index.tolist()",
        "query4": "df[df['Survived']].assign(Fare_Range=lambda x: pd.cut(x['Fare'], bins=[0, 50, 100, 150, float('inf')], labels=['0-50', '50-100', '100-150', '150+'])).Fare_Range.value_counts(ascending=True).head(3).index.tolist()"
    },
    {
        "input": "Question: What are the top 4 age ranges('30-50', '18-30', '0-18', '50+') with the highest number of survivors? \n Dataset Columns: Survived (bool, unique_values: [False, True]), Pclass (uint8, unique_values: [3, 1, 2]), Name (object), Sex (category, unique_values: [male, female]), Age (float64), Siblings_Spouses Aboard (uint8, unique_values: [1, 0, 3, 4, 2, 5, 8]), Parents_Children Aboard (uint8, unique_values: [0, 1, 2, 5, 3, 4, 6]), Fare (float64)",
        "output": "df[df['Survived'] == True]['Age'].apply(lambda x: '0-18' if x <= 18 else '18-30' if x <= 30 else '30-50' if x <= 50 else '50+').value_counts().head(4).index.tolist()",
        "dataset": "002_Titanic",
        "query2": "df.loc[df['Survived'] == True, 'Age'].apply(lambda x: '0-18' if x <= 18 else '18-30' if x <= 30 else '30-50' if x <= 50 else '50+').value_counts().nlargest(4).index.tolist()",
        "query3": "df[df['Survived']].Age.apply(lambda x: '0-18' if x <= 18 else '18-30' if x <= 30 else '30-50' if x <= 50 else '50+').value_counts().sort_values(ascending=False).head(4).index.tolist()",
        "query4": "df[df.Survived == True].Age.apply(lambda x: '0-18' if x <= 18 else '18-30' if x <= 30 else '30-50' if x <= 50 else '50+').value_counts().iloc[:4].index.tolist()"
    },
    {
        "input": "Question: How many respondents wear glasses all the time? \n Dataset Columns: Submitted at (datetime64[us), UTC], What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb (uint8), What's your nationality? (category), What is your civil status? \ud83d\udc8d (category, unique_values: [Married, Single, In a Relationship, In a Relationship Cohabiting, Divorced]), What's your sexual orientation? (category, unique_values: [Heterosexual, Homosexual, Bisexual]), Do you have children? \ud83c\udf7c (category, unique_values: [Yes, No]), What is the maximum level of studies you have achieved? \ud83c\udf93 (category, unique_values: [PhD, Master, College Degree, High School, Technical Education (FP), Secondary Education (ESO), Primary Education]), Gross annual salary (in euros) \ud83d\udcb8 (float64), What's your height? in cm \ud83d\udccf (uint8), What's your weight? in Kg \u2696\ufe0f (float64), What is your body complexity? \ud83c\udfcb\ufe0f (category, unique_values: [Average, Muscular, Overweight, Thin, Obese, Very thin]), What is your eye color? \ud83d\udc41\ufe0f (category, unique_values: [Brown, Hazel, Green, Blue, Grey, Other]), What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd (category, unique_values: [Brown, White, Black, Red, Other, Grey, Blonde, Blue]), What is your skin tone? (uint8, unique_values: [4, 1, 6, 2, 3, 0, 5, 7, 8]), How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f (category, unique_values: [Short, Long, Medium, Bald]), How long is your facial hair? \ud83e\uddd4\ud83c\udffb (category, unique_values: [No facial hair, Short beard (few days), Medium (weeks), Long (months)]), How often do you wear glasses? \ud83d\udc53 (category, unique_values: [Constantly, Rarely, Occasioanlly, Regularly]), How attractive do you consider yourself? (uint8), Have you ever use an oline dating app? (category, unique_values: [No, Yes]), Where have you met your sexual partners? (In a Bar or Restaurant) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Friends) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Work or as Co-Workers) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Through Family) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in University) (bool, unique_values: [True, False]), Where have you met your sexual partners? (in Primary or Secondary School) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Neighbors) (bool, unique_values: [False, True]), Where have you met your sexual partners? (in Church) (bool, unique_values: [False, True]), Where have you met your sexual partners? (Other) (bool, unique_values: [False, True]), How many people have you kissed? (uint16), How many sexual partners have you had? (uint16), How many people have you considered as your boyfriend_girlfriend? (uint8), How many times per month did you practice sex lately? (float64), Happiness scale (uint8, unique_values: [9, 7, 10, 8, 6, 4, 5, 3, 2]), What area of knowledge is closer to you? (object), If you are in a relationship, how long have you been with your partner? (float64)",
        "output": "df.loc[df['How often do you wear glasses? \ud83d\udc53'] == 'Constantly'].shape[0]",
        "dataset": "003_Love",
        "query3": "len(df[df['How often do you wear glasses? \ud83d\udc53'] == 'Constantly'])",
        "query4": "df['How often do you wear glasses? \ud83d\udc53'].value_counts()['Constantly']"
    },
    {
        "input": "Question: Is the Mayor's office of special enforcement one of the agencies handling complaints? \n Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC]",
        "output": "df['agency'].astype(str).str.contains('OFFICE OF SPECIAL ENFORCEMENT', case=False, na=False).any()  ",
        "dataset": "005_NYC",
        "query3": "df['agency'].astype(str).str.upper().str.contains('OFFICE OF SPECIAL ENFORCEMENT').any()",
        "query4": "any(df['agency'].astype(str).apply(lambda x: 'OFFICE OF SPECIAL ENFORCEMENT' in x.upper()))"
    },
    {
        "input": "Question: How many complaints have been made in Queens? \n Dataset Columns: segmentation_1 (object, unique_values: [[], ['Manhattan Late at night'], ['Bronx Late at night']]), descriptor (category), complaint_type (category), created_date (datetime64[us), UTC], borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), hour (uint8), month_name (category), weekday_name (category, unique_values: [Friday, Wednesday, Sunday, Thursday, Tuesday, Monday, Saturday]), agency (category), resolution_description (category), agency_name (category), city (category), location_type (category), incident_zip (float64), incident_address (object), street_name (category), cross_street_1 (category), cross_street_2 (category), intersection_street_1 (category), intersection_street_2 (category), address_type (category, unique_values: [ADDRESS, PLACENAME, INTERSECTION, BLOCKFACE, LATLONG, UNRECOGNIZED]), landmark (category), facility_type (category, unique_values: [Precinct, DSNY Garage, School, School District]), status (category, unique_values: [Closed, Open, Pending, In Progress, Assigned, Started, Email Sent, Unspecified]), due_date (datetime64[us), UTC], resolution_action_updated_date (datetime64[us), UTC], community_board (category), x_coordinate (float64), y_coordinate (float64), park_facility_name (category), park_borough (category, unique_values: [BROOKLYN, QUEENS, BRONX, Unspecified, MANHATTAN, STATEN ISLAND]), bbl (float64), open_data_channel_type (category, unique_values: [ONLINE, PHONE, MOBILE, UNKNOWN, OTHER]), vehicle_type (category, unique_values: [Car Service, Ambulette / Paratransit]), taxi_company_borough (category, unique_values: [BRONX, BROOKLYN, QUEENS, MANHATTAN, STATEN ISLAND]), taxi_pickup_location (category), bridge_highway_name (category), bridge_highway_direction (category), road_ramp (category, unique_values: [Roadway, Ramp, W 14 St & 6 Av NE corner, E 196 St & Grand Concourse, E 69 St & 2 Av, Houston St & Mulberry St NW corner, 3 Av & E 149 St to Manhattan, Lenox Av & Dr Martin Luther King Jr Blvd, Classon Av & Lafayette Av]), bridge_highway_segment (category), latitude (float64), longitude (float64), location (object), unique_key (uint32), Unnamed_0 (uint32), closed_date (datetime64[us), UTC]",
        "output": "df[df['borough'].str.contains('Queens', case=False, na=False)].shape[0] ",
        "dataset": "005_NYC",
        "query2": "len(df[df['borough'] == 'QUEENS'])",
        "query3": "df.loc[df['borough'] == 'QUEENS'].count()[0]",
        "query4": "df.query(\"borough == 'QUEENS'\").shape[0]"
    },
    {
        "input": "Question: What are the 4 most common chest pain types among male patients? \n Dataset Columns: Age (uint8), Sex (category, unique_values: [M, F]), ChestPainType (category, unique_values: [ATA, NAP, ASY, TA]), RestingBP (uint8), Cholesterol (uint16), FastingBS (uint8, unique_values: [0, 1]), RestingECG (category, unique_values: [Normal, ST, LVH]), MaxHR (uint8), ExerciseAngina (category, unique_values: [N, Y]), Oldpeak (float64), ST_Slope (category, unique_values: [Up, Flat, Down]), HeartDisease (uint8, unique_values: [0, 1])",
        "output": "df[df['Sex'] == 'M']['ChestPainType'].value_counts().nlargest(4).index.tolist()",
        "dataset": "012_Heart",
        "query2": "df.loc[df['Sex'] == 'M', 'ChestPainType'].value_counts().head(4).index.tolist()",
        "query3": "df.query(\"Sex == 'M'\")['ChestPainType'].value_counts().iloc[:4].index.tolist()",
        "query4": "df[df.Sex.eq('M')].ChestPainType.value_counts().nlargest(4).keys().tolist()"
    },
    {
        "input": "Question: What type of the roller coaster is the oldest in the dataset? \n Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64)",
        "output": "df[df['year_introduced'] == df['year_introduced'].min()]['Type'].iloc[0]",
        "dataset": "013_Roller",
        "query2": "df.loc[df['year_introduced'].idxmin()]['Type']",
        "query3": "df.sort_values(by='year_introduced', ascending=True)['Type'].iloc[0]",
        "query4": "df['Type'][df['year_introduced'].idxmin()]"
    },
    {
        "input": "Question: Name the 4 oldest roller coasters in the dataset. \n Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64)",
        "output": "df.sort_values('opening_date_clean').head(4)['coaster_name'].tolist()",
        "dataset": "013_Roller",
        "query3": "df.sort_values(by='opening_date_clean', ascending=True)['coaster_name'].iloc[:4].tolist()"
    },
    {
        "input": "Question: Name the introduction years of the 6 oldest roller coasters in the dataset. \n Dataset Columns: coaster_name (category), Length (category), Speed (object), Location (category), Status (category), Opening date (category), Type (category), Manufacturer (category), Height restriction (category), Model (category), Height (category), Inversions (float64), Lift/launch system (category), Cost (category), Trains (object), Park section (category), Duration (category), Capacity (object), G-force (category), Designer (category), Max vertical angle (category), Drop (category), Soft opening date (category), Fast Lane available (category, unique_values: [Fast Lane available]), Replaced (category), Track layout (category), Fastrack available (category, unique_values: [Fastrack available]), Soft opening date.1 (category), Closing date (category), Opened (category), Replaced by (category), Website (category), Flash Pass Available (category, unique_values: [Flash Pass Available]), Must transfer from wheelchair (category, unique_values: [Must transfer from wheelchair]), Theme (category), Single rider line available (category, unique_values: [Single rider line available]), Restraint Style (category, unique_values: [Lap Bar, Over-the-shoulder, Individual ratcheting lap bar, formerly individual shoulder harness, Seat Belt / Lap Bar, Over the Shoulder Restraints, Lapbars with seatbelt and shinguards]), Flash Pass available (category, unique_values: [Flash Pass available]), Acceleration (object), Restraints (category), Name (category), year_introduced (uint16), latitude (float64), longitude (float64), Type_Main (category, unique_values: [Wood, Other, Steel]), opening_date_clean (datetime64[us), UTC], speed1 (category), speed2 (category), speed1_value (float64), speed1_unit (category, unique_values: [mph, km/h]), speed_mph (float64), height_value (float64), height_unit (category, unique_values: [ft, m]), height_ft (float64), Inversions_clean (uint8), Gforce_clean (float64)",
        "output": "df.sort_values('opening_date_clean').head(6)['year_introduced'].tolist()",
        "dataset": "013_Roller",
        "query3": "df.sort_values(by='opening_date_clean', ascending=True).iloc[:6]['year_introduced'].tolist()"
    },
    {
        "input": "Question: Which are the 2 lowest values of host response rates above 0% ? \n Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64)",
        "output": "pd.to_numeric(df['host_response_rate'].str.rstrip('%'), errors='coerce').dropna().loc[lambda x: x > 0].nsmallest(2).apply(lambda x: f'{int(x)}%').tolist()",
        "dataset": "014_Airbnb",
        "query2": "df['host_response_rate'].replace('%','', regex=True).astype(float).loc[lambda x: x > 0].nsmallest(2).apply(lambda x: f'{int(x)}%').tolist()",
        "query4": "df['host_response_rate'].str.rstrip('%').astype('float').where(lambda x: x > 0).nsmallest(2).apply(lambda x: f'{int(x)}%').tolist()"
    },
    {
        "input": "Question: Which are the 2 lowest values of host response rates? \n Dataset Columns: id (int64), listing_url (category), scrape_id (int64, unique_values: [20221213034110]), last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], source (category, unique_values: [city scrape, previous scrape]), name (object), description (object), neighborhood_overview (object), picture_url (category), host_id (uint32), host_url (category), host_name (category), host_since (datetime64[us), UTC], host_location (category), host_about (object), host_response_time (category, unique_values: [within an hour, a few days or more, within a few hours, within a day]), host_response_rate (category), host_acceptance_rate (category), host_is_superhost (category, unique_values: [t, f]), host_thumbnail_url (category), host_picture_url (category), host_neighbourhood (category), host_listings_count (float64), host_total_listings_count (float64), host_verifications (object, unique_values: [['email' 'phone'], ['phone'], ['email' 'phone' 'work_email'], ['phone' 'work_email'], ['email'], ['None'], ['email' 'work_email'], []]), host_has_profile_pic (category, unique_values: [t, f]), host_identity_verified (category, unique_values: [t, f]), neighbourhood (category), neighbourhood_cleansed (category), neighbourhood_group_cleansed (category), latitude (float64), longitude (float64), property_type (category), room_type (category, unique_values: [Private room, Entire home/apt, Shared room, Hotel room]), accommodates (uint8), bathrooms (category, unique_values: []), bathrooms_text (category), bedrooms (float64), beds (float64), amenities (object), price (category), minimum_nights (uint16), maximum_nights (uint32), minimum_minimum_nights (float64), maximum_minimum_nights (float64), minimum_maximum_nights (float64), maximum_maximum_nights (float64), minimum_nights_avg_ntm (float64), maximum_nights_avg_ntm (float64), calendar_updated (category, unique_values: []), has_availability (category, unique_values: [t, f]), availability_30 (uint8), availability_60 (uint8), availability_90 (uint8), availability_365 (uint16), calendar_last_scraped (datetime64[us, unique_values: [2022-12-13 00:00:00+00:00]), UTC], number_of_reviews (uint16), number_of_reviews_ltm (uint16), number_of_reviews_l30d (uint8), first_review (datetime64[us), UTC], last_review (datetime64[us), UTC], review_scores_rating (float64), review_scores_accuracy (float64), review_scores_cleanliness (float64), review_scores_checkin (float64), review_scores_communication (float64), review_scores_location (float64), review_scores_value (float64), license (category), instant_bookable (category, unique_values: [f, t]), calculated_host_listings_count (uint8), calculated_host_listings_count_entire_homes (uint8), calculated_host_listings_count_private_rooms (uint8), calculated_host_listings_count_shared_rooms (uint8), reviews_per_month (float64)",
        "output": "pd.to_numeric(df['host_response_rate'].str.rstrip('%'), errors='coerce').dropna().nsmallest(2).apply(lambda x: f'{int(x)}%').tolist()",
        "dataset": "014_Airbnb",
        "query2": "df['host_response_rate'].str.replace('%', '').astype(float).nsmallest(2).apply(lambda x: f'{int(x)}%').tolist()",
        "query4": "df['host_response_rate'].str.rstrip('%').astype(float).nsmallest(2).apply(lambda x: f'{int(x)}%').tolist()"
    },
    {
        "input": "Question: Did any incident result in the total destruction of the aircraft? \n Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category)",
        "output": "df['Aircaft_Damage_Type'].astype(str).str.lower().isin(['destroyed', 'damaged beyond repair']).any()",
        "dataset": "019_Aircraft",
        "query2": "df.query(\"`Aircaft_Damage_Type` == 'Destroyed' or `Aircaft_Damage_Type` == 'Damaged beyond repair'\").shape[0] > 0",
        "query4": "('Destroyed' in df['Aircaft_Damage_Type'].values) or ('Damaged beyond repair' in df['Aircaft_Damage_Type'].values)"
    },
    {
        "input": "Question: Has there been any instance where the ground casualties were non-zero? \n Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category)",
        "output": "df['Ground_Casualties'].astype(str).str.strip().ne('0').any()",
        "dataset": "019_Aircraft",
        "query2": "df[df['Ground_Casualties'].astype(str).str.strip() != '0'].any().any()",
        "query3": "(df['Ground_Casualties'].astype(str).str.strip() != '0').any()"
    },
    {
        "input": "Question: What are the 5 highest numbers of onboard passengers in incidents? \n Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category)",
        "output": "df['Onboard_Passengers'].str.extract(r'Occupants: (\\d+)', expand=False).astype(float).nlargest(5).tolist()",
        "dataset": "019_Aircraft",
        "query2": "df['Onboard_Passengers'].str.extract(r'Occupants: (\\d+)', expand=False).astype(float).sort_values(ascending=False).head(5).tolist()",
        "query4": "df['Onboard_Passengers'].str.extract(r'Occupants: (\\d+)', expand=False).astype(float).nlargest(5).values.tolist()"
    },
    {
        "input": "Question: List the 3 highest numbers of onboard crew in incidents. \n Dataset Columns: Incident_Date (category), Aircaft_Model (category), Aircaft_Registration (category), Aircaft_Operator (category), Aircaft_Nature (category), Incident_Category (category), Incident_Cause(es) (category), Incident_Location (category), Aircaft_Damage_Type (category, unique_values: [Substantial, Destroyed, Damaged beyond repair, Unknown, None, Minor, Missing]), Date (datetime64[us), UTC], Time (category), Arit (category), Aircaft_Engines (category), Onboard_Crew (category), Onboard_Passengers (category), Onboard_Total (category), Fatalities (uint16), Aircaft_First_Flight (category), Aircraft_Phase (category), Departure_Airport (category), Destination_Airport (category), Ground_Casualties (category), Collision_Casualties (category)",
        "output": "df['Onboard_Crew'].str.extract(r'Occupants: (\\d+)', expand=False).astype(float).nlargest(3).tolist()",
        "dataset": "019_Aircraft",
        "query2": "df['Onboard_Crew'].str.extract(r'Occupants: (\\d+)', expand=False).astype(float).sort_values(ascending=False).head(3).tolist()",
        "query4": "df['Onboard_Crew'].str.extract(r'Occupants: (\\d+)', expand=False).astype(float).sort_values(ascending=False).iloc[:3].tolist()"
    },
    {
        "input": "Question: Were there days in the summer where the minimum temperature dropped below 10? \n Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195])",
        "output": "df.loc[(df['season'] == 'Summer') & (df['tmin'] < 10)].shape[0] > 0",
        "dataset": "023_Climate",
        "query2": "df.query(\"season == 'Summer' and tmin < 10\").empty == False",
        "query3": "any(df[df['season'] == 'Summer']['tmin'] < 10)",
        "query4": "(df['season'] == 'Summer').any() and (df['tmin'] < 10).any()"
    },
    {
        "input": "Question: On average, what's the minimum temperature during winters? \n Dataset Columns: fecha (datetime64[us), UTC], season (category, unique_values: [Winter, Autumn, Summer, Spring]), month_name (category), tmin (float64), tmax (float64), sol (float64), presMax (float64), presMin (float64), prec (float64), velmedia (float64), racha (float64), dir (float64), tmed (float64), horatmax (datetime64[us), UTC], horatmin (datetime64[us), UTC], horaPresMax (float64), horaPresMin (float64), horaracha (datetime64[us), UTC], weekday_name (category, unique_values: [Thursday, Wednesday, Tuesday, Monday, Sunday, Saturday, Friday]), dayofyear (uint16), quarter (uint8, unique_values: [4, 3, 2, 1]), year (uint16), altitud (uint16, unique_values: [667]), nombre (category, unique_values: [MADRID. RETIRO]), provincia (category, unique_values: [MADRID]), indicativo (uint16, unique_values: [3195])",
        "output": "df.loc[df['season'] == 'Winter', 'tmin'].mean()",
        "dataset": "023_Climate",
        "query2": "df.query(\"season == 'Winter'\")['tmin'].mean()",
        "query3": "df[df.season.eq('Winter')]['tmin'].mean()",
        "query4": "df.where(df['season'] == 'Winter')['tmin'].mean()"
    },
    {
        "input": "Question: Are there any female respondents who belong to the ESTE NUTS1 region? \n Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educaci\u00f3n secundaria, Licenciados y similares, y doctores universitarios, Educaci\u00f3n primaria, Diplomados universitarios y similares, Ense\u00f1anzas de formaci\u00f3n profesional de grado superior y simi, Segunda etapa de eduaci\u00f3n secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [M\u00c1S DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 A\u00d1OS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y M\u00c1S TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNI\u00d3N EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTON\u00d3MICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACI\u00d3N, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPA\u00d1A, RESTO MUNDO]), RESPONSA (category, unique_values: [No, S\u00ed]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64)",
        "output": "((df['SEXO'] == 'Female') & (df['NUTS1'] == 'ESTE')).any()",
        "dataset": "024_Salary",
        "query2": "df.query(\"SEXO == 'Female' and NUTS1 == 'ESTE'\").any().any()",
        "query3": "any(df.loc[(df['SEXO'] == 'Female') & (df['NUTS1'] == 'ESTE')])",
        "query4": "(df.loc[df['SEXO'].eq('Female') & df['NUTS1'].eq('ESTE')]).any().any()"
    },
    {
        "input": "Question: On average, what's the RETRINOIN value for male respondents? \n Dataset Columns: clusters_2 (category), RETRINOIN_xRZI (float64), CNO1 (category), CNACE (category), ESTU (category, unique_values: [Primera etapa de educaci\u00f3n secundaria, Licenciados y similares, y doctores universitarios, Educaci\u00f3n primaria, Diplomados universitarios y similares, Ense\u00f1anzas de formaci\u00f3n profesional de grado superior y simi, Segunda etapa de eduaci\u00f3n secundaria, Menos que primaria]), SEXO (category, unique_values: [Male, Female]), ANOS2 (category, unique_values: [M\u00c1S DE 59, DE 40 A 49, DE 50 A 59, DE 30 A 39, DE 20 A 29, MENOS 19 A\u00d1OS]), NUTS1 (category, unique_values: [NOROESTE, NORESTE, COMUNIDAD DE MADRID, CENTRO, ESTE, SUR, CANARIAS]), ESTRATO2 (category, unique_values: [DE 1 A 49 TRABAJADORES, 200 Y M\u00c1S TRABAJADORES, DE 50 A 199 TRABAJADORES, INCLUYE ESTRATO 2 Y 3, INCLUYE TODOS LOS ESTRATOS]), CONTROL (category, unique_values: [PRIVADO, PUBLICO]), MERCADO (category, unique_values: [UNI\u00d3N EUROPEA, NACIONAL, LOCAL O REGIONAL, MUNDIAL]), REGULACION (category, unique_values: [SECTORIAL DE AMBITO INFERIOR (AUTON\u00d3MICO, PROVINCIAL, COMARC, ESTATAL SECTORIAL, OTRA FORMA DE REGULACI\u00d3N, DE EMPRESA O GRUPO DE EMPRESAS, DE CENTRO DE TRABAJO]), TIPOPAIS (category, unique_values: [ESPA\u00d1A, RESTO MUNDO]), RESPONSA (category, unique_values: [No, S\u00ed]), ANOANTI (uint8), TIPOJOR (category, unique_values: [TIEMPO PARCIAL, TIEMPO COMPLETO]), TIPOCON (category, unique_values: [DURACION DETERMINADA, DURACION INDEFINIDA]), RETRINOIN (float64), RETRINOIN_WwQk (float64), Quantiles_target (category, unique_values: [Low, Medium-low, Medium-high, High]), _gx_link_targets_ (object), _gx_link_weights_ (object), umap_cluster (category), x (float64), y (float64), RETRINOIN_ac1q (float64), RETRINOIN_QSbS (float64), RETRINOIN_stfU (float64), RETRINOIN_RxV1 (float64)",
        "output": "df[df['SEXO'] == 'Male']['RETRINOIN'].mean()",
        "dataset": "024_Salary",
        "query2": "df.loc[df['SEXO'] == 'Male', 'RETRINOIN'].mean()",
        "query3": "df.query(\"SEXO == 'Male'\")['RETRINOIN'].mean()",
        "query4": "df.where(df['SEXO'] == 'Male')['RETRINOIN'].mean()"
    },
    {
        "input": "Question: List the bottom 2 competition levels of URLs with ranking better than 5. \n Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High])",
        "output": "df[df['Ranking'] < 5]['Competition'].value_counts().tail(2).index.tolist()",
        "dataset": "025_Data",
        "query2": "df.loc[df['Ranking'] < 5, 'Competition'].value_counts().nsmallest(2).index.tolist()",
        "query3": "df.query(\"Ranking < 5\")['Competition'].value_counts().nsmallest(2).index.tolist()",
        "query4": "df[df['Ranking'] < 5]['Competition'].value_counts().sort_values().head(2).index.tolist()"
    },
    {
        "input": "Question: List the bottom 3 average monthly searches for URLs with medium competition. \n Dataset Columns: URLs (category), Ranking (uint8), Keyword (category, unique_values: [no code data science, no code data analytics, no code analytics, no code data science tools, no code analytics platform, no code predictive analytics]), Avg. monthly searches (uint8, unique_values: [50]), Competition (category, unique_values: [Medium, Unknown, Low, High])",
        "output": "df[df['Competition'] == 'Medium']['Avg. monthly searches'].nsmallest(3).tolist()",
        "dataset": "025_Data",
        "query2": "df.loc[df['Competition'] == 'Medium', 'Avg. monthly searches'].nsmallest(3).tolist()",
        "query3": "df.query(\"Competition == 'Medium'\")['Avg. monthly searches'].nsmallest(3).tolist()",
        "query4": "df.where(df['Competition'] == 'Medium')['Avg. monthly searches'].nsmallest(3).tolist()"
    },
    {
        "input": "Question: What is the material type of the article with the least number of keywords? \n Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object)",
        "output": "df.loc[df['keywords'].apply(lambda x: len(x) if isinstance(x,list) else 0).idxmin(),'material_type']",
        "dataset": "029_NYTimes",
        "query2": "df['material_type'][df['keywords'].apply(lambda x: len(x) if isinstance(x,list) else 0).idxmin()]",
        "query4": "df.iloc[df['keywords'].apply(lambda x: len(x) if isinstance(x,list) else 0).idxmin()]['material_type']"
    },
    {
        "input": "Question: List the material types of the bottom 4 articles with the least number of keywords. \n Dataset Columns: headline (object), date (datetime64[us), UTC], material_type (category), web_url (category), keywords (object)",
        "output": "df.loc[df['keywords'].apply(lambda x: len(x) if isinstance(x,list) else 0).sort_values().head(4).index, 'material_type'].tolist()",
        "dataset": "029_NYTimes",
        "query4": "df.iloc[df['keywords'].apply(lambda x: len(x) if isinstance(x,list) else 0).argsort()[:4]]['material_type'].tolist()"
    },
    {
        "input": "Question: How many participants are from the United Kingdom? \n Dataset Columns: Geographies (object), Labeled Clusters (category), General Segments (object, unique_values: [['Data Scientists'], ['Academics'], [], ['Analysts']]), Select the title most similar to your current role (or most recent title if retired) (category), In which country do you currently reside? (category), (Average) For how many years have you used machine learning methods? (float64, unique_values: [0.5, 0.0, 20.0, 1.5, 7.5, 15.0, 2.5, 4.5, 3.5]), (Average) What is your current yearly compensation (approximate $USD)?_rx_K (float64), (Average) What is the size of the company where you are employed? (float64, unique_values: [10000.0, 5500.0, 24.0, 150.0, 624.0]), (Average) For how many years have you been writing code and_or programming? (float64, unique_values: [15.0, 20.0, 0.5, 2.0, 4.0, 7.5, 0.0]), Which of the following natural language processing (NLP) methods do you use on a regular basis? (object), Which of the following integrated development environments (IDE's) do you use on a regular basis? (object), What is your current yearly compensation (approximate $USD)? (category), Which of the following cloud computing platforms do you use on a regular basis? (object), Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (object), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (object), Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis? (object), For how many years have you been writing code and_or programming? (category, unique_values: [10-20 years, 20+ years, < 1 years, 1-3 years, 3-5 years, 5-10 years, I have never written code]), What is the size of the company where you are employed? (category, unique_values: [10,000 or more employees, 1000-9,999 employees, 0-49 employees, 50-249 employees, 250-999 employees]), (Average) Approximately how much money have you (or your team) spent on machine (float64, unique_values: [54999.5, 0.0, 549.5, 50.0, 100000.0, 5499.5]), (Average) What is your current yearly compensation (approximate $USD)? (float64), Which types of specialized hardware do you use on a regular basis? (object), (Average) Approximately how many individuals are responsible for data science wo (float64, unique_values: [2.0, 20.0, 4.0, 7.0, 12.0, 17.0]), Which of the following business intelligence tools do you use on a regular basis? (object), Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (object), (Average) Approximately how many times have you used a TPU (tensor processing unit)? (float64, unique_values: [0.0, 1.0, 16.0, 4.0, 25.0]), Do you use any of the following data storage products on a regular basis? (object), Approximately how many individuals are responsible for data science workloads at your place of business? (category, unique_values: [1-2, 20+, 0, 3-4, 5-9, 10-14, 15-19]), Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)? (category), On which platforms have you begun or completed data science courses? (object), Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Do you use any of the following managed machine learning products on a regular basis? (object), Who_what are your favorite media sources that report on data science topics? (object), In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (object), Do you use any tools to help manage machine learning experiments? (object), Where do you publicly share your data analysis or machine learning applications? (object), Do you use any of the following cloud computing products on a regular basis? (object), In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (object), What is your gender? (category, unique_values: [Man, Woman, Prefer not to say, Nonbinary, Prefer to self-describe]), Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (object), Which categories of computer vision methods do you use on a regular basis? (object), For how many years have you used machine learning methods? (category, unique_values: [Under 1 year, I do not use machine learning methods, 20 or more years, 1-2 years, 5-10 years, 10-20 years, 2-3 years, 4-5 years, 3-4 years]), Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (object), (Average) What is your age (years)? (float64), Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often? (category), Which of the following business intelligence tools do you use most often? (category), What is the primary tool that you use at work or school to analyze data? (category, unique_values: [Basic statistical software (Microsoft Excel, Google Sheets, etc.), Other, Local development environments (RStudio, JupyterLab, etc.), Cloud-based data software & APIs (AWS, GCP, Azure, etc.), Business intelligence software (Salesforce, Tableau, Spotfire, etc.), Advanced statistical software (SPSS, SAS, etc.)]), Does your current employer incorporate machine learning methods into their business? (category, unique_values: [I do not know, No (we do not use ML methods), We have well established ML methods (i.e., models in production for more than 2 years), We are exploring ML methods (and may one day put a model into production), We use ML methods for generating insights (but do not put working models into production), We recently started using ML methods (i.e., models in production for less than 2 years)]), Approximately how many times have you used a TPU (tensor processing unit)? (category, unique_values: [Never, Once, 6-25 times, 2-5 times, More than 25 times]), Which of the following hosted notebook products do you use on a regular basis? (object), What is the highest level of formal education that you have attained or plan to attain within the next 2 years? (category, unique_values: [Bachelor\u2019s degree, Doctoral degree, No formal education past high school, Master\u2019s degree, Some college/university study without earning a bachelor\u2019s degree, I prefer not to answer, Professional doctorate]), In what industry is your current employer_contract (or your most recent employer if retired)? (category), Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (object), Time from Start to finish (seconds) (uint32), ID (uint16), Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)? (category, unique_values: [$10,000-$99,999, $0 ($USD), $100-$999, $1-$99, $100,000 or more ($USD), $1000-$9,999]), In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? (object), Select any activities that make up an important part of your role at work (object), What data visualization libraries or tools do you use on a regular basis? (object), Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (object), What is your age (years)? (category), What programming language would you recommend an aspiring data scientist to learn first? (category), Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years? (object), What programming languages do you use on a regular basis? (object), What type of computing platform do you use most often for your data science projects? (category, unique_values: [Other, A personal computer / desktop, A laptop, A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc), A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)])",
        "output": "df[df['In which country do you currently reside?'] == 'United Kingdom of Great Britain and Northern Ireland'].shape[0]",
        "dataset": "030_Professionals",
        "query2": "len(df[df['In which country do you currently reside?'] == 'United Kingdom of Great Britain and Northern Ireland'])",
        "query3": "df.loc[df['In which country do you currently reside?'] == 'United Kingdom of Great Britain and Northern Ireland'].shape[0]",
        "query4": "df.query(\"`In which country do you currently reside?` == 'United Kingdom of Great Britain and Northern Ireland'\").shape[0]"
    },
    {
        "input": "Question: What are the best 4 unique ratings given to 'Wise'? \n Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26])",
        "output": "df[df['Company'] == 'Wise']['rating'].unique().tolist()[:4]",
        "dataset": "031_Trustpilot",
        "query2": "df.loc[df['Company'] == 'Wise', 'rating'].unique()[:4].tolist()",
        "query3": "df.query(\"Company == 'Wise'\")['rating'].unique()[:4].tolist()",
        "query4": "df[df.Company.eq('Wise')].rating.unique()[:4].tolist()"
    },
    {
        "input": "Question: What are the bottom 5 unique ratings given to 'N26'? \n Dataset Columns: published_date (datetime64[us), UTC], country_code (category), title (category), body (object), rating (uint8, unique_values: [5, 4, 1, 2, 3]), Company (category, unique_values: [Wise, N26])",
        "output": "df[df['Company'] == 'N26']['rating'].unique().tolist()[:5]",
        "dataset": "031_Trustpilot",
        "query2": "df.loc[df['Company'] == 'N26', 'rating'].unique()[:5].tolist()",
        "query3": "df.query(\"Company == 'N26'\")['rating'].unique()[:5].tolist()",
        "query4": "df[df.Company.eq('N26')]['rating'].drop_duplicates().head(5).tolist()"
    }
]